'use client';

import React, { useState, useEffect } from 'react';
import { 
  Save,
  Upload,
  Globe,
  Shield,
  Brain,
  Database,
  Settings as SettingsIcon,
  Share2,
  Image,
  Type,
  Clock,
  Lock,
  Zap,
  Eye,
  EyeOff,
  RefreshCw,
  Download,
  AlertCircle,
  CheckCircle,
  X
} from 'lucide-react';

interface Setting {
  key: string;
  value: string | boolean | number;
  type: 'text' | 'textarea' | 'boolean' | 'number' | 'url' | 'email' | 'file' | 'select' | 'color';
  label: string;
  description?: string;
  category: string;
  options?: { value: string; label: string }[];
  required?: boolean;
}

export default function SettingsPage() {
  const [activeTab, setActiveTab] = useState('identity');
  const [darkMode, setDarkMode] = useState(false);
  const [settings, setSettings] = useState<Record<string, any>>({});
  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');
  const [unsavedChanges, setUnsavedChanges] = useState(false);

  // استرجاع حالة الوضع الليلي والإعدادات
  useEffect(() => {
    const savedDarkMode = localStorage.getItem('darkMode');
    const savedSettings = localStorage.getItem('sabqSettings');
    
    if (savedDarkMode !== null) {
      setDarkMode(JSON.parse(savedDarkMode));
    }
    
    if (savedSettings) {
      setSettings(JSON.parse(savedSettings));
    } else {
      // إعدادات افتراضية
      setSettings({
        site_name: 'صحيفة سبق الإلكترونية',
        site_description: 'أحدث الأخبار والمقالات من المملكة العربية السعودية والعالم',
        site_url: 'https://sabq.org',
        default_language: 'ar',
        default_country: 'SA',
        timezone: 'Asia/Riyadh',
        meta_title: 'صحيفة سبق - أخبار السعودية والعالم',
        meta_description: 'موقع إخباري شامل يغطي آخر الأخبار المحلية والدولية',
        meta_keywords: 'أخبار، السعودية، سياسة، اقتصاد، رياضة، تقنية',
        articles_per_page: 8,
        auto_publish: false,
        editorial_review: true,
        ai_suggestions: true,
        backup_frequency: 'daily',
        two_factor_auth: false
      });
    }
  }, []);

  // الإعدادات المجمعة حسب الفئات
  const settingsConfig: Setting[] = [
    // إعدادات الهوية
    { key: 'site_name', value: '', type: 'text', label: 'اسم الصحيفة', category: 'identity', required: true },
    { key: 'site_logo', value: '', type: 'file', label: 'الشعار الرئيسي', category: 'identity', description: 'ملف PNG أو SVG' },
    { key: 'site_favicon', value: '', type: 'file', label: 'الشعار المصغر', category: 'identity', description: 'أيقونة 32x32 بكسل' },
    { key: 'site_description', value: '', type: 'textarea', label: 'الوصف التعريفي', category: 'identity' },
    { key: 'site_url', value: '', type: 'url', label: 'الرابط الأساسي', category: 'identity', required: true },
    { key: 'default_language', value: 'ar', type: 'select', label: 'اللغة الافتراضية', category: 'identity', 
      options: [{ value: 'ar', label: 'العربية' }, { value: 'en', label: 'الإنجليزية' }] },
    { key: 'default_country', value: 'SA', type: 'select', label: 'الدولة الافتراضية', category: 'identity',
      options: [{ value: 'SA', label: 'السعودية' }, { value: 'AE', label: 'الإمارات' }, { value: 'EG', label: 'مصر' }] },
    { key: 'timezone', value: 'Asia/Riyadh', type: 'select', label: 'المنطقة الزمنية', category: 'identity',
      options: [{ value: 'Asia/Riyadh', label: 'Asia/Riyadh' }, { value: 'Asia/Dubai', label: 'Asia/Dubai' }] },

    // إعدادات SEO
    { key: 'meta_title', value: '', type: 'text', label: 'Meta Title', category: 'seo', required: true },
    { key: 'meta_description', value: '', type: 'textarea', label: 'Meta Description', category: 'seo' },
    { key: 'meta_keywords', value: '', type: 'textarea', label: 'الكلمات المفتاحية', category: 'seo' },
    { key: 'og_image', value: '', type: 'file', label: 'صورة OpenGraph', category: 'seo' },
    { key: 'og_type', value: 'website', type: 'select', label: 'نوع OG', category: 'seo',
      options: [{ value: 'website', label: 'Website' }, { value: 'article', label: 'Article' }] },
    { key: 'canonical_url', value: '', type: 'url', label: 'Canonical URL', category: 'seo' },
    { key: 'auto_sitemap', value: true, type: 'boolean', label: 'توليد Sitemap تلقائياً', category: 'seo' },

    // إعدادات التواصل
    { key: 'twitter_url', value: '', type: 'url', label: 'رابط تويتر', category: 'social' },
    { key: 'instagram_url', value: '', type: 'url', label: 'رابط إنستغرام', category: 'social' },
    { key: 'facebook_url', value: '', type: 'url', label: 'رابط فيسبوك', category: 'social' },
    { key: 'youtube_url', value: '', type: 'url', label: 'رابط يوتيوب', category: 'social' },
    { key: 'ios_app_url', value: '', type: 'url', label: 'تطبيق iOS', category: 'social' },
    { key: 'android_app_url', value: '', type: 'url', label: 'تطبيق Android', category: 'social' },
    { key: 'contact_email', value: '', type: 'email', label: 'البريد الرسمي', category: 'social' },
    { key: 'support_phone', value: '', type: 'text', label: 'رقم الدعم الفني', category: 'social' },

    // إعدادات المحتوى
    { key: 'auto_publish', value: false, type: 'boolean', label: 'تفعيل المقالات تلقائياً', category: 'content' },
    { key: 'editorial_review', value: true, type: 'boolean', label: 'تفعيل المراجعة التحريرية', category: 'content' },
    { key: 'articles_per_page', value: 8, type: 'number', label: 'عدد المقالات في الصفحة الرئيسية', category: 'content' },
    { key: 'breaking_news_duration', value: 90, type: 'number', label: 'مدة ظهور الخبر العاجل (دقائق)', category: 'content' },
    { key: 'auto_shorten_titles', value: false, type: 'boolean', label: 'تصغير العناوين تلقائياً', category: 'content' },
    { key: 'show_read_count', value: true, type: 'boolean', label: 'عرض عدد القراءات', category: 'content' },
    { key: 'allow_comments', value: true, type: 'boolean', label: 'السماح بالتعليقات', category: 'content' },
    { key: 'moderate_comments', value: true, type: 'boolean', label: 'مراقبة التعليقات قبل النشر', category: 'content' },

    // إعدادات الذكاء الاصطناعي
    { key: 'ai_enabled', value: true, type: 'boolean', label: 'تفعيل نظام الذكاء الاصطناعي', category: 'ai' },
    { key: 'openai_api_key', value: '', type: 'text', label: 'مفتاح OpenAI API', category: 'ai', description: 'sk-...' },
    { key: 'claude_api_key', value: '', type: 'text', label: 'مفتاح Claude API', category: 'ai', description: 'Claude من Anthropic' },
    { key: 'gemini_api_key', value: '', type: 'text', label: 'مفتاح Gemini API', category: 'ai', description: 'Google Gemini' },
    { key: 'default_ai_model', value: 'gpt-3.5-turbo', type: 'select', label: 'النموذج الافتراضي', category: 'ai',
      options: [
        { value: 'gpt-3.5-turbo', label: 'GPT-3.5 Turbo' },
        { value: 'gpt-4', label: 'GPT-4' },
        { value: 'gpt-4-turbo', label: 'GPT-4 Turbo' },
        { value: 'claude-3-sonnet', label: 'Claude 3 Sonnet' },
        { value: 'gemini-pro', label: 'Gemini Pro' }
      ] },
    { key: 'ai_temperature', value: 0.7, type: 'number', label: 'درجة الإبداع (0.0 - 1.0)', category: 'ai', description: 'مدى إبداعية النص المُولد' },
    { key: 'ai_max_tokens', value: 1500, type: 'number', label: 'الحد الأقصى للتوكنز', category: 'ai' },
    { key: 'ai_suggestions', value: true, type: 'boolean', label: 'تفعيل العناوين المقترحة من AI', category: 'ai' },
    { key: 'ai_summarization', value: true, type: 'boolean', label: 'تفعيل التلخيص التلقائي', category: 'ai' },
    { key: 'ai_keyword_extraction', value: true, type: 'boolean', label: 'استخراج الكلمات المفتاحية', category: 'ai' },
    { key: 'ai_content_rewrite', value: true, type: 'boolean', label: 'إعادة صياغة المحتوى', category: 'ai' },
    { key: 'ai_grammar_check', value: true, type: 'boolean', label: 'التصحيح النحوي والإملائي', category: 'ai' },
    { key: 'ai_feedback', value: true, type: 'boolean', label: 'عرض إشارات AI للمحرر', category: 'ai' },
    { key: 'ai_auto_mode', value: false, type: 'boolean', label: 'التشغيل التلقائي للميزات', category: 'ai' },
    { key: 'ai_manual_approval', value: true, type: 'boolean', label: 'الموافقة اليدوية قبل التطبيق', category: 'ai' },
    { key: 'ai_usage_limit', value: 100, type: 'number', label: 'حد الاستخدام اليومي (طلب)', category: 'ai' },
    { key: 'ai_custom_model', value: false, type: 'boolean', label: 'استخدام نموذج مخصص', category: 'ai' },
    { key: 'ai_output_language', value: 'auto', type: 'select', label: 'لغة إخراج AI', category: 'ai',
      options: [{ value: 'ar', label: 'عربي' }, { value: 'en', label: 'إنجليزي' }, { value: 'auto', label: 'تلقائي' }] },
    { key: 'ai_log_interactions', value: true, type: 'boolean', label: 'تسجيل تفاعلات AI', category: 'ai' },

    // إعدادات الأمان
    { key: 'two_factor_auth', value: false, type: 'boolean', label: 'تشغيل المصادقة الثنائية (2FA)', category: 'security' },
    { key: 'login_attempts', value: 3, type: 'number', label: 'عدد محاولات الدخول المسموحة', category: 'security' },
    { key: 'allowed_ips', value: '', type: 'textarea', label: 'IPs المسموحة (سطر منفصل لكل IP)', category: 'security' },
    { key: 'notify_settings_change', value: true, type: 'boolean', label: 'إشعار عند تعديل الإعدادات', category: 'security' },

    // إعدادات النسخ الاحتياطي
    { key: 'backup_frequency', value: 'daily', type: 'select', label: 'تكرار النسخ الاحتياطي', category: 'backup',
      options: [{ value: 'daily', label: 'يومي' }, { value: 'weekly', label: 'أسبوعي' }, { value: 'manual', label: 'يدوي' }] },
    { key: 'backup_notifications', value: true, type: 'boolean', label: 'إشعار عند كل نسخة احتياطية', category: 'backup' },
    { key: 'update_notifications', value: true, type: 'boolean', label: 'تنبيه عند توفر تحديث', category: 'backup' },
    { key: 'settings_log', value: true, type: 'boolean', label: 'حفظ سجل التعديلات', category: 'backup' }
  ];

  // مكون بطاقة الإحصائية الدائرية
  const CircularStatsCard = ({ 
    title, 
    value, 
    subtitle, 
    icon: Icon, 
    bgColor,
    iconColor
  }: {
    title: string;
    value: string;
    subtitle: string;
    icon: any;
    bgColor: string;
    iconColor: string;
  }) => (
    <div className={`rounded-2xl p-6 shadow-sm border transition-colors duration-300 hover:shadow-md ${
      darkMode 
        ? 'bg-gray-800 border-gray-700' 
        : 'bg-white border-gray-100'
    }`}>
      <div className="flex items-center gap-4">
        <div className={`w-12 h-12 ${bgColor} rounded-full flex items-center justify-center`}>
          <Icon className={`w-6 h-6 ${iconColor}`} />
        </div>
        <div className="flex-1">
          <p className={`text-sm mb-1 transition-colors duration-300 ${
            darkMode ? 'text-gray-400' : 'text-gray-500'
          }`}>{title}</p>
          <div className="flex items-baseline gap-2">
            <span className={`text-2xl font-bold transition-colors duration-300 ${
              darkMode ? 'text-white' : 'text-gray-800'
            }`}>{value}</span>
            <span className={`text-sm transition-colors duration-300 ${
              darkMode ? 'text-gray-400' : 'text-gray-500'
            }`}>{subtitle}</span>
          </div>
        </div>
      </div>
    </div>
  );

  // مكون أزرار التنقل
  const NavigationTabs = () => {
    const tabs = [
      { id: 'identity', name: 'الهوية', icon: Type },
      { id: 'seo', name: 'SEO', icon: Globe },
      { id: 'social', name: 'التواصل', icon: Share2 },
      { id: 'content', name: 'المحتوى', icon: SettingsIcon },
      { id: 'ai', name: 'الذكاء الاصطناعي', icon: Brain },
      { id: 'security', name: 'الأمان', icon: Shield },
      { id: 'backup', name: 'النسخ الاحتياطي', icon: Database }
    ];

    return (
      <div className={`rounded-2xl p-2 shadow-sm border mb-8 w-full transition-colors duration-300 ${
        darkMode 
          ? 'bg-gray-800 border-gray-700' 
          : 'bg-white border-gray-100'
      }`}>
        <div className="flex gap-2 justify-start pr-8">
          {tabs.map((tab) => {
            const Icon = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-32 flex flex-col items-center justify-center gap-2 py-4 pb-3 px-3 rounded-xl font-medium text-sm transition-all duration-300 ${
                  activeTab === tab.id
                    ? 'bg-blue-500 text-white shadow-md border-b-4 border-blue-600'
                    : darkMode
                      ? 'text-gray-300 hover:bg-gray-700 border-b-4 border-transparent hover:border-gray-600'
                      : 'text-gray-600 hover:bg-gray-50 border-b-4 border-transparent hover:border-gray-200'
                }`}
                title={tab.name}
              >
                <Icon className="w-5 h-5" />
                <span className="leading-tight text-center">{tab.name}</span>
              </button>
            );
          })}
        </div>
      </div>
    );
  };

  // مكون حقل الإعداد
  const SettingField = ({ setting }: { setting: Setting }) => {
    const value = settings[setting.key] ?? setting.value;

    const handleChange = (newValue: any) => {
      setSettings(prev => ({ ...prev, [setting.key]: newValue }));
      setUnsavedChanges(true);
    };

    const fieldClass = `w-full px-4 py-2 rounded-xl border transition-colors duration-300 ${
      darkMode 
        ? 'bg-gray-700 border-gray-600 text-gray-200 focus:border-blue-500' 
        : 'bg-white border-gray-300 text-gray-900 focus:border-blue-500'
    } focus:outline-none focus:ring-1 focus:ring-blue-500`;

    return (
      <div className="mb-6">
        <label className={`block text-sm font-medium mb-2 transition-colors duration-300 ${
          darkMode ? 'text-gray-300' : 'text-gray-700'
        }`}>
          {setting.label}
          {setting.required && <span className="text-red-500 mr-1">*</span>}
        </label>
        
        {setting.type === 'text' && (
          <input
            type="text"
            value={value}
            onChange={(e) => handleChange(e.target.value)}
            className={fieldClass}
            required={setting.required}
          />
        )}
        
        {setting.type === 'textarea' && (
          <textarea
            value={value}
            onChange={(e) => handleChange(e.target.value)}
            rows={3}
            className={fieldClass}
          />
        )}
        
        {setting.type === 'number' && (
          <input
            type="number"
            value={value}
            onChange={(e) => handleChange(parseInt(e.target.value))}
            className={fieldClass}
            min="0"
          />
        )}
        
        {setting.type === 'url' && (
          <input
            type="url"
            value={value}
            onChange={(e) => handleChange(e.target.value)}
            className={fieldClass}
            placeholder="https://"
          />
        )}
        
        {setting.type === 'email' && (
          <input
            type="email"
            value={value}
            onChange={(e) => handleChange(e.target.value)}
            className={fieldClass}
            placeholder="example@domain.com"
          />
        )}
        
        {setting.type === 'boolean' && (
          <div className="flex items-center gap-3">
            <button
              onClick={() => handleChange(!value)}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors duration-300 ${
                value ? 'bg-blue-500' : darkMode ? 'bg-gray-600' : 'bg-gray-300'
              }`}
            >
              <span
                className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform duration-300 ${
                  value ? 'translate-x-6' : 'translate-x-1'
                }`}
              />
            </button>
            <span className={`text-sm transition-colors duration-300 ${
              darkMode ? 'text-gray-300' : 'text-gray-600'
            }`}>
              {value ? 'مفعل' : 'غير مفعل'}
            </span>
          </div>
        )}
        
        {setting.type === 'select' && (
          <select
            value={value}
            onChange={(e) => handleChange(e.target.value)}
            className={fieldClass}
          >
            {setting.options?.map(option => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        )}
        
        {setting.type === 'file' && (
          <div className="space-y-2">
            <input
              type="file"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) {
                  handleChange(file.name);
                }
              }}
              className={fieldClass}
              accept={setting.key.includes('logo') || setting.key.includes('image') ? 'image/*' : '*'}
            />
            {value && (
              <p className={`text-xs transition-colors duration-300 ${
                darkMode ? 'text-gray-400' : 'text-gray-500'
              }`}>
                الملف الحالي: {value}
              </p>
            )}
                </div>
        )}
        
        {setting.description && (
          <p className={`text-xs mt-1 transition-colors duration-300 ${
            darkMode ? 'text-gray-400' : 'text-gray-500'
          }`}>
            {setting.description}
          </p>
        )}
              </div>
    );
  };

  // حفظ الإعدادات
  const handleSave = async () => {
    setSaveStatus('saving');
    try {
      // محاكاة API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      localStorage.setItem('sabqSettings', JSON.stringify(settings));
      setSaveStatus('saved');
      setUnsavedChanges(false);
      setTimeout(() => setSaveStatus('idle'), 2000);
    } catch (error) {
      setSaveStatus('error');
      setTimeout(() => setSaveStatus('idle'), 2000);
    }
  };

  // الحصول على الإعدادات حسب الفئة
  const getSettingsByCategory = (category: string) => {
    return settingsConfig.filter(setting => setting.category === category);
  };

  // عرض محتوى التبويب
  const renderTabContent = () => {
    const categorySettings = getSettingsByCategory(activeTab);
    
    return (
      <div className="space-y-6">
        {categorySettings.map(setting => (
          <SettingField key={setting.key} setting={setting} />
        ))}
      </div>
    );
  };

  return (
    <div className={`p-8 transition-colors duration-300 ${
      darkMode ? 'bg-gray-900' : ''
    }`}>
            {/* عنوان وتعريف الصفحة */}
      <div className="mb-8">
        <h1 className={`text-3xl font-bold mb-2 transition-colors duration-300 ${
          darkMode ? 'text-white' : 'text-gray-800'
        }`}>إعدادات الصحيفة</h1>
        <p className={`transition-colors duration-300 ${
          darkMode ? 'text-gray-300' : 'text-gray-600'
        }`}>إدارة الإعدادات العامة و SEO لصحيفة سبق الإلكترونية</p>
      </div>

      {/* إحصائيات الإعدادات */}
      <div className="grid grid-cols-7 gap-6 mb-8">
        <CircularStatsCard
          title="إعدادات الهوية"
          value="8"
          subtitle="إعداد"
          icon={Type}
          bgColor="bg-blue-100"
          iconColor="text-blue-600"
        />
        <CircularStatsCard
          title="إعدادات SEO"
          value="7"
          subtitle="إعداد"
          icon={Globe}
          bgColor="bg-green-100"
          iconColor="text-green-600"
        />
        <CircularStatsCard
          title="روابط التواصل"
          value="8"
          subtitle="رابط"
          icon={Share2}
          bgColor="bg-purple-100"
          iconColor="text-purple-600"
        />
        <CircularStatsCard
          title="إعدادات المحتوى"
          value="8"
          subtitle="خيار"
          icon={SettingsIcon}
          bgColor="bg-orange-100"
          iconColor="text-orange-600"
        />
        <CircularStatsCard
          title="الذكاء الاصطناعي"
          value="5"
          subtitle="ميزة"
          icon={Brain}
          bgColor="bg-cyan-100"
          iconColor="text-cyan-600"
        />
        <CircularStatsCard
          title="الأمان"
          value="4"
          subtitle="حماية"
          icon={Shield}
          bgColor="bg-red-100"
          iconColor="text-red-600"
        />
        <CircularStatsCard
          title="النسخ الاحتياطي"
          value="4"
          subtitle="خيار"
          icon={Database}
          bgColor="bg-indigo-100"
          iconColor="text-indigo-600"
        />
      </div>

      {/* أزرار التنقل */}
        <NavigationTabs />

      {/* شريط الحفظ */}
      {unsavedChanges && (
        <div className={`rounded-2xl p-4 mb-6 border-l-4 border-yellow-500 transition-colors duration-300 ${
          darkMode ? 'bg-yellow-900/20 border-yellow-400' : 'bg-yellow-50'
        }`}>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-yellow-500" />
              <span className={`font-medium transition-colors duration-300 ${
                darkMode ? 'text-yellow-300' : 'text-yellow-700'
              }`}>
                لديك تغييرات غير محفوظة
              </span>
            </div>
            <button
              onClick={handleSave}
              disabled={saveStatus === 'saving'}
              className="px-4 py-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors flex items-center gap-2 disabled:opacity-50"
            >
              {saveStatus === 'saving' ? (
                <RefreshCw className="w-4 h-4 animate-spin" />
              ) : (
                <Save className="w-4 h-4" />
              )}
              {saveStatus === 'saving' ? 'جاري الحفظ...' : 'حفظ التغييرات'}
            </button>
          </div>
        </div>
      )}

      {/* رسالة حالة الحفظ */}
      {saveStatus === 'saved' && (
        <div className={`rounded-2xl p-4 mb-6 border-l-4 border-green-500 transition-colors duration-300 ${
          darkMode ? 'bg-green-900/20' : 'bg-green-50'
        }`}>
          <div className="flex items-center gap-2">
            <CheckCircle className="w-5 h-5 text-green-500" />
            <span className={`font-medium transition-colors duration-300 ${
              darkMode ? 'text-green-300' : 'text-green-700'
            }`}>
              تم حفظ الإعدادات بنجاح
            </span>
          </div>
        </div>
      )}

      {saveStatus === 'error' && (
        <div className={`rounded-2xl p-4 mb-6 border-l-4 border-red-500 transition-colors duration-300 ${
          darkMode ? 'bg-red-900/20' : 'bg-red-50'
        }`}>
          <div className="flex items-center gap-2">
            <X className="w-5 h-5 text-red-500" />
            <span className={`font-medium transition-colors duration-300 ${
              darkMode ? 'text-red-300' : 'text-red-700'
            }`}>
              حدث خطأ أثناء حفظ الإعدادات
            </span>
          </div>
        </div>
      )}

      {/* محتوى الإعدادات */}
      <div className={`rounded-2xl shadow-sm border overflow-hidden transition-colors duration-300 ${
        darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'
      }`}>
        <div className="p-6">
          <div className="flex items-center gap-2 mb-6">
            {activeTab === 'identity' && <Type className="w-6 h-6 text-blue-500" />}
            {activeTab === 'seo' && <Globe className="w-6 h-6 text-green-500" />}
            {activeTab === 'social' && <Share2 className="w-6 h-6 text-purple-500" />}
            {activeTab === 'content' && <SettingsIcon className="w-6 h-6 text-orange-500" />}
            {activeTab === 'ai' && <Brain className="w-6 h-6 text-cyan-500" />}
            {activeTab === 'security' && <Shield className="w-6 h-6 text-red-500" />}
            {activeTab === 'backup' && <Database className="w-6 h-6 text-indigo-500" />}
            
            <h3 className={`text-xl font-bold transition-colors duration-300 ${
              darkMode ? 'text-white' : 'text-gray-800'
            }`}>
              {activeTab === 'identity' && '⚡ إعدادات الهوية'}
              {activeTab === 'seo' && '🌐 إعدادات SEO'}
              {activeTab === 'social' && '📱 إعدادات التواصل'}
              {activeTab === 'content' && '📝 إعدادات المحتوى'}
              {activeTab === 'ai' && '🧠 إعدادات الذكاء الاصطناعي'}
              {activeTab === 'security' && '🔐 إعدادات الأمان'}
              {activeTab === 'backup' && '💾 إعدادات النسخ الاحتياطي'}
            </h3>
          </div>
          
          {renderTabContent()}
        </div>
      </div>

      {/* زر الحفظ السفلي */}
      <div className="mt-8 flex justify-end">
        <button
          onClick={handleSave}
          disabled={!unsavedChanges || saveStatus === 'saving'}
          className="px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {saveStatus === 'saving' ? (
            <RefreshCw className="w-5 h-5 animate-spin" />
          ) : (
            <Save className="w-5 h-5" />
          )}
          {saveStatus === 'saving' ? 'جاري الحفظ...' : 'حفظ جميع الإعدادات'}
        </button>
      </div>
    </div>
  );
} 