name: 🚀 Comprehensive Testing and Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 Unit and Integration Tests
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci
        npx prisma generate
        
    - name: 🧪 Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        npm run test -- --coverage --watchAll=false
        
    - name: 🔗 Run Integration Tests  
      if: matrix.test-type == 'integration'
      run: |
        npm run test:integration || echo "Integration tests need setup"
        
    - name: 🎭 Run E2E Tests
      if: matrix.test-type == 'e2e'
      run: |
        npx playwright install
        npm run test:e2e || echo "E2E tests need setup"
        
    - name: 📊 Upload Coverage Reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔍 Run npm audit
      run: npm audit --audit-level high
      
    - name: 🛡️ Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: 🔐 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # 🏗️ Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: |
        npm ci
        npx prisma generate
        
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 📦 Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          public/
          package*.json
          prisma/
        retention-days: 7

  # 🐳 Docker Build and Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker container
      run: |
        # Build and test the container
        docker build -t test-image .
        docker run -d --name test-container -p 3000:3000 test-image
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:3000/api/health || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # 📊 Performance Testing
  performance:
    name: 📊 Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: 🔧 Install dependencies
      run: npm ci --production
      
    - name: 🚀 Start application
      run: |
        npm start &
        sleep 30
        
    - name: 📊 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/news
        configPath: '.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 📖 Documentation Generation
  docs:
    name: 📖 Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 📖 Generate API documentation
      run: |
        # Generate Swagger/OpenAPI docs if configured
        npm run generate:docs || echo "No docs generation script found"
        
    - name: 📚 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs

  # 🚢 Deployment
  deploy:
    name: 🚢 Deploy Application
    runs-on: ubuntu-latest
    needs: [test, security, build, docker, performance]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.deployment_environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🚀 Deploy to Production
      id: deploy
      run: |
        echo "Deploying to ${{ github.event.inputs.deployment_environment || 'staging' }}"
        # Add actual deployment commands here
        # For example: kubectl, helm, or API calls to your deployment service
        
        echo "url=https://sabq-ai-cms-${{ github.event.inputs.deployment_environment || 'staging' }}.com" >> $GITHUB_OUTPUT
        
    - name: 🔍 Post-deployment health check
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Check application health
        curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1
        
        echo "✅ Deployment successful and healthy!"

  # 📊 Create Release
  release:
    name: 📊 Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name != 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Generate version
      id: version
      run: |
        VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Simple changelog from commit messages
        echo "## Changes in this release" > CHANGELOG.md
        git log --oneline --pretty=format:"* %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> CHANGELOG.md || echo "* Initial release" >> CHANGELOG.md
        
    - name: 🎉 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # 📈 Monitoring and Notifications
  notify:
    name: 📈 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📧 Send success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, email, etc.)
        
    - name: 🚨 Send failure notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic here
