/**
 * ููู ูุณุงุนุฏ ููุชุนุงูู ูุน ุฃุฎุทุงุก Prisma
 */

export enum PrismaErrorCodes {
  CONNECTION_ERROR = "P1001", // Cannot reach database server
  CONNECTION_TIMEOUT = "P1002", // The connection pool timed out
  DATABASE_ALREADY_EXISTS = "P1003", // Database already exists
  DATABASE_NOT_FOUND = "P1004", // Database does not exist
  AUTHENTICATION_FAILED = "P1010", // User authentication failed
  FOREIGN_KEY_CONSTRAINT = "P2003", // Foreign key constraint failed
  UNIQUE_CONSTRAINT = "P2002", // Unique constraint failed
  NOT_FOUND = "P2001", // Record does not exist
  REQUIRED_FIELD = "P2012", // Missing required value
}

/**
 * ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงูุฎุทุฃ ูุชุนูู ุจุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
 */
export function isPrismaConnectionError(error: any): boolean {
  // ุงูุชุญูู ูู ุฑุณุงุฆู ุงูุฎุทุฃ ุงููุนุฑููุฉ ููุดุงูู ุงูุงุชุตุงู
  const connectionErrorMessages = [
    "Engine is not yet connected",
    "Can't reach database server",
    "P1001",
    "P1002",
    "Connection timed out",
    "Connection refused",
    "Database connection failed",
    "Invalid `prisma.$query",
  ];

  if (error && error.message) {
    return connectionErrorMessages.some((msg) => error.message.includes(msg));
  }

  // ุงูุชุญูู ูู ูุฌูุฏ ุฑูุฒ ุฎุทุฃ ูุนุฑูู
  if (error && error.code) {
    return [
      PrismaErrorCodes.CONNECTION_ERROR,
      PrismaErrorCodes.CONNECTION_TIMEOUT,
    ].includes(error.code);
  }

  return false;
}

/**
 * ูุธููุฉ ุนุงูุฉ ููุชุนุงูู ูุน ุฃุฎุทุงุก Prisma ูุชุณุฌูููุง
 */
export function handlePrismaError(error: any, context: string = "ุนุงู"): void {
  console.error(`โ ุฎุทุฃ Prisma (${context}):`, error);

  if (isPrismaConnectionError(error)) {
    console.error(`๐จ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช (${context})`);
    // ูููู ููุง ุฅุถุงูุฉ ุฅุฑุณุงู ุฅุดุนุงุฑุงุช ุฃู ุชุณุฌูู ุงูุฃุฎุทุงุก ูู ูุธุงู ูุฑุงูุจุฉ
  }
}

/**
 * ูุธููุฉ ูุณุงุนุฏุฉ ูุชูููุฏ ุฑุณุงูุฉ ุฎุทุฃ ููุงุณุจุฉ ูููุณุชุฎุฏู
 */
export function getUserFriendlyErrorMessage(error: any): string {
  if (isPrismaConnectionError(error)) {
    return "ุนุฐุฑุงูุ ูุง ูููู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุญุงููุงู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู.";
  }

  if (error && error.code) {
    switch (error.code) {
      case PrismaErrorCodes.NOT_FOUND:
        return "ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููุนูููุงุช ุงููุทููุจุฉ.";
      case PrismaErrorCodes.UNIQUE_CONSTRAINT:
        return "ูุฐู ุงููุนูููุงุช ููุฌูุฏุฉ ุจุงููุนู.";
      case PrismaErrorCodes.REQUIRED_FIELD:
        return "ุจุนุถ ุงููุนูููุงุช ุงููุทููุจุฉ ุบูุฑ ููุฌูุฏุฉ.";
      default:
        return "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู.";
    }
  }

  return "ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญูุงู.";
}
