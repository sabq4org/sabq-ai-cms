// نظام المراجعة البشرية الذكية للجرعات
export interface DoseReviewSystem {
  autoGenerated: boolean;
  humanReviewed: boolean;
  reviewerId?: string;
  reviewNotes?: string;
  qualityScore: number;
  flaggedIssues: string[];
  approvalStatus: 'pending' | 'approved' | 'rejected' | 'needs_edit';
}

export interface SmartDoseContent {
  id: string;
  title: string;
  summary: string;
  articles: any[];
  aiGenerated: boolean;
  review: DoseReviewSystem;
  timeSlot: string;
  createdAt: string;
  lastModified: string;
}

// قواعد الجودة التلقائية
export const QUALITY_RULES = {
  // كشف التكرار
  detectDuplicates: (articles: any[]) => {
    const titles = articles.map(a => a.title.toLowerCase());
    const duplicates = titles.filter((title, index) => titles.indexOf(title) !== index);
    return duplicates.length > 0 ? ['تكرار في العناوين'] : [];
  },

  // كشف المحتوى السلبي في أوقات غير مناسبة
  detectInappropriateTiming: (articles: any[], timeSlot: string) => {
    const issues: string[] = [];
    const negativeKeywords = ['وفاة', 'حادث', 'انهيار', 'أزمة', 'كارثة'];
    
    if (timeSlot === 'night') {
      articles.forEach(article => {
        const hasNegative = negativeKeywords.some(keyword => 
          article.title?.includes(keyword) || article.excerpt?.includes(keyword)
        );
        if (hasNegative) {
          issues.push(`محتوى سلبي في وقت غير مناسب: ${article.title?.substring(0, 50)}...`);
        }
      });
    }
    
    return issues;
  },

  // كشف عدم التوازن في المحتوى
  detectContentImbalance: (articles: any[]) => {
    const categories = articles.map(a => a.category_name);
    const categoryCount = categories.reduce((acc, cat) => {
      acc[cat] = (acc[cat] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const maxCategory = Math.max(...Object.values(categoryCount) as number[]);
    const totalArticles = articles.length;
    
    // إذا كان أكثر من 60% من المقالات من نفس التصنيف
    if (maxCategory / totalArticles > 0.6) {
      return ['عدم توازن في المحتوى - تركيز مفرط على تصنيف واحد'];
    }
    
    return [];
  }
};

// تقييم جودة الجرعة تلقائياً
export function assessDoseQuality(dose: SmartDoseContent): DoseReviewSystem {
  const issues: string[] = [];
  
  // تطبيق قواعد الجودة
  issues.push(...QUALITY_RULES.detectDuplicates(dose.articles));
  issues.push(...QUALITY_RULES.detectInappropriateTiming(dose.articles, dose.timeSlot));
  issues.push(...QUALITY_RULES.detectContentImbalance(dose.articles));

  // حساب نقاط الجودة
  let qualityScore = 100;
  issues.forEach(issue => {
    if (issue.includes('تكرار')) qualityScore -= 20;
    if (issue.includes('سلبي')) qualityScore -= 30;
    if (issue.includes('توازن')) qualityScore -= 15;
  });

  // تحديد حالة الموافقة
  let approvalStatus: 'pending' | 'approved' | 'rejected' | 'needs_edit' = 'approved';
  if (qualityScore < 70) approvalStatus = 'rejected';
  else if (qualityScore < 85) approvalStatus = 'needs_edit';
  else if (issues.length > 0) approvalStatus = 'pending';

  return {
    autoGenerated: dose.aiGenerated,
    humanReviewed: false,
    qualityScore,
    flaggedIssues: issues,
    approvalStatus
  };
}

// إضافات للتحرير البشري السريع
export const HUMAN_EDITING_TOOLS = {
  // استبدال مقال سريع
  replaceArticle: (doseId: string, oldArticleId: string, newArticleId: string) => {
    // Implementation for quick article replacement
  },

  // تعديل الملخص
  editSummary: (doseId: string, newSummary: string) => {
    // Implementation for summary editing
  },

  // إعادة ترتيب المقالات
  reorderArticles: (doseId: string, newOrder: string[]) => {
    // Implementation for reordering
  },

  // إضافة ملاحظة تحريرية
  addEditorialNote: (doseId: string, note: string) => {
    // Implementation for editorial notes
  }
};
