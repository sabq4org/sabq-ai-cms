import { PrismaClient } from '../lib/generated/prisma';

// ุถูุงู ุนุฏู ุฅูุดุงุก ุนุฏุฉ ุงุชุตุงูุงุช ูู ุจูุฆุฉ ุงูุชุทููุฑ
declare global {
  var prisma: PrismaClient | undefined;
}

// ุชุญุณูู ุฅุฏุงุฑุฉ ุงูุงุชุตุงู ููุนุงูุฌุฉ ุงูุฃุฎุทุงุก
const createPrismaClient = () => {
  console.log('๐ง ุฅูุดุงุก Prisma Client ุฌุฏูุฏ...');

  const client = new PrismaClient({
    log: ['error'],
    datasources: {
      db: {
        url: process.env.DATABASE_URL,
      },
    },
  });
  
  return client;
};

let prismaInstance: PrismaClient;

// ุงุณุชุฎุฏุงู ููุท singleton ูุน ุชุญุณูู ูุนุงูุฌุฉ ุงูุงุชุตุงู
if (process.env.NODE_ENV === 'production') {
  // ูู ุจูุฆุฉ ุงูุฅูุชุงุฌุ ุฅูุดุงุก ูุณุฎุฉ ุฌุฏูุฏุฉ ุฏุงุฆููุง
  prismaInstance = createPrismaClient();
} else {
  // ูู ุจูุฆุฉ ุงูุชุทููุฑุ ุงุณุชุฎุฏุงู global ูุชุฌูุจ ุฅูุดุงุก ุนุฏุฉ ุงุชุตุงูุงุช
  if (!global.prisma) {
    global.prisma = createPrismaClient();

    // ูุคุดุฑ ูุญุงูุฉ ุงูุงุชุตุงู ูู ูุงุฆู ูููุตู
    const prismaConnectionStatus = { isConnected: false };
    (global as any).prismaConnectionStatus = prismaConnectionStatus;
    
    // ูุญุงููุฉ ุงูุงุชุตุงู ุนูุฏ ุงูุฅูุดุงุก
    global.prisma.$connect()
      .then(() => {
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
        (global as any).prismaConnectionStatus.isConnected = true;
      })
      .catch((error: Error) => {
        console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
      });
  }
  
  // ุงุณุชุฎุฏุงู ุงููุณุฎุฉ ุงููุฎุฒูุฉ
  prismaInstance = global.prisma;
}

// ุชูุธูู ุงูุงุชุตุงูุงุช ุนูุฏ ุฅุบูุงู ุงูุชุทุจูู
['SIGINT', 'SIGTERM'].forEach(signal => {
  process.on(signal, async () => {
    console.log(`๐ ุฅุบูุงู ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช (${signal})...`);
    await prismaInstance?.$disconnect().catch(console.error);
  });
});

// ุชุตุฏูุฑ ุงููุณุฎุฉ ููุงุณุชุฎุฏุงู ูู ุงูุชุทุจูู
export const prisma = prismaInstance;

/**
 * ุฏุงูุฉ ูุญุณููุฉ ููุชุญูู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
 * ุชุณุชุฎุฏู ุงุณุชุฑุงุชูุฌูุฉ ุฃูุซุฑ ูุฑููุฉ ูุน ุฅููุงููุฉ ุงูุฅุนุงุฏุฉ ูุฅุฏุงุฑุฉ ุงูุฎุทุฃ
 */
export async function ensureConnection(retry = 2): Promise<boolean> {
  try {
    // ุงูุชุญูู ูู ูุชุบูุฑ ุงูุจูุฆุฉ
    if (!process.env.DATABASE_URL) {
      console.error('โ DATABASE_URL ุบูุฑ ูุญุฏุฏ');
      return false;
    }

    // ุฅุฐุง ูุงู ุงูุงุชุตุงู ูุนูู ุจุงููุนูุ ูุง ุฏุงุนู ูุฅุนุงุฏุฉ ุงูุงุชุตุงู
    if ((global as any).prismaConnectionStatus?.isConnected) {
      return true;
    }

    // ูุถุน ูููุฉ ุฒูููุฉ ูููุน ุงูุงูุชุธุงุฑ ุฅูู ูุง ูุง ููุงูุฉ
    const timeout = new Promise<boolean>((_, reject) => {
      setTimeout(() => reject(new Error('ูููุฉ ุงูุงุชุตุงู ุงูุชูุช')), 5000);
    });

    // ุงุณุชุฑุงุชูุฌูุฉ ุงูุงุชุตุงู
    const connectWithRetry = async (attemptsLeft: number): Promise<boolean> => {
      try {
        // ูุญุงููุฉ ุงูุงุชุตุงู
        await prisma.$connect();
        
        // ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจุนูููุฉ ุงุณุชุนูุงู ุจุณูุทุฉ
        const result = await prisma.$queryRaw`SELECT 1 as test`;
        
        // ุชุญุฏูุซ ุญุงูุฉ ุงูุงุชุตุงู
        (global as any).prismaConnectionStatus = { isConnected: true };
        
        return true;
      } catch (connectionError) {
        if (attemptsLeft > 0) {
          console.log(`๐ ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู... (${attemptsLeft} ูุญุงููุงุช ูุชุจููุฉ)`);
          
          try {
            // ูุญุงููุฉ ูุตู ุงูุงุชุตุงู ุงูุญุงูู
            await prisma.$disconnect();
          } catch (disconnectError) {
            // ุชุฌุงูู ุฃุฎุทุงุก ุงููุตู
          }
          
          // ุงูุชุธุงุฑ ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          return connectWithRetry(attemptsLeft - 1);
        } else {
          throw connectionError;
        }
      }
    };

    // ุชูููุฐ ุงูุงุชุตุงู ูุน ูููุฉ
    const result = await Promise.race([
      connectWithRetry(retry),
      timeout
    ]);
    
    return result;
  } catch (error) {
    console.error('โ ุฎุทุฃ ููุงุฆู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    return false;
  }
}
