# Secrets for Sabq AI CMS
# Note: In production, these should be managed by external secret management systems

apiVersion: v1
kind: Secret
metadata:
  name: sabq-ai-cms-secrets
  namespace: sabq-ai-cms
type: Opaque
data:
  # Database passwords (base64 encoded)
  POSTGRES_PASSWORD: c2FicV9kYl9wYXNzd29yZF8yMDI0  # sabq_db_password_2024
  REDIS_PASSWORD: c2FicV9yZWRpc19wYXNzX2FpXzIwMjQ=  # sabq_redis_pass_ai_2024
  CLICKHOUSE_PASSWORD: Y2xpY2tob3VzZV9wYXNzXzIwMjQ=  # clickhouse_pass_2024
  
  # Authentication secrets
  NEXTAUTH_SECRET: bmV4dGF1dGhfc2VjcmV0X3NhYnFfYWlfY21zXzIwMjQ=  # nextauth_secret_sabq_ai_cms_2024
  JWT_SECRET: and0X3NlY3JldF9zYWJxX2FpX2Ntc18yMDI0  # jwt_secret_sabq_ai_cms_2024
  
  # API Keys
  OPENAI_API_KEY: c2stcHJvamVjdC1hYmMxMjNkZWZnaGlqa2xtbm9w  # Placeholder - replace with actual key
  GOOGLE_API_KEY: QUl6YVN5QzEyM0RlZkdoaUprbG1ub1BxUnNUdVZ3WA==  # Placeholder
  
  # Email configuration
  SMTP_PASSWORD: c21tcF9wYXNzd29yZF9zYWJxXzIwMjQ=  # smtp_password_sabq_2024
  
  # Cloud storage
  AWS_SECRET_ACCESS_KEY: YXdzX3NlY3JldF9rZXlfcGxhY2Vob2xkZXI=  # aws_secret_key_placeholder
  
  # Monitoring
  GRAFANA_PASSWORD: Z3JhZmFuYV9hZG1pbl9wYXNzXzIwMjQ=  # grafana_admin_pass_2024

---
# TLS Secret for SSL certificates
apiVersion: v1
kind: Secret
metadata:
  name: sabq-ai-cms-tls
  namespace: sabq-ai-cms
type: kubernetes.io/tls
data:
  # Replace with actual certificate and key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...  # Base64 encoded private key

---
# Secret for Docker registry access
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: sabq-ai-cms
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoiZ2l0aHViX3VzZXIiLCJwYXNzd29yZCI6ImdpdGh1Yl90b2tlbiIsImF1dGgiOiJaMmwwYUhWaVgzVnpaWEk2WjJsMGFIVmlYM1J2YTJWdSJ9fX0=

---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sabq-ai-cms-sa
  namespace: sabq-ai-cms
imagePullSecrets:
- name: docker-registry-secret

---
# RBAC ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sabq-ai-cms-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# RBAC ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sabq-ai-cms-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sabq-ai-cms-role
subjects:
- kind: ServiceAccount
  name: sabq-ai-cms-sa
  namespace: sabq-ai-cms

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sabq-ai-cms-network-policy
  namespace: sabq-ai-cms
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: sabq-ai-cms
    - podSelector: {}
  - ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 8123
    - protocol: TCP
      port: 9092
  egress:
  - {}  # Allow all egress traffic
