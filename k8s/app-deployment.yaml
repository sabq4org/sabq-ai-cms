# Main Application Deployment for Sabq AI CMS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sabq-ai-cms
  namespace: sabq-ai-cms
  labels:
    app: sabq-ai-cms
    component: frontend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sabq-ai-cms
      component: frontend
  template:
    metadata:
      labels:
        app: sabq-ai-cms
        component: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: sabq-ai-cms-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: sabq-ai-cms
        image: ghcr.io/alialhazmi/sabq-ai-cms:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: PORT
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: POSTGRES_DB
        - name: REDIS_URL
          value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: REDIS_PASSWORD
        - name: CLICKHOUSE_URL
          value: "http://$(CLICKHOUSE_HOST):$(CLICKHOUSE_PORT)/$(CLICKHOUSE_DB)"
        - name: CLICKHOUSE_HOST
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: CLICKHOUSE_HOST
        - name: CLICKHOUSE_PORT
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: CLICKHOUSE_PORT
        - name: CLICKHOUSE_DB
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: CLICKHOUSE_DB
        - name: CLICKHOUSE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: CLICKHOUSE_PASSWORD
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: sabq-ai-cms-config
              key: KAFKA_BROKERS
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: NEXTAUTH_SECRET
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: JWT_SECRET
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: sabq-ai-cms-secrets
              key: OPENAI_API_KEY
        # Health check endpoints
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        # Resource limits
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-cache
          mountPath: /app/.next/cache
        - name: logs
          mountPath: /app/logs
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      # Node selection
      nodeSelector:
        kubernetes.io/arch: amd64
      # Tolerations
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      # Affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sabq-ai-cms
                - key: component
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname

---
# Service for the main application
apiVersion: v1
kind: Service
metadata:
  name: sabq-ai-cms-service
  namespace: sabq-ai-cms
  labels:
    app: sabq-ai-cms
    component: frontend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/api/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: sabq-ai-cms
    component: frontend

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sabq-ai-cms-hpa
  namespace: sabq-ai-cms
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sabq-ai-cms
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sabq-ai-cms-pdb
  namespace: sabq-ai-cms
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sabq-ai-cms
      component: frontend
