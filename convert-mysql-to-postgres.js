#!/usr/bin/env node

/**
 * تحويل ملف SQL من MySQL إلى PostgreSQL
 * Convert MySQL SQL dump to PostgreSQL compatible format
 */

const fs = require('fs');
const zlib = require('zlib');
const path = require('path');

function convertMySQLToPostgreSQL(sqlContent) {
    console.log('🔄 بدء تحويل MySQL syntax إلى PostgreSQL...');
    
    let converted = sqlContent;
    let changes = 0;

    // 1. إصلاح integer(size) -> integer
    const integerMatches = converted.match(/integer\(\d+,?\d*\)/gi);
    if (integerMatches) {
        console.log(`📊 وجدت ${integerMatches.length} مشكلة integer(size)`);
        converted = converted.replace(/integer\(\d+,0\)/gi, 'integer');
        converted = converted.replace(/integer\(\d+\)/gi, 'integer');
        changes += integerMatches.length;
    }

    // 2. إصلاح int(size) -> integer
    const intMatches = converted.match(/\bint\(\d+\)/gi);
    if (intMatches) {
        console.log(`📊 وجدت ${intMatches.length} مشكلة int(size)`);
        converted = converted.replace(/\bint\(\d+\)/gi, 'integer');
        changes += intMatches.length;
    }

    // 3. إصلاح tinyint(1) -> boolean
    const tinyintMatches = converted.match(/tinyint\(1\)/gi);
    if (tinyintMatches) {
        console.log(`📊 وجدت ${tinyintMatches.length} مشكلة tinyint(1)`);
        converted = converted.replace(/tinyint\(1\)/gi, 'boolean');
        changes += tinyintMatches.length;
    }

    // 4. إزالة backticks
    const backtickMatches = converted.match(/`[^`]*`/g);
    if (backtickMatches) {
        console.log(`📊 وجدت ${backtickMatches.length} مشكلة backticks`);
        converted = converted.replace(/`([^`]*)`/g, '"$1"');
        changes += backtickMatches.length;
    }

    // 5. إصلاح AUTO_INCREMENT
    const autoIncMatches = converted.match(/AUTO_INCREMENT/gi);
    if (autoIncMatches) {
        console.log(`📊 وجدت ${autoIncMatches.length} مشكلة AUTO_INCREMENT`);
        converted = converted.replace(/AUTO_INCREMENT/gi, 'GENERATED BY DEFAULT AS IDENTITY');
        changes += autoIncMatches.length;
    }

    // 6. إزالة ENGINE وCHARSET
    const engineMatches = converted.match(/ENGINE=[^\s,)]+/gi);
    if (engineMatches) {
        console.log(`📊 وجدت ${engineMatches.length} مشكلة ENGINE`);
        converted = converted.replace(/ENGINE=[^\s,)]+/gi, '');
        changes += engineMatches.length;
    }

    const charsetMatches = converted.match(/DEFAULT CHARSET=[^\s,)]+/gi);
    if (charsetMatches) {
        console.log(`📊 وجدت ${charsetMatches.length} مشكلة CHARSET`);
        converted = converted.replace(/DEFAULT CHARSET=[^\s,)]+/gi, '');
        changes += charsetMatches.length;
    }

    // 7. إزالة UNSIGNED
    const unsignedMatches = converted.match(/\bUNSIGNED\b/gi);
    if (unsignedMatches) {
        console.log(`📊 وجدت ${unsignedMatches.length} مشكلة UNSIGNED`);
        converted = converted.replace(/\bUNSIGNED\b/gi, '');
        changes += unsignedMatches.length;
    }

    // 8. تحويل datetime إلى timestamp
    const datetimeMatches = converted.match(/\bdatetime\b/gi);
    if (datetimeMatches) {
        console.log(`📊 وجدت ${datetimeMatches.length} مشكلة datetime`);
        converted = converted.replace(/\bdatetime\b/gi, 'timestamp');
        changes += datetimeMatches.length;
    }

    // 9. تحويل longtext/mediumtext إلى text
    const longtextMatches = converted.match(/\b(longtext|mediumtext)\b/gi);
    if (longtextMatches) {
        console.log(`📊 وجدت ${longtextMatches.length} مشكلة longtext/mediumtext`);
        converted = converted.replace(/\b(longtext|mediumtext)\b/gi, 'text');
        changes += longtextMatches.length;
    }

    // 10. تنظيف فواصل إضافية
    converted = converted.replace(/,\s*\)/g, ')');
    converted = converted.replace(/\s+/g, ' ');

    console.log(`✅ تم إجراء ${changes} تغيير لتحويل MySQL إلى PostgreSQL`);
    return converted;
}

async function processFile(inputPath, outputPath) {
    console.log(`📁 معالجة الملف: ${path.basename(inputPath)}`);
    
    try {
        // قراءة الملف المضغوط
        console.log('📥 قراءة الملف المضغوط...');
        const compressedData = fs.readFileSync(inputPath);
        const sqlContent = zlib.gunzipSync(compressedData).toString('utf8');
        
        console.log(`📊 حجم الملف الأصلي: ${(sqlContent.length / 1024 / 1024).toFixed(2)} MB`);
        
        // تحويل المحتوى
        const convertedContent = convertMySQLToPostgreSQL(sqlContent);
        
        // إضافة تعليق في بداية الملف
        const finalContent = `-- SABQ Database - MySQL to PostgreSQL Converted
-- Converted on: ${new Date().toISOString()}
-- Original file: ${path.basename(inputPath)}
-- Changes: Fixed MySQL syntax for PostgreSQL compatibility

${convertedContent}`;
        
        // ضغط وحفظ النتيجة
        console.log('📤 حفظ الملف المحول...');
        const compressedResult = zlib.gzipSync(finalContent);
        fs.writeFileSync(outputPath, compressedResult);
        
        console.log(`✅ تم الحفظ: ${outputPath}`);
        console.log(`📊 الحجم بعد التحويل: ${(finalContent.length / 1024 / 1024).toFixed(2)} MB`);
        console.log(`📊 الحجم المضغوط: ${(compressedResult.length / 1024 / 1024).toFixed(2)} MB`);
        
        return true;
    } catch (error) {
        console.error('❌ خطأ في معالجة الملف:', error.message);
        return false;
    }
}

// تشغيل المحول
async function main() {
    const inputFile = '/Users/alialhazmi/sabq-ai-cms/northflank-backup/sabq-fixed-2025-08-30T20-21-06.sql.gz';
    const outputFile = '/Users/alialhazmi/sabq-ai-cms/northflank-backup/sabq-postgres-converted.sql.gz';
    
    console.log('🚀 SABQ Database - MySQL to PostgreSQL Converter');
    console.log('===============================================\n');
    
    if (!fs.existsSync(inputFile)) {
        console.error('❌ الملف غير موجود:', inputFile);
        process.exit(1);
    }
    
    const success = await processFile(inputFile, outputFile);
    
    if (success) {
        console.log('\n🎉 تم التحويل بنجاح!');
        console.log('📁 الملف الجديد جاهز للاستيراد:');
        console.log(`   ${outputFile}`);
        console.log('\n📋 الخطوة التالية:');
        console.log('   قم برفع الملف المحول إلى Northflank');
    } else {
        console.log('\n❌ فشل التحويل');
        process.exit(1);
    }
}

main();
