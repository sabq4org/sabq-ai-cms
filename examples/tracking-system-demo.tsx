// ูุซุงู ุดุงูู ูุงุณุชุฎุฏุงู ูุธุงู ุชุชุจุน ุณููู ุงููุณุชุฎุฏู - ุณุจู ุงูุฐููุฉ
'use client';

import React, { useState, useEffect } from 'react';
import { useUserTracking, useArticleTracking, usePerformanceTracking } from '@/hooks/useUserTracking';
import PrivacyConsentModal from '@/components/privacy/PrivacyConsentModal';
import PrivacyManager, { PrivacyLevel } from '@/lib/tracking/privacy-manager';
import { Shield, BarChart3, Eye, Clock, TrendingUp, Settings } from 'lucide-react';

// ูููู ูุนุฑุถ ุญุงูุฉ ุงูุชุชุจุน
const TrackingStatus: React.FC = () => {
  const tracking = useUserTracking({
    enableInteractionTracking: true,
    enableReadingTracking: true,
    enableScrollTracking: true,
    debug: true
  });

  const [privacySettings, setPrivacySettings] = useState(PrivacyManager.loadPrivacySettings());

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <BarChart3 className="w-5 h-5 text-blue-500" />
        ุญุงูุฉ ูุธุงู ุงูุชุชุจุน
      </h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center">
          <div className={`w-3 h-3 rounded-full mx-auto mb-2 ${
            tracking.isInitialized ? 'bg-green-500' : 'bg-red-500'
          }`} />
          <p className="text-sm text-gray-600 dark:text-gray-400">ุงููุธุงู</p>
          <p className="text-xs font-medium">
            {tracking.isInitialized ? 'ูุดุท' : 'ุบูุฑ ูุดุท'}
          </p>
        </div>

        <div className="text-center">
          <div className={`w-3 h-3 rounded-full mx-auto mb-2 ${
            tracking.isTrackingReading ? 'bg-blue-500' : 'bg-gray-400'
          }`} />
          <p className="text-sm text-gray-600 dark:text-gray-400">ุชุชุจุน ุงููุฑุงุกุฉ</p>
          <p className="text-xs font-medium">
            {tracking.isTrackingReading ? 'ูุนูู' : 'ูุชููู'}
          </p>
        </div>

        <div className="text-center">
          <div className={`w-3 h-3 rounded-full mx-auto mb-2 ${
            privacySettings.userConsent ? 'bg-green-500' : 'bg-orange-500'
          }`} />
          <p className="text-sm text-gray-600 dark:text-gray-400">ุงูููุงููุฉ</p>
          <p className="text-xs font-medium">
            {privacySettings.userConsent ? 'ููุนูุฉ' : 'ูุทููุจุฉ'}
          </p>
        </div>

        <div className="text-center">
          <div className="w-3 h-3 rounded-full mx-auto mb-2 bg-purple-500" />
          <p className="text-sm text-gray-600 dark:text-gray-400">ุงูุฎุตูุตูุฉ</p>
          <p className="text-xs font-medium">
            {privacySettings.level === PrivacyLevel.MINIMAL ? 'ุนุงููุฉ' :
             privacySettings.level === PrivacyLevel.BALANCED ? 'ูุชูุงุฒูุฉ' :
             privacySettings.level === PrivacyLevel.FULL ? 'ููุชูุญุฉ' : 'ูุบููุฉ'}
          </p>
        </div>
      </div>

      <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
        <p className="text-xs text-gray-600 dark:text-gray-400">
          ูุนุฑู ุงูุฌูุณุฉ: <span className="font-mono">{tracking.sessionId}</span>
        </p>
      </div>
    </div>
  );
};

// ูููู ุชูุงุนูู ูุงุฎุชุจุงุฑ ุงูุชุชุจุน
const InteractiveDemo: React.FC = () => {
  const tracking = useArticleTracking('demo-article-123', { debug: true });
  const [selectedText, setSelectedText] = useState('');
  const [interactionCount, setInteractionCount] = useState(0);

  const handleInteraction = (type: string) => {
    setInteractionCount(prev => prev + 1);
    
    switch (type) {
      case 'like':
        tracking.trackLike();
        break;
      case 'save':
        tracking.trackSave();
        break;
      case 'share':
        tracking.trackShare('demo');
        break;
      case 'comment':
        tracking.trackComment();
        break;
    }
  };

  const handleTextSelection = () => {
    const selection = window.getSelection();
    if (selection && selection.toString().length > 0) {
      const text = selection.toString();
      setSelectedText(text);
      tracking.highlightText(text, 0, text.length);
    }
  };

  useEffect(() => {
    // ูุญุงูุงุฉ ุชุญุฏูุซ ุงููุณู ุฃุซูุงุก ุงูุชูุฑูุฑ
    const handleScroll = () => {
      const scrollPercentage = (window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100;
      
      if (scrollPercentage > 70) {
        tracking.updateReadingSection('conclusion');
      } else if (scrollPercentage > 30) {
        tracking.updateReadingSection('main_content');
      } else {
        tracking.updateReadingSection('introduction');
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [tracking]);

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <Eye className="w-5 h-5 text-green-500" />
        ุนุฑุถ ุชูุงุนูู ููุชุชุจุน
      </h3>

      <div className="space-y-4">
        {/* ูุญุชูู ูููุฑุงุกุฉ */}
        <div 
          className="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg cursor-pointer select-text"
          onMouseUp={handleTextSelection}
        >
          <h4 className="font-medium text-gray-900 dark:text-white mb-2">
            ููุงู ุชุฌุฑูุจู ูุงุฎุชุจุงุฑ ูุธุงู ุงูุชุชุจุน
          </h4>
          <p className="text-gray-700 dark:text-gray-300 leading-relaxed">
            ูุฐุง ูุต ุชุฌุฑูุจู ูุงุฎุชุจุงุฑ ูุธุงู ุชุชุจุน ุณููู ุงููุฑุงุกุฉ ูู ูููุน ุณุจู ุงูุฐููุฉ. 
            ููููู ุชุญุฏูุฏ ุฃุฌุฒุงุก ูู ุงููุต ููุดุงูุฏุฉ ููู ูุชู ุชุชุจุน ุนูููุงุช ุงูุชูููุฒ. 
            ุงููุธุงู ูุฑุตุฏ ุฃูุถุงู ููุช ุงููุฑุงุกุฉุ ูุณุจุฉ ุงูุชูุฑูุฑุ ูุงูุชูุงุนูุงุช ุงููุฎุชููุฉ ูุน ุงููุญุชูู.
            ุฌุฑุจ ุงูุชูุฑูุฑ ูุฃุณูู ููุฃุนูู ููุดุงูุฏุฉ ุชุบููุฑ ุงูุฃูุณุงู.
          </p>
          <p className="text-gray-700 dark:text-gray-300 leading-relaxed mt-3">
            ูุชููุฒ ูุธุงู ุงูุชุชุจุน ุจุญูุงูุฉ ุนุงููุฉ ููุฎุตูุตูุฉ ูุน ุฅููุงููุฉ ุชุฎุตูุต ูุณุชูู ุงูุจูุงูุงุช ุงููุฌูุนุฉ.
            ุฌููุน ุงูุจูุงูุงุช ุงูุญุณุงุณุฉ ูุดูุฑุฉ ููููู ูููุณุชุฎุฏู ุญุฐููุง ูู ุฃู ููุช.
            ุงููุธุงู ูุญูู ุฃููุงุท ุงููุฑุงุกุฉ ูุชูุฏูู ุชุฌุฑุจุฉ ุฃูุถู ูุชูุตูุงุช ุฃูุซุฑ ุฏูุฉ.
          </p>
        </div>

        {/* ุฃุฒุฑุงุฑ ุงูุชูุงุนู */}
        <div className="flex flex-wrap gap-3">
          <button
            onClick={() => handleInteraction('like')}
            className="flex items-center gap-2 px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
          >
            โค๏ธ ุฅุนุฌุงุจ
          </button>
          <button
            onClick={() => handleInteraction('save')}
            className="flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
          >
            ๐ ุญูุธ
          </button>
          <button
            onClick={() => handleInteraction('share')}
            className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition"
          >
            ๐ค ูุดุงุฑูุฉ
          </button>
          <button
            onClick={() => handleInteraction('comment')}
            className="flex items-center gap-2 px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition"
          >
            ๐ฌ ุชุนููู
          </button>
        </div>

        {/* ูุนูููุงุช ุงูุชูุงุนู */}
        <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            <strong>ุนุฏุฏ ุงูุชูุงุนูุงุช:</strong> {interactionCount}
          </p>
          {selectedText && (
            <p className="text-sm text-gray-700 dark:text-gray-300 mt-2">
              <strong>ุงููุต ุงููุญุฏุฏ:</strong> "{selectedText.substring(0, 50)}..."
            </p>
          )}
        </div>
      </div>
    </div>
  );
};

// ูููู ูุนุฑุถ ุฑุคู ุงููุฑุงุกุฉ
const ReadingInsights: React.FC = () => {
  const tracking = useUserTracking();
  const [insights, setInsights] = useState<any>(null);

  useEffect(() => {
    if (tracking.readingInsights) {
      setInsights(tracking.readingInsights);
    }
  }, [tracking.readingInsights]);

  if (!insights) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
          <TrendingUp className="w-5 h-5 text-orange-500" />
          ุฑุคู ุงููุฑุงุกุฉ
        </h3>
        <p className="text-gray-600 dark:text-gray-400">
          ุงูุฑุฃ ุจุนุถ ุงููุญุชูู ุฃููุงู ููุญุตูู ุนูู ุงูุฑุคู...
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <TrendingUp className="w-5 h-5 text-orange-500" />
        ุฑุคู ุงููุฑุงุกุฉ
      </h3>

      <div className="grid md:grid-cols-2 gap-4">
        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
          <h4 className="font-medium text-blue-900 dark:text-blue-200 mb-2">ุงูููุช ูุงููุฏุฉ</h4>
          <p className="text-sm text-blue-700 dark:text-blue-300">
            ูุฏุฉ ุงููุฑุงุกุฉ: {insights.duration_seconds} ุซุงููุฉ
          </p>
          <p className="text-sm text-blue-700 dark:text-blue-300">
            ูุณุจุฉ ุงููุฑุงุกุฉ: {insights.read_percentage}%
          </p>
        </div>

        <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
          <h4 className="font-medium text-green-900 dark:text-green-200 mb-2">ุงูุชูุงุนู</h4>
          <p className="text-sm text-green-700 dark:text-green-300">
            ุนูู ุงูุชูุฑูุฑ: {insights.scroll_depth}%
          </p>
          <p className="text-sm text-green-700 dark:text-green-300">
            ุงูุชูููุงุช: {insights.pause_points?.length || 0}
          </p>
        </div>

        <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
          <h4 className="font-medium text-purple-900 dark:text-purple-200 mb-2">ุงูุณููู</h4>
          <p className="text-sm text-purple-700 dark:text-purple-300">
            ุงูุชูุงุนูุงุช: {insights.interactions?.length || 0}
          </p>
          <p className="text-sm text-purple-700 dark:text-purple-300">
            ุงููุตูุต ุงููููุฒุฉ: {insights.highlights?.length || 0}
          </p>
        </div>

        <div className="bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg">
          <h4 className="font-medium text-orange-900 dark:text-orange-200 mb-2">ุงูุฌูุงุฒ</h4>
          <p className="text-sm text-orange-700 dark:text-orange-300">
            ุงูุงุชุฌุงู: {insights.device_orientation === 'portrait' ? 'ุนููุฏู' : 'ุฃููู'}
          </p>
          <p className="text-sm text-orange-700 dark:text-orange-300">
            ุงูุซูู: {insights.reading_environment?.theme === 'dark' ? 'ุฏุงูู' : 'ูุงุชุญ'}
          </p>
        </div>
      </div>
    </div>
  );
};

// ูููู ูุนุฑุถ ูุนูููุงุช ุงูุฃุฏุงุก
const PerformanceMetrics: React.FC = () => {
  const performanceData = usePerformanceTracking();

  if (!performanceData) {
    return null;
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <Clock className="w-5 h-5 text-red-500" />
        ููุงููุณ ุงูุฃุฏุงุก
      </h3>

      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-red-500">
            {Math.round(performanceData.page_load_time)}ms
          </div>
          <p className="text-xs text-gray-600 dark:text-gray-400">ุชุญููู ุงูุตูุญุฉ</p>
        </div>

        <div className="text-center">
          <div className="text-2xl font-bold text-blue-500">
            {Math.round(performanceData.dom_ready_time)}ms
          </div>
          <p className="text-xs text-gray-600 dark:text-gray-400">ุฌุงูุฒูุฉ DOM</p>
        </div>

        <div className="text-center">
          <div className="text-2xl font-bold text-green-500">
            {Math.round(performanceData.first_contentful_paint)}ms
          </div>
          <p className="text-xs text-gray-600 dark:text-gray-400">ุฃูู ูุญุชูู</p>
        </div>
      </div>
    </div>
  );
};

// ูููู ุฅุฏุงุฑุฉ ุงูุฎุตูุตูุฉ
const PrivacyControls: React.FC = () => {
  const [showModal, setShowModal] = useState(false);
  const [settings, setSettings] = useState(PrivacyManager.loadPrivacySettings());

  const handleSettingsUpdate = (newSettings: any) => {
    setSettings(newSettings);
    setShowModal(false);
  };

  const handleExportData = async () => {
    try {
      const result = await PrivacyManager.exportUserData('demo-user');
      if (result.success) {
        const blob = new Blob([JSON.stringify(result.data, null, 2)], {
          type: 'application/json'
        });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'my-sabq-data.json';
        a.click();
        URL.revokeObjectURL(url);
      }
    } catch (error) {
      console.error('ุฎุทุฃ ูู ุชุตุฏูุฑ ุงูุจูุงูุงุช:', error);
    }
  };

  const handleDeleteData = async () => {
    if (confirm('ูู ุฃูุช ูุชุฃูุฏ ูู ุญุฐู ุฌููุน ุจูุงูุงุชูุ ูุฐุง ุงูุฅุฌุฑุงุก ูุง ูููู ุงูุชุฑุงุฌุน ุนูู.')) {
      const result = await PrivacyManager.requestDataDeletion('demo-user');
      if (result) {
        alert('ุชู ุญุฐู ุจูุงูุงุชู ุจูุฌุงุญ');
        setSettings(PrivacyManager.loadPrivacySettings());
      }
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
        <Shield className="w-5 h-5 text-blue-500" />
        ุฅุฏุงุฑุฉ ุงูุฎุตูุตูุฉ
      </h3>

      <div className="space-y-4">
        <div className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
          <div>
            <p className="font-medium text-gray-900 dark:text-white">ูุณุชูู ุงูุฎุตูุตูุฉ</p>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {settings.level === PrivacyLevel.MINIMAL ? 'ุงูุญุฏ ุงูุฃุฏูู - ุญูุงูุฉ ุนุงููุฉ' :
               settings.level === PrivacyLevel.BALANCED ? 'ูุชูุงุฒู - ุงูุงูุชุฑุงุถู' :
               settings.level === PrivacyLevel.FULL ? 'ูุงูู - ุชุฎุตูุต ูุชูุฏู' : 'ูุบูู'}
            </p>
          </div>
          <button
            onClick={() => setShowModal(true)}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition"
          >
            <Settings className="w-4 h-4" />
          </button>
        </div>

        <div className="flex flex-wrap gap-3">
          <button
            onClick={handleExportData}
            className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition text-sm"
          >
            ๐ค ุชุตุฏูุฑ ุจูุงูุงุชู
          </button>
          
          <button
            onClick={handleDeleteData}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition text-sm"
          >
            ๐๏ธ ุญุฐู ุจูุงูุงุชู
          </button>
        </div>

        <div className="text-xs text-gray-500 dark:text-gray-400 border-t pt-3">
          ุขุฎุฑ ููุงููุฉ: {settings.consentTimestamp ? 
            new Date(settings.consentTimestamp).toLocaleDateString('ar-SA') : 'ุบูุฑ ูุชุงุญ'}
          <br />
          ุฅุตุฏุงุฑ ุงูููุงููุฉ: {settings.consentVersion}
        </div>
      </div>

      <PrivacyConsentModal
        isOpen={showModal}
        onClose={() => setShowModal(false)}
        onAccept={handleSettingsUpdate}
      />
    </div>
  );
};

// ุงููููู ุงูุฑุฆูุณู
const TrackingSystemDemo: React.FC = () => {
  const [showConsentModal, setShowConsentModal] = useState(false);

  useEffect(() => {
    // ุงูุชุญูู ูู ุงูููุงููุฉ ุนูุฏ ุงูุชุญููู
    const needsConsent = !PrivacyManager.validateConsent();
    if (needsConsent) {
      setShowConsentModal(true);
    }
  }, []);

  const handleConsentAccept = (settings: any) => {
    setShowConsentModal(false);
    // ุฅุนุงุฏุฉ ุชุญููู ุงูุตูุญุฉ ูุชุทุจูู ุงูุฅุนุฏุงุฏุงุช ุงูุฌุฏูุฏุฉ
    window.location.reload();
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
            ุนุฑุถ ุชูุถูุญู ููุธุงู ุชุชุจุน ุณููู ุงููุณุชุฎุฏู
          </h1>
          <p className="text-gray-600 dark:text-gray-400">
            ุณุจู ุงูุฐููุฉ - ูุธุงู ุชุชุจุน ูุชูุฏู ูุญุชุฑู ุงูุฎุตูุตูุฉ
          </p>
        </div>

        <div className="grid lg:grid-cols-2 gap-6 mb-6">
          <TrackingStatus />
          <PrivacyControls />
        </div>

        <div className="grid lg:grid-cols-1 gap-6 mb-6">
          <InteractiveDemo />
        </div>

        <div className="grid lg:grid-cols-2 gap-6">
          <ReadingInsights />
          <PerformanceMetrics />
        </div>
      </div>

      <PrivacyConsentModal
        isOpen={showConsentModal}
        onClose={() => setShowConsentModal(false)}
        onAccept={handleConsentAccept}
        forcedUpdate={true}
      />
    </div>
  );
};

export default TrackingSystemDemo;
