# ================================
# üöÄ DigitalOcean Optimized Dockerfile 
# ================================

FROM node:20-alpine AS base

# Dependencies stage
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json* ./
COPY prisma ./prisma/

RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps
RUN npx prisma generate

# Builder stage
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set build environment variables
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV BUILDING=true
ENV SKIP_EMAIL_VERIFICATION=true

# Dummy values for build time only
ENV DATABASE_URL="postgresql://user:pass@localhost:5432/db?schema=public"
ENV NEXTAUTH_SECRET="build-time-secret"
ENV NEXTAUTH_URL="http://localhost:3000"
ENV JWT_SECRET="build-time-jwt"
ENV OPENAI_API_KEY=""
ENV CLOUDINARY_CLOUD_NAME="placeholder"
ENV CLOUDINARY_API_KEY="placeholder"
ENV CLOUDINARY_API_SECRET="placeholder"
ENV EMAIL_HOST="smtp.example.com"
ENV EMAIL_PORT="587"
ENV EMAIL_USER="noreply@example.com"
ENV EMAIL_PASS="placeholder"

# Generate Prisma Client again to ensure it's available
RUN npx prisma generate

# Check for BUILD_ID and build if missing
RUN if [ ! -f ".next/BUILD_ID" ]; then \
        echo "‚ùå BUILD_ID missing! Running direct build..." && \
        npx next build; \
    fi

# Runner stage
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma

# Create required directories
RUN mkdir -p public/uploads && \
    mkdir -p logs && \
    chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# DigitalOcean will override these at runtime
CMD ["node", "server.js"] 