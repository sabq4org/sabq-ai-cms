# ================================
# 🚀 DigitalOcean Optimized Dockerfile 
# ================================

FROM node:18-alpine AS base

# إعدادات أساسية
WORKDIR /app
RUN apk add --no-cache libc6-compat openssl

# ================================
# 📦 مرحلة التبعيات
# ================================
FROM base AS deps
COPY package.json package-lock.json ./
RUN npm ci --only=production --no-audit --no-fund

# ================================
# 🏗️ مرحلة البناء  
# ================================
FROM base AS builder
COPY package.json package-lock.json ./
RUN npm ci --no-audit --no-fund

COPY . .

# إنشاء Prisma وبناء التطبيق
RUN npx prisma generate
RUN npm run build:production || npm run build

# ================================
# 🚀 مرحلة الإنتاج
# ================================
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# نسخ الملفات المطلوبة
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=deps /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/lib/generated ./lib/generated

# نسخ ملفات التشغيل
COPY --from=builder /app/start.sh ./start.sh
COPY --from=builder /app/start.js ./start.js
RUN chmod +x start.sh

# تعيين الصلاحيات
USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"

# تشغيل مباشر بدون start.sh
CMD ["node", "node_modules/next/dist/bin/next", "start", "-H", "0.0.0.0", "-p", "3000"] 