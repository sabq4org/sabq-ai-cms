# محرك التوصيات الذكي - سبق الذكية
# Sabq AI Recommendation Engine - Docker Compose

version: '3.8'

services:
  # قاعدة البيانات PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sabq_postgres
    environment:
      POSTGRES_DB: sabq_ai_recommendations
      POSTGRES_USER: sabq_user
      POSTGRES_PASSWORD: sabq_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - sabq_network
    restart: unless-stopped

  # التخزين المؤقت Redis
  redis:
    image: redis:7-alpine
    container_name: sabq_redis
    command: redis-server --appendonly yes --requirepass sabq_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - sabq_network
    restart: unless-stopped

  # محرك التوصيات الرئيسي
  recommendation_engine:
    build: .
    container_name: sabq_ml_engine
    environment:
      # إعدادات قاعدة البيانات
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sabq_ai_recommendations
      DB_USER: sabq_user
      DB_PASSWORD: sabq_password_2024
      
      # إعدادات Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: sabq_redis_2024
      
      # إعدادات AWS S3 (اختياري)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      S3_BUCKET: ${S3_BUCKET:-sabq-ai-models}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      
      # إعدادات النظام
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      MODEL_PATH: /app/models
      MAX_WORKERS: 4
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - sabq_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # لوحة مراقبة Redis (اختياري)
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: sabq_redis_ui
    environment:
      REDIS_HOSTS: local:redis:6379:0:sabq_redis_2024
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - sabq_network
    restart: unless-stopped

  # مراقب النظام Prometheus (اختياري)
  prometheus:
    image: prom/prometheus:latest
    container_name: sabq_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sabq_network
    restart: unless-stopped

  # لوحة Grafana للتحليلات (اختياري)
  grafana:
    image: grafana/grafana:latest
    container_name: sabq_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: sabq_admin_2024
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - sabq_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  sabq_network:
    driver: bridge
