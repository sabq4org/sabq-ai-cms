// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// نموذج المستخدمين
model User {
  id                String         @id @default(uuid())
  email             String         @unique
  passwordHash      String         @map("password_hash")
  name              String?
  avatar            String?        @db.Text
  role              String         @default("user")
  isAdmin           Boolean        @default(false) @map("is_admin")
  isVerified        Boolean        @default(false) @map("is_verified")
  verificationToken String?        @map("verification_token")
  resetToken        String?        @map("reset_token")
  resetTokenExpires DateTime?      @map("reset_token_expires")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  // العلاقات
  articles      Article[]
  activityLogs  ActivityLog[]
  userRoles     UserRole[]
  templatesCreated Template[]
  comments      Comment[]
  assignedRoles UserRole[]     @relation("AssignedBy")

  @@index([email])
  @@index([role])
  @@index([verificationToken])
  @@index([resetToken])
  @@map("users")
}

// نموذج الفئات
model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?    @db.Text
  color       String     @default("#000000")
  icon        String?
  parentId    String?    @map("parent_id")
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  orderIndex  Int        @default(0) @map("order_index")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // العلاقات
  articles Article[]

  @@index([slug])
  @@index([parentId])
  @@index([isActive])
  @@map("categories")
}

// نموذج المقالات
model Article {
  id             String        @id @default(uuid())
  title          String        @db.VarChar(500)
  slug           String        @unique @db.VarChar(500)
  content        String        @db.Text
  excerpt        String?       @db.Text
  authorId       String?       @map("author_id")
  author         User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categoryId     String?       @map("category_id")
  category       Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  status         String        @default("draft")
  views          Int           @default(0)
  featured       Boolean       @default(false)
  breaking       Boolean       @default(false)
  featuredImage  String?       @map("featured_image") @db.Text
  metadata       Json?
  tags           Json?
  publishedAt    DateTime?     @map("published_at")
  scheduledAt    DateTime?     @map("scheduled_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // العلاقات
  interactions  Interaction[]
  deepAnalysis  DeepAnalysis?
  comments      Comment[]

  @@index([slug])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@index([featured])
  @@index([breaking])
  @@map("articles")
}

// نموذج التفاعلات
model Interaction {
  id         String          @id @default(uuid())
  userId     String          @map("user_id")
  articleId  String          @map("article_id")
  article    Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  type       InteractionType
  metadata   Json?
  createdAt  DateTime        @default(now()) @map("created_at")

  @@unique([userId, articleId, type])
  @@index([userId])
  @@index([articleId])
  @@index([type])
  @@index([createdAt])
  @@map("interactions")
}

// نموذج نقاط الولاء
model LoyaltyPoint {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  points        Int
  action        String   @db.VarChar(100)
  referenceId   String?  @map("reference_id")
  referenceType String?  @map("reference_type")
  metadata      Json?
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("loyalty_points")
}

// نموذج التحليلات العميقة
model DeepAnalysis {
  id                String   @id @default(uuid())
  articleId         String   @unique @map("article_id")
  article           Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  aiSummary         String?  @map("ai_summary") @db.Text
  keyPoints         Json?    @map("key_points")
  tags              Json?
  sentiment         String?
  readabilityScore  Decimal? @map("readability_score") @db.Decimal(5, 2)
  estimatedReadTime Int?     @map("estimated_read_time")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@index([articleId])
  @@index([sentiment])
  @@map("deep_analyses")
}

// نموذج البلوكات الذكية
model SmartBlock {
  id         String      @id @default(uuid())
  name       String
  type       String
  position   String
  content    Json
  settings   Json?
  status     BlockStatus @default(active)
  orderIndex Int         @default(0) @map("order_index")
  startDate  DateTime?   @map("start_date")
  endDate    DateTime?   @map("end_date")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")

  @@index([position])
  @@index([status])
  @@index([type])
  @@index([orderIndex])
  @@map("smart_blocks")
}

// نموذج الرسائل
model Message {
  id           String        @id @default(uuid())
  name         String
  email        String
  subject      String?       @db.VarChar(500)
  message      String        @db.Text
  status       MessageStatus @default(unread)
  repliedAt    DateTime?     @map("replied_at")
  replyContent String?       @map("reply_content") @db.Text
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@index([status])
  @@index([email])
  @@index([createdAt])
  @@map("messages")
}

// نموذج سجلات النشاط
model ActivityLog {
  id         String   @id @default(uuid())
  userId     String?  @map("user_id")
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  oldValue   Json?    @map("old_value")
  newValue   Json?    @map("new_value")
  metadata   Json?
  ipAddress  String?  @map("ip_address") @db.VarChar(45)
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([action])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("activity_logs")
}

// نموذج الأدوار
model Role {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(100)
  displayName String?    @map("display_name")
  description String?    @db.Text
  permissions Json?
  isSystem    Boolean    @default(false) @map("is_system")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // العلاقات
  userRoles UserRole[]

  @@index([name])
  @@map("roles")
}

// نموذج ربط المستخدمين بالأدوار
model UserRole {
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId     String   @map("role_id")
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now()) @map("assigned_at")
  assignedBy String?  @map("assigned_by")
  assigner   User?    @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: SetNull)

  @@id([userId, roleId])
  @@map("user_roles")
}

// نموذج القوالب
model Template {
  id        String   @id @default(uuid())
  name      String
  type      String
  content   Json
  settings  Json?
  isDefault Boolean  @default(false) @map("is_default")
  isActive  Boolean  @default(true) @map("is_active")
  createdBy String?  @map("created_by")
  creator   User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([type])
  @@index([isDefault])
  @@index([isActive])
  @@map("templates")
}

// نموذج التعليقات
model Comment {
  id        String        @id @default(uuid())
  articleId String        @map("article_id")
  article   Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  userId    String?       @map("user_id")
  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  parentId  String?       @map("parent_id")
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]     @relation("CommentReplies")
  content   String        @db.Text
  status    CommentStatus @default(pending)
  likes     Int           @default(0)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
  @@map("comments")
}

// نموذج الإحصائيات
model Statistic {
  id          String   @id @default(uuid())
  date        DateTime @db.Date
  metricName  String   @map("metric_name") @db.VarChar(100)
  metricValue Decimal  @map("metric_value") @db.Decimal(15, 2)
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  @@unique([date, metricName])
  @@index([date])
  @@index([metricName])
  @@map("statistics")
}

// Enums
enum InteractionType {
  like
  save
  view
  share
  comment
}

enum BlockStatus {
  active
  inactive
}

enum MessageStatus {
  unread
  read
  replied
  archived
}

enum CommentStatus {
  pending
  approved
  rejected
  spam
}
