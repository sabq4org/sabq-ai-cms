generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EmailJob {
  id            String          @id
  template_id   String?
  scheduled_at  DateTime?
  started_at    DateTime?
  completed_at  DateTime?
  status        EmailJob_status @default(QUEUED)
  target_filter Json?
  metadata      Json?
  stats         Json?
  created_at    DateTime        @default(now())
  updated_at    DateTime

  @@index([status, scheduled_at])
}

model EmailLog {
  id              String          @id
  job_id          String?
  subscriber_id   String
  provider_msg_id String?
  message_id      String?
  status          EmailLog_status @default(PENDING)
  error           String?
  opened_at       DateTime?
  clicked_at      DateTime?
  unsubscribed_at DateTime?
  meta            Json?
  event_at        DateTime        @default(now())

  @@index([status])
  @@index([subscriber_id])
}

model EmailProviderConfig {
  id              String                   @id
  type            EmailProviderConfig_type @default(SMTP)
  sender_name     String
  sender_email    String
  api_key         String?
  host            String?
  port            Int?
  username        String?
  password        String?
  footer_html     String?
  unsubscribe_url String?
  created_at      DateTime                 @default(now())
  updated_at      DateTime
}

model EmailTemplate {
  id           String   @id
  name         String   @db.VarChar(255)
  subject      String   @db.VarChar(500)
  html_content String
  text_content String?
  metadata     Json?
  created_at   DateTime @default(now())
  updated_at   DateTime
}

/// تخزين رموز التحديث (Refresh Tokens) وإبطالها
model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  tokenHash String
  userAgent String?
  ipAddress String?
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([userId, expiresAt])
}

model Subscriber {
  id          String            @id
  email       String            @unique
  name        String?           @db.VarChar(255)
  status      Subscriber_status @default(ACTIVE)
  preferences Json?
  metadata    Json?
  created_at  DateTime          @default(now())
  updated_at  DateTime
}

model activity_logs {
  id          String   @id
  user_id     String?
  action      String
  entity_type String?
  entity_id   String?
  old_value   Json?
  new_value   Json?
  metadata    Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?
  created_at  DateTime @default(now())
}

model analytics_data {
  id           String   @id
  date         DateTime @db.Date
  metric_name  String   @db.VarChar(100)
  metric_value Decimal  @db.Decimal(15, 2)
  dimensions   Json?
  metadata     Json?
  created_at   DateTime @default(now())

  @@unique([date, metric_name])
  @@index([date])
  @@index([metric_name])
}

model article_keywords {
  id         String   @id
  article_id String
  keyword_id String
  created_at DateTime @default(now())

  @@unique([article_id, keyword_id])
  @@index([article_id])
  @@index([keyword_id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model articles {
  id                     String              @id
  title                  String              @db.VarChar(500)
  slug                   String              @db.VarChar(500)
  content                String
  excerpt                String?
  author_id              String
  category_id            String?
  status                 String              @default("draft")
  featured               Boolean             @default(false)
  breaking               Boolean             @default(false)
  featured_image         String?
  published_at           DateTime?
  scheduled_for          DateTime?
  views                  Int                 @default(0)
  reading_time           Int?
  seo_title              String?
  seo_description        String?
  seo_keywords           String?
  social_image           String?
  allow_comments         Boolean             @default(true)
  metadata               Json?
  created_at             DateTime            @default(now())
  updated_at             DateTime
  audio_summary_url      String?
  likes                  Int                 @default(0)
  saves                  Int                 @default(0)
  shares                 Int                 @default(0)
  ai_quotes              String[]
  article_author_id      String?
  article_type           String              @default("opinion")
  summary                String?
  tags                   String[]
  is_opinion_leader      Boolean             @default(false)
  /// نوع المحتوى المعياري: NEWS أو OPINION (مكمّل لحقل article_type لأغراض التوافق)
  content_type           ContentType         @default(NEWS)
  featured_image_alt     String?
  featured_image_caption String?
  ml_predictions         MLPredictions[]
  sentiment_analyses     SentimentAnalysis[]
  NewsArticleAssets      NewsArticleAssets[]
  article_quotes         article_quotes[]
  article_tags           article_tags[]
  article_author         article_authors?    @relation(fields: [article_author_id], references: [id])
  author                 users               @relation("ArticleAuthor", fields: [author_id], references: [id])
  categories             categories?         @relation(fields: [category_id], references: [id])
  interactions           interactions[]
  smart_entity_mentions  SmartEntityMention[]
  smart_link_analyses    SmartLinkAnalysis[]

  @@index([article_author_id])
  @@index([article_type])
  @@index([content_type])
  @@index([tags])
  @@index([slug, status], map: "idx_articles_slug_status")
}

model audio_episodes {
  id                String         @id
  program_id        String
  episode_number    Int?
  title             String
  content           String
  audio_url         String?
  duration          Int?
  voice_model       String         @default("bradford")
  scheduled_at      DateTime?
  published_at      DateTime?
  status            String         @default("draft")
  generation_status String         @default("pending")
  views             Int            @default(0)
  metadata          Json?
  created_at        DateTime       @default(now())
  updated_at        DateTime
  created_by        String?
  users             users?         @relation(fields: [created_by], references: [id])
  audio_programs    audio_programs @relation(fields: [program_id], references: [id], onDelete: Cascade)

  @@index([program_id])
  @@index([scheduled_at])
  @@index([status])
}

model audio_newsletters {
  id           String   @id
  title        String
  content      String
  audioUrl     String
  duration     Int
  voice_id     String
  voice_name   String
  language     String   @default("ar")
  category     String?
  is_published Boolean  @default(false)
  is_featured  Boolean  @default(false)
  play_count   Int      @default(0)
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  is_main_page Boolean  @default(false)

  @@index([created_at])
  @@index([is_featured])
  @@index([is_published])
  @@index([is_main_page])
}

model audio_programs {
  id                 String           @id
  name               String
  description        String?
  short_description  String?
  logo_url           String?
  thumbnail_url      String?
  preferred_duration Int?
  voice_model        String           @default("bradford")
  display_position   String           @default("header")
  display_order      Int              @default(0)
  status             String           @default("active")
  slug               String           @unique
  settings           Json?
  created_at         DateTime         @default(now())
  updated_at         DateTime
  created_by         String?
  audio_episodes     audio_episodes[]
  users              users?           @relation(fields: [created_by], references: [id])

  @@index([slug])
  @@index([status])
}

model audio_scheduled_jobs {
  id              String    @id
  episode_id      String
  job_type        String
  scheduled_for   DateTime
  status          String    @default("pending")
  attempts        Int       @default(0)
  last_attempt_at DateTime?
  error_message   String?
  completed_at    DateTime?
  created_at      DateTime  @default(now())

  @@index([episode_id])
  @@index([scheduled_for])
  @@index([status])
}

model categories {
  id               String           @id
  name             String
  slug             String           @unique
  description      String?
  display_order    Int              @default(0)
  is_active        Boolean          @default(true)
  color            String?          @db.VarChar(50)
  icon             String?          @db.VarChar(2000)
  icon_url         String?          @db.VarChar(2000)
  metadata         Json?
  name_en          String?
  parent_id        String?
  created_at       DateTime         @default(now())
  updated_at       DateTime
  articles         articles[]
  muqtarab_corners MuqtarabCorner[]
  user_interests   user_interests[]
}

model comments {
  id         String   @id
  article_id String
  user_id    String?
  parent_id  String?
  content    String
  status     String   @default("pending")
  likes      Int      @default(0)
  metadata   Json?
  created_at DateTime @default(now())
  updated_at DateTime
}

model daily_doses {
  id                String                @id
  period            daily_doses_period
  title             String                @db.VarChar(500)
  subtitle          String                @db.VarChar(500)
  date              DateTime              @db.Date
  status            daily_doses_status    @default(draft)
  publishedAt       DateTime?
  views             Int                   @default(0)
  metadata          Json?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime
  ai_prompt_used    String?
  created_by        String?
  editor_notes      String?
  generated_by_ai   Boolean               @default(false)
  interaction_count Int                   @default(0)
  is_global         Boolean               @default(true)
  share_count       Int                   @default(0)
  source_articles   String[]              @default([])
  topics            String[]              @default([])
  user_id           String?
  creator           users?                @relation("DoseCreator", fields: [created_by], references: [id])
  user              users?                @relation("UserDoses", fields: [user_id], references: [id], onDelete: Cascade)
  feedback          smart_dose_feedback[]

  @@unique([date, period])
  @@unique([date, period, user_id])
  @@index([date])
  @@index([period])
  @@index([status])
  @@index([user_id, period])
  @@index([is_global, period])
}

model deep_analyses {
  id                  String   @id
  article_id          String
  ai_summary          String?
  key_topics          Json?
  tags                Json?
  sentiment           String?
  readability_score   Decimal? @db.Decimal(5, 2)
  engagement_score    Int?
  suggested_headlines Json?
  related_articles    Json?
  metadata            Json?
  analyzed_at         DateTime @default(now())
  updated_at          DateTime
}

model dose_contents {
  id           String                    @id
  doseId       String
  articleId    String?
  contentType  dose_contents_contentType
  title        String                    @db.VarChar(500)
  summary      String
  audioUrl     String?
  imageUrl     String?
  displayOrder Int                       @default(0)
  metadata     Json?
  createdAt    DateTime                  @default(now())

  @@index([articleId])
  @@index([doseId])
}

model email_verification_codes {
  id         String    @id
  email      String    @db.VarChar(255)
  code       String    @db.VarChar(6)
  user_id    String?
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())

  @@index([code])
  @@index([email])
  @@index([expires_at])
}

model forum_badges {
  id           String    @id
  name         String    @db.VarChar(255)
  name_ar      String    @db.VarChar(255)
  description  String?
  icon         String?   @db.VarChar(50)
  color        String?   @db.VarChar(50)
  requirements Json?
  points       Int?      @default(0)
  is_active    Boolean?  @default(true)
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
}

model forum_categories {
  id            String    @id
  name          String    @db.VarChar(255)
  name_ar       String    @db.VarChar(255)
  slug          String    @unique(map: "slug") @db.VarChar(255)
  description   String?
  icon          String?   @db.VarChar(50)
  color         String?   @db.VarChar(50)
  display_order Int?      @default(0)
  is_active     Boolean?  @default(true)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @default(now())

  @@index([display_order])
  @@index([slug])
}

model forum_follows {
  id          String                    @id
  user_id     String
  target_type forum_follows_target_type
  target_id   String
  created_at  DateTime?                 @default(now())

  @@unique([user_id, target_type, target_id])
  @@index([target_type, target_id])
  @@index([user_id])
}

model forum_notifications {
  id          String    @id
  user_id     String
  type        String    @db.VarChar(50)
  target_type String?   @db.VarChar(50)
  target_id   String?
  data        Json?
  is_read     Boolean?  @default(false)
  created_at  DateTime? @default(now())

  @@index([created_at])
  @@index([user_id, is_read])
}

model forum_replies {
  id          String                @id
  topic_id    String
  parent_id   String?
  author_id   String
  content     String
  is_accepted Boolean?              @default(false)
  status      forum_replies_status? @default(active)
  edited_at   DateTime?
  edited_by   String?
  created_at  DateTime?             @default(now())
  updated_at  DateTime?             @default(now())

  @@index([author_id])
  @@index([created_at])
  @@index([parent_id])
  @@index([topic_id])
}

model forum_reports {
  id          String                    @id
  reporter_id String
  target_type forum_reports_target_type
  target_id   String
  reason      String                    @db.VarChar(255)
  description String?
  status      forum_reports_status?     @default(pending)
  resolved_by String?
  resolved_at DateTime?
  created_at  DateTime?                 @default(now())

  @@index([reporter_id])
  @@index([status])
  @@index([target_type, target_id])
}

model forum_reputation {
  id          String    @id
  user_id     String
  points      Int?      @default(0)
  action_type String    @db.VarChar(50)
  target_type String?   @db.VarChar(50)
  target_id   String?
  description String?
  created_at  DateTime? @default(now())

  @@index([created_at])
  @@index([user_id])
}

model forum_topics {
  id            String               @id
  title         String               @db.VarChar(500)
  content       String
  author_id     String
  category_id   String
  is_pinned     Boolean?             @default(false)
  is_locked     Boolean?             @default(false)
  is_featured   Boolean?             @default(false)
  status        forum_topics_status? @default(active)
  views         Int?                 @default(0)
  last_reply_at DateTime?
  last_reply_by String?
  created_at    DateTime?            @default(now())
  updated_at    DateTime?            @default(now())

  @@index([author_id])
  @@index([category_id])
  @@index([last_reply_at])
  @@index([status, created_at])
}

model forum_user_badges {
  id        String    @id
  user_id   String
  badge_id  String
  earned_at DateTime? @default(now())

  @@unique([user_id, badge_id])
  @@index([badge_id])
  @@index([user_id])
}

model forum_votes {
  id          String                  @id
  user_id     String
  target_type forum_votes_target_type
  target_id   String
  vote_type   forum_votes_vote_type
  created_at  DateTime?               @default(now())

  @@unique([user_id, target_type, target_id])
  @@index([target_type, target_id])
  @@index([user_id])
}

model home_blocks_config {
  id            String   @id
  block_type    String   @db.VarChar(50)
  title         String   @db.VarChar(255)
  subtitle      String?  @db.VarChar(255)
  settings      Json
  display_order Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime
}

model interactions {
  id         String            @id
  user_id    String
  article_id String
  type       interactions_type
  created_at DateTime          @default(now())
  articles   articles          @relation(fields: [article_id], references: [id])
  users      users             @relation(fields: [user_id], references: [id])

  @@unique([user_id, article_id, type])
  @@index([article_id, type, created_at(sort: Desc)], map: "idx_interactions_article_type")
  @@index([article_id])
  @@index([user_id])
}

/// تصويتات الاستطلاع لأسئلة الذكاء الإبداعي للمقالات
model ai_poll_votes {
  id            String   @id @default(cuid())
  article_id    String
  question_id   String
  question_text String
  option_index  Int
  options       Json?
  user_id       String?
  ip_hash       String
  user_agent    String?
  created_at    DateTime @default(now())

  @@unique([article_id, question_id, ip_hash])
  @@unique([article_id, question_id, user_id])
  @@index([article_id, question_id])
}

model keywords {
  id         String   @id
  name       String
  slug       String
  count      Int      @default(0)
  created_at DateTime @default(now())
}

model loyalty_points {
  id             String   @id
  user_id        String
  points         Int
  action         String   @db.VarChar(100)
  reference_id   String?
  reference_type String?
  metadata       Json?
  created_at     DateTime @default(now())
}

model messages {
  id            String    @id
  from_user_id  String?
  to_user_id    String?
  email         String
  subject       String?   @db.VarChar(500)
  message       String
  status        String    @default("unread")
  replied_at    DateTime?
  reply_content String?
  metadata      Json?
  created_at    DateTime  @default(now())
}

model opinion_articles {
  id              String                @id
  title           String
  content         String
  excerpt         String?
  views           Int                   @default(0)
  likes           Int                   @default(0)
  saves           Int                   @default(0)
  shares          Int                   @default(0)
  metadata        Json?
  audioUrl        String?
  authorId        String?
  category        String?
  createdAt       DateTime              @default(now())
  featuredImage   String?
  isActive        Boolean               @default(true)
  publishedAt     DateTime?
  readingTime     Int?
  seoKeywords     String[]
  updatedAt       DateTime              @default(now())
  status          OpinionArticle_status @default(draft)
  opinion_authors opinion_authors?      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([category])
  @@index([publishedAt])
  @@index([status, isActive])
}

model opinion_authors {
  id               String             @id
  name             String
  email            String?            @unique
  title            String?
  avatarUrl        String?
  bio              String?
  category         String?
  twitterUrl       String?
  linkedinUrl      String?
  websiteUrl       String?
  isActive         Boolean            @default(true)
  displayOrder     Int?
  metadata         Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  opinion_articles opinion_articles[]
}

model password_reset_tokens {
  id         String    @id
  user_id    String
  token      String    @unique @db.VarChar(255)
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())

  @@index([expires_at])
  @@index([token])
  @@index([user_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model roles {
  id           String   @id
  name         String   @unique @db.VarChar(100)
  slug         String?
  display_name String?
  description  String?
  permissions  Json?
  is_system    Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model site_settings {
  id         String   @id
  section    String   @db.VarChar(50)
  data       Json
  created_at DateTime @default(now())
  updated_at DateTime
}

model smart_blocks {
  id            String    @id
  name          String    @db.VarChar(255)
  type          String    @db.VarChar(50)
  config        Json
  ai_config     Json?
  display_rules Json?
  is_active     Boolean   @default(true)
  last_updated  DateTime?
  performance   Json?
  created_at    DateTime  @default(now())
  updated_at    DateTime
}

model team_members {
  id            String   @id
  name          String   @db.VarChar(255)
  role          String   @db.VarChar(100)
  department    String?  @db.VarChar(100)
  bio           String?
  avatar        String?
  email         String?  @db.VarChar(255)
  phone         String?  @db.VarChar(50)
  social_links  Json?
  is_active     Boolean  @default(true)
  display_order Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime
}

model template_previews {
  id          String   @id
  template_id String
  title       String   @db.VarChar(500)
  content     String
  metadata    Json?
  created_at  DateTime @default(now())

  @@index([template_id])
}

model templates {
  id           String   @id
  name         String   @db.VarChar(255)
  slug         String   @db.VarChar(255)
  description  String?
  category     String   @db.VarChar(50)
  content      Json
  variables    Json?
  preview_data Json?
  is_active    Boolean  @default(true)
  usage_count  Int      @default(0)
  created_by   String?
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model timeline_events {
  id             String   @id
  event_type     String   @db.VarChar(50)
  entity_type    String   @db.VarChar(50)
  entity_id      String?
  title          String   @db.VarChar(500)
  description    String?
  icon           String?  @db.VarChar(50)
  url            String?  @db.VarChar(500)
  user_id        String?
  author_name    String?  @db.VarChar(255)
  author_avatar  String?
  category_name  String?  @db.VarChar(255)
  category_color String?  @db.VarChar(50)
  metadata       Json?
  is_important   Boolean  @default(false)
  created_at     DateTime @default(now())
}

model user_insights {
  id                      String    @id @db.VarChar(36)
  user_id                 String    @unique @db.VarChar(36)
  total_reads             Int?      @default(0)
  total_saved             Int?      @default(0)
  total_interactions      Int?      @default(0)
  avg_read_time           Float?
  preferred_reading_time  String?   @db.VarChar(50)
  reader_type             String?   @db.VarChar(50)
  diversity_score         Float?
  preferred_categories    Json?
  preferred_article_types Json?
  avg_article_length      Int?
  weekly_reads            Int?      @default(0)
  weekly_streak           Int?      @default(0)
  last_read_date          DateTime? @db.Timestamptz(6)
  calculated_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at              DateTime? @default(now()) @db.Timestamptz(6)
}

model user_preferences {
  id         String   @id
  user_id    String
  key        String
  value      Json
  created_at DateTime @default(now())
  updated_at DateTime

  @@unique([user_id, key])
  @@index([user_id])
}

model user_reading_sessions {
  id               String    @id @db.VarChar(36)
  user_id          String    @db.VarChar(36)
  article_id       String    @db.VarChar(36)
  started_at       DateTime? @default(now()) @db.Timestamptz(6)
  ended_at         DateTime? @db.Timestamptz(6)
  duration_seconds Int?
  read_percentage  Float?
  scroll_depth     Float?
  device_type      String?   @db.VarChar(50)
  time_of_day      Int?
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
}

model user_roles {
  id         String    @id
  user_id    String
  role_id    String
  granted_by String?
  granted_at DateTime  @default(now())
  expires_at DateTime?
}

model user_similar_readers {
  id                String    @id @db.VarChar(36)
  user_id           String    @db.VarChar(36)
  similar_user_id   String    @db.VarChar(36)
  similarity_score  Float?
  common_categories Json?
  calculated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([user_id, similar_user_id])
}

model user_activities {
  id            String   @id @db.VarChar(50)
  user_id       String   @default("anonymous") @db.VarChar(36)
  session_id    String   @db.VarChar(100)
  activity_type String   @db.VarChar(50)
  activity_data Json?
  created_at    DateTime @default(now())

  @@index([user_id])
  @@index([session_id])
  @@index([activity_type])
  @@index([created_at])
}

model users {
  id                       String                    @id
  email                    String                    @unique
  password_hash            String?
  name                     String?
  avatar                   String?
  role                     String                    @default("user")
  is_admin                 Boolean                   @default(false)
  is_verified              Boolean                   @default(false)
  verification_token       String?
  reset_token              String?
  reset_token_expiry       DateTime?
  created_at               DateTime                  @default(now())
  updated_at               DateTime
  city                     String?
  country                  String                    @default("SA")
  date_of_birth            DateTime?
  email_verified_at        DateTime?
  gender                   String?
  interests                Json                      @default("[]")
  last_login_at            DateTime?
  loyalty_points           Int                       @default(0)
  phone                    String?
  preferred_language       String                    @default("ar")
  profile_completed        Boolean                   @default(false)
  status                   String                    @default("active")
  two_factor_enabled       Boolean                   @default(false)
  LoyaltyTransactions      LoyaltyTransactions[]
  ml_predictions           MLPredictions[]
  search_queries           SearchQueries[]
  sentiment_analyses       SentimentAnalysis[]
  smart_notifications      SmartNotifications[]
  UserBadges               UserBadges[]
  UserDailyActivities      UserDailyActivities[]
  UserDetailedPreferences  UserDetailedPreferences[]
  UserInteractions         UserInteractions[]
  user_recommendations     UserRecommendations[]
  UserSessions             UserSessions[]
  user_settings            UserSettings[]
  authored_announcements   AdminAnnouncement[]       @relation("AnnouncementAuthor")
  created_ads              ads[]                     @relation("AdCreator")
  authored_articles        articles[]                @relation("ArticleAuthor")
  audio_episodes           audio_episodes[]
  audio_programs           audio_programs[]
  created_doses            daily_doses[]             @relation("DoseCreator")
  user_doses               daily_doses[]             @relation("UserDoses")
  interactions             interactions[]
  MediaAssets              MediaAsset[]
  MediaFolders             MediaFolder[]
  muqtarab_analytics       MuqtarabAnalytics[]
  muqtarab_articles        MuqtarabArticle[]
  muqtarab_comments        MuqtarabComment[]
  muqtarab_corners         MuqtarabCorner[]
  muqtarab_followers       MuqtarabFollower[]
  muqtarab_interactions    MuqtarabInteraction[]
  reporter_profile         reporters?
  dose_feedback            smart_dose_feedback[]     @relation("DoseFeedbackUser")
  dose_templates           smart_dose_templates[]    @relation("DoseTemplateCreator")
  two_factor_auth          two_factor_auth?
  ui_settings              UiSetting[]
  user_interests           user_interests[]
  notifications            Notification[]
  notification_preferences UserNotificationPreference?

  @@index([email], map: "idx_users_email")
  @@index([role], map: "idx_users_role")
  @@index([email])
  @@index([role])
  @@index([loyalty_points])
  @@index([status])
}

model reporters {
  id                  String   @id @default(cuid())
  user_id             String   @unique
  full_name           String
  slug                String   @unique
  title               String?
  bio                 String?
  avatar_url          String?
  is_verified         Boolean  @default(false)
  verification_badge  String?  @default("verified")
  specializations     Json?
  coverage_areas      Json?
  languages           Json?    @default("[\"ar\"]")
  twitter_url         String?
  linkedin_url        String?
  website_url         String?
  email_public        String?
  total_articles      Int      @default(0)
  total_views         Int      @default(0)
  total_likes         Int      @default(0)
  total_shares        Int      @default(0)
  avg_reading_time    Float?
  engagement_rate     Float    @default(0.0)
  writing_style       Json?
  popular_topics      Json?
  publication_pattern Json?
  reader_demographics Json?
  is_active           Boolean  @default(true)
  show_stats          Boolean  @default(true)
  show_contact        Boolean  @default(false)
  display_order       Int?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([is_active])
  @@index([is_verified])
  @@index([total_articles])
  @@map("reporters")
}

model was_news {
  id               String   @id
  news_NUM         Int      @unique
  news_DT          DateTime
  news_basket_CD   Int
  news_class_CD    Int
  news_priority_CD Int
  is_Report        Boolean  @default(false)
  title_TXT        String
  story_TXT        String?
  media            Json?
  royalType        Int?
  keywords         Json?
  related_news_CD  Int?
  is_imported      Boolean  @default(false)
  imported_to_id   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  @@index([created_at])
  @@index([is_imported])
  @@index([news_DT])
  @@index([news_basket_CD])
}

model SystemSettings {
  id               String   @id @default(cuid())
  module           String
  category         String
  key              String
  value            Json
  data_type        String
  description      String?
  is_public        Boolean  @default(false)
  is_user_editable Boolean  @default(false)
  default_value    Json?
  validation_rules Json?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@unique([module, category, key])
  @@index([module, category])
}

model UserSettings {
  id         String   @id @default(cuid())
  user_id    String
  module     String
  key        String
  value      Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, module, key])
  @@index([user_id, module])
}

model MLModels {
  id                  String           @id @default(cuid())
  name                String           @unique
  type                MLModelType
  version             String
  description         String?
  status              MLModelStatus    @default(training)
  config              Json
  hyperparameters     Json?
  training_data       Json?
  performance_metrics Json?
  model_path          String?
  api_endpoint        String?
  is_active           Boolean          @default(false)
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
  predictions         MLPredictions[]
  training_jobs       MLTrainingJobs[]
}

model MLTrainingJobs {
  id              String         @id @default(cuid())
  model_id        String
  status          TrainingStatus @default(queued)
  dataset_config  Json
  training_config Json
  progress        Float          @default(0)
  metrics         Json?
  error_log       String?
  started_at      DateTime?
  completed_at    DateTime?
  created_at      DateTime       @default(now())
  model           MLModels       @relation(fields: [model_id], references: [id], onDelete: Cascade)

  @@index([model_id, status])
}

model MLPredictions {
  id               String    @id @default(cuid())
  model_id         String
  input_data       Json
  prediction       Json
  confidence_score Float?
  processing_time  Int?
  user_id          String?
  article_id       String?
  created_at       DateTime  @default(now())
  article          articles? @relation(fields: [article_id], references: [id])
  model            MLModels  @relation(fields: [model_id], references: [id], onDelete: Cascade)
  user             users?    @relation(fields: [user_id], references: [id])

  @@index([model_id, created_at])
  @@index([user_id, created_at])
}

model SentimentAnalysis {
  id              String         @id @default(cuid())
  content_id      String
  content_type    String
  text_content    String
  sentiment_score Float
  sentiment_label SentimentLabel
  confidence      Float
  emotions        Json?
  keywords        String[]
  language        String         @default("ar")
  model_version   String
  processed_at    DateTime       @default(now())
  user_id         String?
  article_id      String?
  article         articles?      @relation(fields: [article_id], references: [id])
  user            users?         @relation(fields: [user_id], references: [id])

  @@index([content_type, sentiment_label])
  @@index([processed_at])
  @@index([user_id])
  @@index([article_id])
}

model SmartNotifications {
  id                    String               @id @default(cuid())
  user_id               String?
  title                 String
  message               String
  type                  NotificationType
  priority              NotificationPriority @default(medium)
  category              String?
  data                  Json?
  scheduled_at          DateTime?
  sent_at               DateTime?
  read_at               DateTime?
  clicked_at            DateTime?
  status                NotificationStatus   @default(pending)
  delivery_channels     String[]
  ai_optimized          Boolean              @default(false)
  personalization_score Float?
  created_at            DateTime             @default(now())
  user                  users?               @relation(fields: [user_id], references: [id])

  // Indexes for fast queries
  @@index([user_id, status])
  @@index([user_id, created_at(sort: Desc)]) // For pagination
  @@index([scheduled_at, status])
  @@index([type, priority])
  @@index([status]) // For cleanup queries
  @@index([created_at(sort: Desc)]) // For recent notifications
}

model PerformanceMetrics {
  id          String   @id @default(cuid())
  metric_type String
  metric_name String
  value       Float
  unit        String?
  context     Json?
  timestamp   DateTime @default(now())
  tags        String[]

  @@index([metric_type, timestamp])
  @@index([metric_name, timestamp])
}

model RecommendationModels {
  id                String                @id @default(cuid())
  name              String                @unique
  type              RecommendationType
  algorithm         String
  config            Json
  is_active         Boolean               @default(false)
  performance_score Float?
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  recommendations   UserRecommendations[]
}

model UserRecommendations {
  id                String               @id @default(cuid())
  user_id           String
  model_id          String
  recommended_items Json
  confidence_scores Json
  reason            String?
  clicked_items     String[]
  feedback_score    Float?
  created_at        DateTime             @default(now())
  expires_at        DateTime?
  model             RecommendationModels @relation(fields: [model_id], references: [id], onDelete: Cascade)
  user              users                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, created_at])
  @@index([model_id, created_at])
}

model SearchQueries {
  id              String   @id @default(cuid())
  user_id         String?
  query           String
  query_vector    Json?
  filters         Json?
  results_count   Int      @default(0)
  clicked_results String[]
  search_time_ms  Int?
  result_quality  Float?
  session_id      String?
  ip_address      String?
  user_agent      String?
  created_at      DateTime @default(now())
  user            users?   @relation(fields: [user_id], references: [id])

  @@index([user_id, created_at])
  @@index([query, created_at])
}

model AdvancedAnalytics {
  id                String   @id @default(cuid())
  metric_category   String
  metric_name       String
  dimensions        Json
  measures          Json
  time_period       String
  aggregation_level String
  filters           Json?
  raw_data          Json?
  computed_at       DateTime @default(now())

  @@index([metric_category, time_period])
  @@index([metric_name, computed_at])
}

model ExternalDataSources {
  id               String            @id @default(cuid())
  name             String            @unique
  type             String
  url              String
  config           Json
  last_sync        DateTime?
  sync_frequency   String
  is_active        Boolean           @default(true)
  error_count      Int               @default(0)
  success_count    Int               @default(0)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  imported_content ExternalContent[]
}

model ExternalContent {
  id            String              @id @default(cuid())
  source_id     String
  external_id   String
  title         String
  content       String?
  summary       String?
  url           String?
  published_at  DateTime?
  category      String?
  tags          String[]
  metadata      Json?
  import_status ImportStatus        @default(pending)
  processed_at  DateTime?
  created_at    DateTime            @default(now())
  source        ExternalDataSources @relation(fields: [source_id], references: [id], onDelete: Cascade)

  @@unique([source_id, external_id])
  @@index([source_id, import_status])
}

model SmartEntityTypes {
  id          String          @id
  name        String          @unique
  name_ar     String
  icon        String
  color       String
  description String?
  is_active   Boolean         @default(true)
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
  entities    SmartEntities[]

  @@map("smart_entity_types")
}

model SmartEntities {
  id                  String              @id @default(cuid())
  name                String
  name_ar             String?
  name_en             String?
  entity_type_id      String
  description         String?
  short_bio           String?
  importance_score    Int                 @default(5)
  is_active           Boolean             @default(true)
  is_verified         Boolean             @default(false)
  aliases             Json?
  official_website    String?
  wikipedia_url       String?
  social_media        Json?
  birth_date          DateTime?
  start_date          DateTime?
  end_date            DateTime?
  location            String?
  country             String?             @default("SA")
  region              String?
  slug                String?             @unique
  seo_keywords        String?
  mention_count       Int                 @default(0)
  click_count         Int                 @default(0)
  last_mentioned      DateTime?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  entity_links_source EntityLinks[]       @relation("SourceEntity")
  entity_links_target EntityLinks[]       @relation("TargetEntity")
  smart_links         SmartArticleLinks[]
  entity_type         SmartEntityTypes    @relation(fields: [entity_type_id], references: [id])

  @@index([entity_type_id])
  @@index([importance_score])
  @@index([mention_count])
  @@map("smart_entities")
}

model EntityLinks {
  id                String        @id @default(cuid())
  source_entity_id  String
  target_entity_id  String
  relationship_type String
  relationship_ar   String?
  strength          Int           @default(1)
  is_active         Boolean       @default(true)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  source_entity     SmartEntities @relation("SourceEntity", fields: [source_entity_id], references: [id])
  target_entity     SmartEntities @relation("TargetEntity", fields: [target_entity_id], references: [id])

  @@unique([source_entity_id, target_entity_id, relationship_type])
  @@map("entity_links")
}

model SmartArticleLinks {
  id              String        @id @default(cuid())
  article_id      String
  entity_id       String
  matched_text    String
  context_before  String?
  context_after   String?
  position        Int
  confidence      Float         @default(1.0)
  link_type       String
  target_url      String?
  tooltip_content String?
  is_approved     Boolean       @default(false)
  is_active       Boolean       @default(true)
  auto_generated  Boolean       @default(true)
  clicks          Int           @default(0)
  impressions     Int           @default(0)
  last_clicked    DateTime?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  entity          SmartEntities @relation(fields: [entity_id], references: [id])

  @@index([article_id])
  @@index([entity_id])
  @@index([is_approved])
  @@map("smart_article_links")
}

model SmartTerms {
  id            String   @id @default(cuid())
  term_ar       String?
  term_en       String?
  definition    String
  detailed_def  String?
  example       String?
  category      String?
  difficulty    String   @default("medium")
  synonyms      Json?
  reference_url String?
  wikipedia_url String?
  usage_count   Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([category])
  @@index([usage_count])
  @@map("smart_terms")
}

model LinkAnalytics {
  id           String   @id @default(cuid())
  link_id      String?
  article_id   String
  entity_id    String?
  event_type   String
  user_agent   String?
  ip_hash      String?
  session_id   String?
  referrer     String?
  time_on_page Int?
  scroll_depth Float?
  device_type  String?
  browser_type String?
  timestamp    DateTime @default(now())

  @@index([article_id])
  @@index([entity_id])
  @@index([event_type])
  @@index([timestamp])
  @@map("link_analytics")
}

model MuqtarabCorner {
  id          String              @id @default(cuid())
  name        String
  slug        String              @unique
  author_name String
  author_bio  String?
  cover_image String?
  description String?
  category_id String?
  ai_enabled  Boolean             @default(true)
  is_active   Boolean             @default(true)
  is_featured Boolean             @default(false)
  created_by  String?
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  theme_color String?             @default("#3B82F6") @db.VarChar(7)
  analytics   MuqtarabAnalytics[]
  articles    MuqtarabArticle[]
  category    categories?         @relation(fields: [category_id], references: [id])
  creator     users?              @relation(fields: [created_by], references: [id])
  followers   MuqtarabFollower[]

  @@index([slug])
  @@index([is_active])
  @@index([created_by])
  @@index([category_id])
  @@map("muqtarab_corners")
}

model MuqtarabArticle {
  id                     String                @id @default(cuid())
  corner_id              String
  title                  String
  slug                   String                @unique
  content                String
  excerpt                String?
  cover_image            String?
  author_name            String?
  author_bio             String?
  author_avatar          String?
  tags                   String[]
  is_featured            Boolean               @default(false)
  read_time              Int?
  publish_at             DateTime?
  status                 String                @default("draft")
  ai_sentiment           String?
  ai_compatibility_score Int?                  @default(0)
  ai_summary             String?
  ai_keywords            String[]
  ai_mood                String?
  view_count             Int                   @default(0)
  like_count             Int                   @default(0)
  share_count            Int                   @default(0)
  comment_count          Int                   @default(0)
  created_by             String?
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  analytics              MuqtarabAnalytics[]
  corner                 MuqtarabCorner        @relation(fields: [corner_id], references: [id], onDelete: Cascade)
  creator                users?                @relation(fields: [created_by], references: [id])
  comments               MuqtarabComment[]
  interactions           MuqtarabInteraction[]
  media_assets           MediaAsset[]          @relation("MuqtarabArticleAssets")

  @@index([corner_id])
  @@index([slug])
  @@index([status])
  @@index([publish_at])
  @@index([is_featured])
  @@index([ai_sentiment])
  @@index([created_by])
  @@index([created_at])
  @@index([slug], map: "idx_muqtarab_articles_slug")
  @@map("muqtarab_articles")
}

model MuqtarabInteraction {
  id               String          @id @default(cuid())
  article_id       String
  user_id          String?
  interaction_type String
  metadata         Json?
  session_id       String?
  ip_hash          String?
  created_at       DateTime        @default(now())
  article          MuqtarabArticle @relation(fields: [article_id], references: [id], onDelete: Cascade)
  user             users?          @relation(fields: [user_id], references: [id])

  @@unique([article_id, user_id, interaction_type])
  @@index([article_id])
  @@index([user_id])
  @@index([interaction_type])
  @@index([session_id])
  @@map("muqtarab_interactions")
}

model MuqtarabAnalytics {
  id                String           @id @default(cuid())
  article_id        String?
  corner_id         String?
  user_id           String?
  session_id        String?
  ip_hash           String?
  view_duration     Int?
  scroll_depth      Float?
  completion_rate   Float?
  referrer_source   String?
  referrer_url      String?
  utm_source        String?
  utm_medium        String?
  utm_campaign      String?
  device_type       String?
  browser_type      String?
  operating_system  String?
  screen_resolution String?
  country_code      String?
  city              String?
  bounce_rate       Boolean          @default(false)
  return_visitor    Boolean          @default(false)
  visit_hour        Int?
  visit_day         Int?
  created_at        DateTime         @default(now())
  article           MuqtarabArticle? @relation(fields: [article_id], references: [id], onDelete: Cascade)
  corner            MuqtarabCorner?  @relation(fields: [corner_id], references: [id], onDelete: Cascade)
  user              users?           @relation(fields: [user_id], references: [id])

  @@index([article_id])
  @@index([corner_id])
  @@index([user_id])
  @@index([session_id])
  @@index([referrer_source])
  @@index([device_type])
  @@index([created_at])
  @@map("muqtarab_analytics")
}

model MuqtarabFollower {
  id                    String         @id @default(cuid())
  corner_id             String
  user_id               String
  notifications_enabled Boolean        @default(true)
  email_notifications   Boolean        @default(false)
  created_at            DateTime       @default(now())
  corner                MuqtarabCorner @relation(fields: [corner_id], references: [id], onDelete: Cascade)
  user                  users          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([corner_id, user_id])
  @@index([corner_id])
  @@index([user_id])
  @@map("muqtarab_followers")
}

model MuqtarabComment {
  id          String            @id @default(cuid())
  article_id  String
  user_id     String?
  guest_name  String?
  guest_email String?
  content     String
  is_approved Boolean           @default(false)
  is_hidden   Boolean           @default(false)
  parent_id   String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  article     MuqtarabArticle   @relation(fields: [article_id], references: [id], onDelete: Cascade)
  parent      MuqtarabComment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies     MuqtarabComment[] @relation("CommentReplies")
  user        users?            @relation(fields: [user_id], references: [id])

  @@index([article_id])
  @@index([user_id])
  @@index([is_approved])
  @@index([created_at])
  @@map("muqtarab_comments")
}

/// Smart Story Tracking - Core Models
model Story {
  id              String              @id @default(cuid())
  title           String
  description     String?
  category        String?
  status          String              @default("active")
  importanceLevel Int                 @default(5)
  tags            String[]
  metadata        Json?
  created_at      DateTime            @default(now())
  updated_at      DateTime            @updatedAt
  events          Event[]
  predictions     Prediction[]
  storyEntities   StoryEntity[]
  subscriptions   StorySubscription[]

  @@index([category])
  @@index([status])
  @@index([created_at])
}

model Event {
  id              String   @id @default(cuid())
  story_id        String
  title           String
  content         String
  source          String?
  event_date      DateTime
  importanceScore Decimal  @default(5.0)
  sentimentScore  Decimal?
  metadata        Json?
  created_at      DateTime @default(now())
  story           Story    @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@index([story_id])
  @@index([event_date])
}

model Entity {
  id          String        @id @default(cuid())
  name        String
  type        String?
  description String?
  metadata    Json?
  created_at  DateTime      @default(now())
  stories     StoryEntity[]
}

model StoryEntity {
  id             String   @id @default(cuid())
  story_id       String
  entity_id      String
  role           String?
  relevanceScore Decimal  @default(5.0)
  created_at     DateTime @default(now())
  entity         Entity   @relation(fields: [entity_id], references: [id], onDelete: Cascade)
  story          Story    @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@index([story_id])
  @@index([entity_id])
}

model StorySubscription {
  id                String   @id @default(cuid())
  user_id           String
  story_id          String
  notificationLevel String   @default("medium")
  is_active         Boolean  @default(true)
  created_at        DateTime @default(now())
  story             Story    @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([story_id])
}

model Prediction {
  id               String   @id @default(cuid())
  story_id         String
  prediction_text  String
  confidence_score Decimal?
  prediction_date  DateTime @default(now())
  actual_outcome   String?
  is_verified      Boolean  @default(false)
  created_at       DateTime @default(now())
  story            Story    @relation(fields: [story_id], references: [id], onDelete: Cascade)

  @@index([story_id])
}

/// إعدادات واجهة عامة (Global UI Settings)
model UiSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  updatedById String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  updatedBy   users?   @relation(fields: [updatedById], references: [id])

  @@map("ui_settings")
}

model MediaFolder {
  id          String        @id @default(cuid())
  name        String
  slug        String
  parentId    String?
  path        String
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assets      MediaAsset[]
  createdBy   users         @relation(fields: [createdById], references: [id])
  parent      MediaFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders  MediaFolder[] @relation("FolderHierarchy")

  @@unique([parentId, slug])
  @@index([path])
  @@index([createdById])
  @@map("media_folders")
}

model MediaAsset {
  id                String              @id @default(cuid())
  filename          String
  originalName      String
  mimeType          String
  size              Int
  width             Int?
  height            Int?
  duration          Int?
  cloudinaryId      String              @unique
  cloudinaryUrl     String
  thumbnailUrl      String?
  type              MediaType
  metadata          Json?
  folderId          String?
  uploadedById      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  NewsArticleAssets NewsArticleAssets[]
  folder            MediaFolder?        @relation(fields: [folderId], references: [id])
  uploadedBy        users               @relation(fields: [uploadedById], references: [id])
  muqtarabArticles  MuqtarabArticle[]   @relation("MuqtarabArticleAssets")

  @@index([type, folderId])
  @@index([uploadedById])
  @@index([createdAt])
  @@map("media_assets")
}

model article_authors {
  id               String             @id
  full_name        String             @db.VarChar(255)
  slug             String             @unique @db.VarChar(255)
  title            String?            @db.VarChar(200)
  bio              String?
  email            String?            @db.VarChar(255)
  avatar_url       String?
  social_links     Json?              @default("{}")
  is_active        Boolean            @default(true)
  role             String             @default("writer") @db.VarChar(50)
  specializations  String[]
  total_articles   Int                @default(0)
  total_views      Int                @default(0)
  total_likes      Int                @default(0)
  total_shares     Int                @default(0)
  ai_score         Float              @default(0.0)
  last_article_at  DateTime?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  articles         articles[]
  author_analytics author_analytics[]

  @@index([slug])
  @@index([is_active])
}

model article_quotes {
  id            String   @id
  article_id    String
  quote_text    String
  quote_order   Int      @default(0)
  ai_confidence Float    @default(0.0)
  is_featured   Boolean  @default(false)
  created_at    DateTime @default(now())
  article       articles @relation(fields: [article_id], references: [id], onDelete: Cascade)

  @@index([article_id])
}

model author_analytics {
  id                 String          @id
  author_id          String
  date               DateTime        @db.Date
  articles_published Int             @default(0)
  total_views        Int             @default(0)
  total_likes        Int             @default(0)
  total_shares       Int             @default(0)
  engagement_rate    Float           @default(0.0)
  reading_time_avg   Float           @default(0.0)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  author             article_authors @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@unique([author_id, date])
  @@index([author_id, date])
}

model smart_dose_feedback {
  id              String       @id @default(cuid())
  user_id         String
  dose_id         String
  reaction        DoseReaction @default(NEUTRAL)
  shared          Boolean      @default(false)
  saved           Boolean      @default(false)
  time_spent      Int?
  read_percentage Float?
  comment         String?
  platform        String?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  dose            daily_doses  @relation(fields: [dose_id], references: [id], onDelete: Cascade)
  user            users        @relation("DoseFeedbackUser", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, dose_id])
  @@index([dose_id, reaction])
  @@index([user_id, created_at])
}

model smart_dose_templates {
  id            String             @id @default(cuid())
  period        daily_doses_period
  template_name String
  main_text     String
  sub_text      String
  usage_count   Int                @default(0)
  is_active     Boolean            @default(true)
  priority      Int                @default(1)
  created_by    String
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  creator       users              @relation("DoseTemplateCreator", fields: [created_by], references: [id])

  @@index([period, is_active])
  @@index([priority, period])
}

model user_interests {
  id          Int        @id @default(autoincrement())
  user_id     String     @db.VarChar(255)
  category_id String     @db.VarChar(255)
  is_active   Boolean?   @default(true)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  updated_at  DateTime?  @default(now()) @updatedAt @db.Timestamp(6)
  category    categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, category_id])
  @@index([category_id], map: "idx_user_interests_category_id")
  @@index([is_active], map: "idx_user_interests_is_active")
  @@index([user_id], map: "idx_user_interests_user_id")
}

model LoyaltySettings {
  id           String   @id
  action_type  String   @unique
  points_value Int
  daily_limit  Int?
  description  String?
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime
}

model LoyaltyTransactions {
  id               String   @id
  user_id          String
  points           Int
  transaction_type String
  reason           String?
  reference_type   String?
  reference_id     String?
  balance_after    Int
  metadata         Json?
  created_at       DateTime @default(now())
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([created_at])
  @@index([transaction_type])
  @@index([user_id])
}

model MembershipLevels {
  id            String   @id
  level_name    String   @unique
  level_name_ar String
  min_points    Int
  benefits      Json?
  badge_icon    String?
  color         String?
  created_at    DateTime @default(now())
}

model UserBadges {
  id          String   @id
  user_id     String
  badge_type  String
  badge_level Int      @default(1)
  earned_at   DateTime @default(now())
  progress    Json?
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_type])
  @@index([badge_type])
  @@index([user_id])
}

model UserDailyActivities {
  id                 String   @id
  user_id            String
  activity_date      DateTime @db.Date
  articles_read      Int      @default(0)
  time_spent_minutes Int      @default(0)
  interactions_count Int      @default(0)
  points_earned      Int      @default(0)
  streak_count       Int      @default(0)
  achievements       Json?
  users              users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, activity_date])
  @@index([activity_date])
  @@index([user_id])
}

model UserDetailedPreferences {
  id               String   @id
  user_id          String
  preference_type  String
  preference_value Json
  confidence_score Float    @default(1.0)
  last_updated     DateTime @default(now())
  users            users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, preference_type])
  @@index([preference_type])
  @@index([user_id])
}

model UserInteractions {
  id                String   @id
  user_id           String
  article_id        String?
  interaction_type  String
  interaction_value Json?
  points_earned     Int      @default(0)
  session_id        String?
  device_type       String?
  ip_address        String?
  user_agent        String?
  created_at        DateTime @default(now())
  users             users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([article_id])
  @@index([created_at])
  @@index([interaction_type])
  @@index([user_id])
}

model UserSessions {
  id               String    @id
  user_id          String
  session_token    String
  ip_address       String?
  user_agent       String?
  device_type      String?
  location         Json?
  started_at       DateTime  @default(now())
  last_activity_at DateTime  @default(now())
  ended_at         DateTime?
  is_active        Boolean   @default(true)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([is_active])
  @@index([session_token])
  @@index([user_id])
}

model ads {
  id           String         @id @default(cuid())
  title        String?        @db.VarChar(255)
  image_url    String
  target_url   String
  placement    ads_placement
  start_date   DateTime
  end_date     DateTime
  views_count  Int            @default(0)
  clicks_count Int            @default(0)
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  created_by   String?
  metadata     Json?
  is_always_on Boolean        @default(false)
  max_views    Int?
  analytics    ad_analytics[]
  creator      users?         @relation("AdCreator", fields: [created_by], references: [id])

  @@index([placement, is_active])
  @@index([start_date, end_date])
  @@index([created_by])
}

model ad_analytics {
  id           String   @id @default(cuid())
  ad_id        String
  event_type   String
  user_id      String?
  session_id   String?
  ip_hash      String?
  user_agent   String?
  referrer     String?
  device_type  String?
  browser_type String?
  country_code String?
  created_at   DateTime @default(now())
  ad           ads      @relation(fields: [ad_id], references: [id], onDelete: Cascade)

  @@index([ad_id, event_type])
  @@index([created_at])
}

model tags {
  id                   String          @id @default(cuid())
  name                 String          @unique
  slug                 String          @unique
  description          String?
  color                String          @default("#3B82F6")
  category             String?
  priority             Int             @default(5)
  is_active            Boolean         @default(true)
  synonyms             String[]        @default([])
  seo_meta_description String?
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt
  clicks_count         Int             @default(0)
  growth_rate          Float           @default(0.0)
  last_used_at         DateTime?
  popularity_score     Float           @default(0.0)
  total_usage_count    Int             @default(0)
  views_count          Int             @default(0)
  article_tags         article_tags[]
  tag_analytics        tag_analytics[]

  @@index([name])
  @@index([slug])
  @@index([category])
  @@index([is_active])
  @@index([priority])
  @@index([popularity_score])
  @@index([total_usage_count])
  @@index([last_used_at])
  @@map("tags")
}

model article_tags {
  id         String   @id @default(cuid())
  article_id String
  tag_id     String
  articles   articles @relation(fields: [article_id], references: [id], onDelete: Cascade)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([article_id, tag_id])
  @@index([article_id])
  @@index([tag_id])
  @@map("article_tags")
}

model tag_analytics {
  id               String   @id @default(cuid())
  tag_id           String
  date             DateTime @db.Date
  usage_count      Int      @default(0)
  article_count    Int      @default(0)
  views_count      Int      @default(0)
  clicks_count     Int      @default(0)
  interactions     Int      @default(0)
  growth_factor    Float    @default(0.0)
  popularity_score Float    @default(0.0)
  created_at       DateTime @default(now())
  tags             tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([tag_id, date])
  @@index([tag_id])
  @@index([date])
  @@index([popularity_score])
  @@map("tag_analytics")
}

model NewsArticleAssets {
  A            String
  B            String
  media_assets MediaAsset @relation(fields: [A], references: [id], onDelete: Cascade)
  articles     articles   @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_NewsArticleAssets_AB_pkey")
  @@index([B], map: "_NewsArticleAssets_B_index")
  @@map("_NewsArticleAssets")
}

model failed_login_attempts {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  email        String
  attempts     Int      @default(1)
  ip_address   String?
  last_attempt DateTime @default(now())
  created_at   DateTime @default(now())

  @@index([email])
  @@index([created_at])
}

model account_lockouts {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  email        String    @unique
  locked_until DateTime
  reason       String?
  created_at   DateTime  @default(now())
  updated_at   DateTime?

  @@index([locked_until])
}

model two_factor_auth {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  user_id      String    @unique
  secret       String
  backup_codes Json
  is_enabled   Boolean   @default(true)
  verified_at  DateTime?
  last_used_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime?
  user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model two_factor_temp {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  user_id      String   @unique
  secret       String
  backup_codes Json
  created_at   DateTime @default(now())
}

/// نماذج الإعلان الإداري
model AdminAnnouncement {
  id            String                   @id @default(cuid())
  title         String                   @db.VarChar(500)
  bodyMd        String
  type          AnnouncementType         @default(ANNOUNCEMENT)
  priority      AnnouncementPriority     @default(NORMAL)
  status        AnnouncementStatus       @default(DRAFT)
  isPinned      Boolean                  @default(false)
  startAt       DateTime?
  endAt         DateTime?
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  authorId      String
  audienceRoles String[]                 @default([])
  audienceUsers String[]                 @default([])
  audienceTeams String[]                 @default([])
  author        users                    @relation("AnnouncementAuthor", fields: [authorId], references: [id])
  attachments   AnnouncementAttachment[]

  @@index([status, startAt, endAt], map: "idx_announcement_status_dates")
  @@index([priority, isPinned], map: "idx_announcement_priority_pinned")
  @@index([type], map: "idx_announcement_type")
  @@index([authorId], map: "idx_announcement_author")
  @@map("admin_announcements")
}

/// مرفقات الإعلانات (صور، ملفات، روابط)
model AnnouncementAttachment {
  id             String            @id @default(cuid())
  announcementId String
  url            String            @db.VarChar(1000)
  kind           AttachmentKind    @default(IMAGE)
  alt            String?
  meta           Json?
  announcement   AdminAnnouncement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([announcementId], map: "idx_attachment_announcement")
  @@map("announcement_attachments")
}

/// أنواع الإعلانات
enum AnnouncementType {
  ANNOUNCEMENT
  CRITICAL
  GUIDELINE
  ASSET_APPROVED
  MAINTENANCE
  FEATURE
  POLICY
}

/// مستويات الأولوية
enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

/// حالات الإعلان
enum AnnouncementStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  EXPIRED
  ARCHIVED
}

/// أنواع المرفقات
enum AttachmentKind {
  IMAGE
  VIDEO
  FILE
  LINK
}

enum EmailJob_status {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum EmailLog_status {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

enum EmailProviderConfig_type {
  SMTP
  SENDGRID
  MAILGUN
  SES
}

enum Subscriber_status {
  ACTIVE
  INACTIVE
  UNSUBSCRIBED
  BOUNCED
}

enum ContentType {
  NEWS
  OPINION
  ARTICLE
  BLOG
}

enum daily_doses_period {
  morning
  afternoon
  evening
  night
}

enum daily_doses_status {
  draft
  published
  archived
}

enum dose_contents_contentType {
  text
  image
  video
  link
  article
}

enum forum_follows_target_type {
  topic
  user
  category
}

enum forum_replies_status {
  active
  deleted
  hidden
  pending
}

enum forum_reports_target_type {
  topic
  reply
  user
}

enum forum_reports_status {
  pending
  reviewed
  resolved
  dismissed
}

enum forum_topics_status {
  active
  locked
  deleted
  hidden
}

enum forum_votes_target_type {
  topic
  reply
}

enum forum_votes_vote_type {
  up
  down
}

enum interactions_type {
  like
  dislike
  share
  bookmark
  view
}

enum OpinionArticle_status {
  draft
  published
  archived
  rejected
}

enum MLModelType {
  classification
  regression
  clustering
  recommendation
}

enum MLModelStatus {
  training
  ready
  failed
  deprecated
}

enum TrainingStatus {
  queued
  running
  completed
  failed
  cancelled
}

enum SentimentLabel {
  positive
  negative
  neutral
}

enum NotificationType {
  info
  warning
  error
  success
  system
  article_recommendation
  new_article
  new_comment
  daily_digest
  author_follow
  article_published
  article_breaking
  article_featured
  comments_spike
  reads_top
  user_reply
  system_announcement
}

enum NotificationPriority {
  low
  medium
  high
  critical
}

enum NotificationStatus {
  pending
  sent
  read
  dismissed
}

enum RecommendationType {
  content
  user
  category
  trending
}

enum ImportStatus {
  pending
  processing
  completed
  failed
  cancelled
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

enum DoseReaction {
  LOVE
  LIKE
  NEUTRAL
  DISLIKE
  REPORT
}

enum ads_placement {
  HEADER
  SIDEBAR
  FOOTER
  INLINE
  POPUP
  BANNER
}



// ========================================
// Smart Links System
// ========================================

model SmartEntity {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  type         SmartEntityType
  aliases      String[] // مرادفات
  description  String?  @db.Text
  canonicalUrl String?  // internal page or article id
  sourceCount  Int      @default(0)
  importance   Float    @default(1.0)
  metadata     Json?    // بيانات إضافية (صورة، روابط خارجية، إلخ)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  isSensitive  Boolean  @default(false) // للكيانات الحساسة
  
  mentions     SmartEntityMention[]
  
  @@index([type])
  @@index([slug])
  @@index([isActive])
  @@index([sourceCount])
}

model SmartEntityMention {
  id          String   @id @default(cuid())
  articleId   String
  entityId    String
  text        String   // النص الفعلي في المقال
  normalized  String   // النص المعياري
  position    Int      // موقع البداية في المحتوى
  endPosition Int      // موقع النهاية
  context     String?  @db.Text // السياق المحيط (50 حرف قبل وبعد)
  confidence  Float    // 0.0-1.0
  linkType    SmartLinkType @default(INTERNAL)
  linkUrl     String?  // الرابط المُدرج
  status      SmartLinkStatus @default(SUGGESTED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?  // user_id
  approvedBy  String?  // user_id
  approvedAt  DateTime?
  
  entity      SmartEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  article     articles    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([articleId])
  @@index([entityId])
  @@index([status])
  @@index([confidence])
}

model SmartLinkAnalysis {
  id          String   @id @default(cuid())
  articleId   String   @unique
  content     String   @db.Text
  rawResponse Json?    // الاستجابة الخام من OpenAI
  entityCount Int      @default(0)
  suggestedCount Int   @default(0)
  acceptedCount Int    @default(0)
  rejectedCount Int    @default(0)
  cost        Float?   // تكلفة API
  processingTime Int?  // بالميلي ثانية
  status      AnalysisStatus @default(PENDING)
  error       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  article     articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@index([status])
  @@index([createdAt])
}

model SmartLinkSettings {
  id                    String   @id @default(cuid())
  enableAutoLinks       Boolean  @default(true)
  confidenceThreshold   Float    @default(0.7)
  autoInsertThreshold   Float    @default(0.9)
  maxLinksPerParagraph  Int      @default(1)
  maxLinksPerArticle    Int      @default(20)
  stopTerms             String[] // مصطلحات ممنوعة
  enableAutoPageCreation Boolean @default(false)
  autoPageThreshold     Int      @default(3) // عدد المرات لإنشاء صفحة تلقائياً
  enableSensitiveCheck  Boolean  @default(true)
  updatedAt             DateTime @updatedAt
  updatedBy             String?  // user_id
}

model SmartLinkActivityLog {
  id          String   @id @default(cuid())
  articleId   String?
  entityId    String?
  mentionId   String?
  action      SmartLinkAction
  userId      String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([action])
  @@index([userId])
  @@index([createdAt])
  @@index([articleId])
}

// ========================================
// Enums for Smart Links
// ========================================

enum SmartEntityType {
  PERSON
  ORGANIZATION
  PLACE
  EVENT
  TERM
  TOPIC
  OTHER
}

enum SmartLinkType {
  INTERNAL
  ENTITY_PAGE
  TAG
  CATEGORY
  EXTERNAL
}

enum SmartLinkStatus {
  SUGGESTED
  ACCEPTED
  REJECTED
  AUTO_INSERTED
  REMOVED
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SmartLinkAction {
  ANALYZE
  SUGGEST
  ACCEPT
  REJECT
  INSERT
  REMOVE
  CREATE_ENTITY
  UPDATE_ENTITY
  DELETE_ENTITY
  CREATE_PAGE
}



// ========================================
// نظام الإشعارات الذكية (Smart Notifications)
// ========================================

/// الإشعارات الذكية للمستخدمين
model Notification {
  id          String             @id @default(cuid())
  userId      String
  type        NotificationType
  title       String             @db.VarChar(200)
  body        String             @db.VarChar(400)
  link        String             @db.VarChar(300)
  icon        String             @db.VarChar(40)  // bell/flash/star/message-circle/flame/reply
  color       String             @db.VarChar(24)  // red/amber/violet/sky/slate/emerald/orange
  priority    NotificationPriority
  metadata    Json?              @default("{}")
  isRead      Boolean            @default(false)
  createdAt   DateTime           @default(now())
  
  user        users              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type])
  @@index([priority])
}

/// تفضيلات الإشعارات للمستخدم
model UserNotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // تمكين حسب النوع
  articlePublished  Boolean  @default(true)
  articleBreaking   Boolean  @default(true)
  articleFeatured   Boolean  @default(true)
  commentsSpike     Boolean  @default(true)
  readsTop          Boolean  @default(true)
  userReply         Boolean  @default(true)
  
  // حد أقصى/ساعة لتجنب الإزعاج
  throttlePerHour   Int      @default(8)
  
  // إعدادات إضافية
  enableToast       Boolean  @default(true)
  enableSound       Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

/// سجل إرسال الإشعارات (للتحكم في التكرار)
model NotificationDedup {
  id          String   @id @default(cuid())
}

/// أنواع الإشعارات

/// أولويات الإشعارات
