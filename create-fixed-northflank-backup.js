#!/usr/bin/env node

const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

// ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ Supabase
const SUPABASE_DATABASE_URL = 'postgresql://postgres:AVNS_Br4uKMaWR6wxTIpZ7xj@db.uopckyrdhlvsxnvcobbw.supabase.co:5432/postgres';

async function createFixedNorthflankBackup() {
  console.log('๐ง ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูุญุณูุฉ ูุฅุตูุงุญ ูุดููุฉ Northflank');
  console.log('='.repeat(65));
  console.log(`๐ ุงูุชุงุฑูุฎ: ${new Date().toLocaleString('ar-SA')}`);
  console.log('๐ฏ ุงููุฏู: ุฅุตูุงุญ ูุดููุฉ "relation users does not exist"');
  
  const client = new Client({
    connectionString: SUPABASE_DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 30000
  });

  try {
    console.log('\nโณ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุตุฏุฑ...');
    await client.connect();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ');
    
    const backupDir = path.join(__dirname, 'northflank-backup');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').substring(0, 19);
    const sqlFile = path.join(backupDir, `sabq-fixed-${timestamp}.sql`);
    
    // ุฅูุดุงุก Schema ูุงูู
    let backupContent = `-- SABQ CMS - FIXED BACKUP FOR NORTHFLANK
-- Created: ${new Date().toISOString()}
-- Purpose: Fix "relation does not exist" errors
-- Method: Full schema recreation with data

-- Clean slate approach
DROP SCHEMA IF EXISTS public CASCADE;
CREATE SCHEMA public;
GRANT ALL ON SCHEMA public TO public;
GRANT ALL ON SCHEMA public TO postgres;

-- Essential extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Set connection parameters
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET row_security = off;

-- Start transaction
BEGIN;

-- Create tables with complete schema
`;

    // ุฅูุดุงุก ุฌุฏุงูู ุฃุณุงุณูุฉ ูุน Schema ูุงูู
    console.log('\n๐ ุฅูุดุงุก Schema ุงูุฃุณุงุณู...');
    
    const basicTables = {
      users: `CREATE TABLE "users" (
        id text PRIMARY KEY DEFAULT gen_random_uuid()::text,
        name text,
        email text UNIQUE,
        password text,
        image text,
        "emailVerified" timestamp(3),
        "createdAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        role text DEFAULT 'USER',
        bio text,
        location text,
        website text,
        "isActive" boolean DEFAULT true,
        "lastLoginAt" timestamp(3),
        preferences jsonb DEFAULT '{}'
      );`,
      
      categories: `CREATE TABLE "categories" (
        id serial PRIMARY KEY,
        name text NOT NULL,
        slug text UNIQUE NOT NULL,
        description text,
        color text DEFAULT '#3B82F6',
        icon text,
        "isActive" boolean DEFAULT true,
        "createdAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "parentId" integer REFERENCES categories(id)
      );`,
      
      articles: `CREATE TABLE "articles" (
        id serial PRIMARY KEY,
        title text NOT NULL,
        content text,
        excerpt text,
        slug text UNIQUE NOT NULL,
        "featuredImage" text,
        "publishedAt" timestamp(3),
        "createdAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "authorId" text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        "categoryId" integer REFERENCES categories(id),
        status text DEFAULT 'DRAFT',
        "viewCount" integer DEFAULT 0,
        "likeCount" integer DEFAULT 0,
        "commentCount" integer DEFAULT 0,
        metadata jsonb DEFAULT '{}',
        "isActive" boolean DEFAULT true,
        "isFeatured" boolean DEFAULT false
      );`
    };
    
    // ุฅุถุงูุฉ Schema ููุฌุฏุงูู ุงูุฃุณุงุณูุฉ
    for (const [tableName, schema] of Object.entries(basicTables)) {
      backupContent += `\n-- Table: ${tableName}\n${schema}\n`;
    }
    
    // ุฌูุน ุงูุจูุงูุงุช ุงููุนููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('\n๐ ุฌูุน ุงูุจูุงูุงุช ูู ุงูุฌุฏุงูู...');
    
    const tablesList = ['users', 'categories', 'articles', 'comments', 'interactions'];
    let totalRecords = 0;
    
    for (const tableName of tablesList) {
      try {
        const dataResult = await client.query(`SELECT * FROM "${tableName}" ORDER BY id LIMIT 500`);
        
        if (dataResult.rows.length > 0) {
          console.log(`   ๐ฆ ${tableName}: ${dataResult.rows.length} ุณุฌู`);
          totalRecords += dataResult.rows.length;
          
          const columns = Object.keys(dataResult.rows[0]);
          backupContent += `\n-- Data for ${tableName}\n`;
          
          for (const row of dataResult.rows) {
            const values = columns.map(col => {
              const value = row[col];
              if (value === null) return 'NULL';
              if (typeof value === 'string') {
                return `'${value.replace(/'/g, "''").replace(/\\/g, "\\\\")}'`;
              }
              if (typeof value === 'boolean') return value ? 'true' : 'false';
              if (value instanceof Date) return `'${value.toISOString()}'`;
              if (typeof value === 'object') {
                return `'${JSON.stringify(value).replace(/'/g, "''")}'::jsonb`;
              }
              if (typeof value === 'number') return value.toString();
              return `'${value}'`;
            });
            
            backupContent += `INSERT INTO "${tableName}" (${columns.map(c => `"${c}"`).join(', ')}) VALUES (${values.join(', ')}) ON CONFLICT DO NOTHING;\n`;
          }
        } else {
          console.log(`   โช ${tableName}: ูุงุฑุบ`);
        }
        
      } catch (error) {
        console.log(`   โ ${tableName}: ${error.message}`);
        
        // ุฅูุดุงุก Schema ุจุฏูู ููุฌุฏุงูู ุงูููููุฏุฉ
        if (tableName === 'comments') {
          backupContent += `
-- Table: comments (fallback schema)
CREATE TABLE "comments" (
  id serial PRIMARY KEY,
  content text NOT NULL,
  "createdAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updatedAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "authorId" text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  "articleId" integer NOT NULL REFERENCES articles(id) ON DELETE CASCADE,
  "parentId" integer REFERENCES comments(id),
  "isActive" boolean DEFAULT true,
  "likeCount" integer DEFAULT 0
);
`;
        }
        
        if (tableName === 'interactions') {
          backupContent += `
-- Table: interactions (fallback schema)
CREATE TABLE "interactions" (
  id serial PRIMARY KEY,
  type text NOT NULL,
  "userId" text NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  "articleId" integer REFERENCES articles(id) ON DELETE CASCADE,
  "createdAt" timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  metadata jsonb DEFAULT '{}'
);
`;
        }
      }
    }
    
    // ุฅุถุงูุฉ Indexes ูููุฉ
    backupContent += `
-- Essential indexes
CREATE INDEX IF NOT EXISTS idx_articles_author ON articles("authorId");
CREATE INDEX IF NOT EXISTS idx_articles_category ON articles("categoryId");
CREATE INDEX IF NOT EXISTS idx_articles_published ON articles("publishedAt");
CREATE INDEX IF NOT EXISTS idx_articles_slug ON articles(slug);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_categories_slug ON categories(slug);

-- Update sequences
SELECT setval('categories_id_seq', COALESCE((SELECT MAX(id) FROM categories), 1));
SELECT setval('articles_id_seq', COALESCE((SELECT MAX(id) FROM articles), 1));

COMMIT;

-- Verify installation
DO $$
BEGIN
  RAISE NOTICE 'Database setup completed successfully';
  RAISE NOTICE 'Tables created: users, categories, articles, comments, interactions';
  RAISE NOTICE 'Total records imported: ${totalRecords}';
END $$;
`;
    
    // ุญูุธ ุงูููู
    fs.writeFileSync(sqlFile, backupContent);
    const sizeMB = (fs.statSync(sqlFile).size / 1024 / 1024).toFixed(2);
    console.log(`\n๐พ ุชู ุฅูุดุงุก ุงูููู: ${sizeMB} MB`);
    
    // ุฅูุดุงุก ุฏููู ุงูุฅุตูุงุญ
    const guideFile = path.join(backupDir, 'NORTHFLANK_FIX_INSTRUCTIONS.md');
    const guide = `# ๐ง ุฅุตูุงุญ ูุดููุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู Northflank

## ๐จ ุงููุดููุฉ ุงููุญุฏุฏุฉ:
\`\`\`
ERROR: relation "users" does not exist
Process terminated with exit code 3
\`\`\`

## โ ุงูุญู:

### 1. ุงุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ:
- ุงุฐูุจ ุฅูู Northflank Dashboard
- Database > Settings > Delete Database
- ุฃูุฏ ุงูุญุฐู

### 2. ุฃูุดุฆ ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ:
- Create New Database
- Type: PostgreSQL
- Plan: ููุณ ุงูุฎุทุฉ ุงูุณุงุจูุฉ
- Name: sabq-database (ุฃู ุฃู ุงุณู)

### 3. ุงุณุชูุฑุฏ ุงูููู ุงููุญุณู:
- Database > Import
- Upload File: **${path.basename(sqlFile)}**
- Wait for completion (3-5 minutes)

### 4. ุชุญุฏูุซ Connection String:
ุงูุญุตูู ุนูู Connection String ุงูุฌุฏูุฏ ูุชุญุฏูุซ ูุชุบูุฑุงุช ุงูุจูุฆุฉ

## ๐ฏ ูุฒุงูุง ูุฐุง ุงูุญู:

- โ **Schema ูุงูู**: ุฌููุน ุงูุฌุฏุงูู ูุน ุงูุชุนุฑูู ุงูุตุญูุญ
- โ **ุจูุงูุงุช ูุญููุธุฉ**: ${totalRecords} ุณุฌู ูุณุชูุฑุฏ
- โ **Indexes ูุญุณูุฉ**: ูุฃุฏุงุก ุฃูุถู  
- โ **Extensions ููุนูุฉ**: UUID ูCrypto
- โ **Sequences ูุญุฏุซุฉ**: ุชุชุงุจุน ุงูุฃุฑูุงู ุตุญูุญ

## โก ุจุนุฏ ุงูุงุณุชูุฑุงุฏ:

1. **ุงุฎุชุจุฑ ุงูุงุชุตุงู:**
\`\`\`bash
node test-northflank-connection.js
\`\`\`

2. **ุญุฏุซ ูุชุบูุฑุงุช ุงูุชุทุจูู:**
\`\`\`
DATABASE_URL=postgresql://new-connection-string
DIRECT_URL=postgresql://new-connection-string  
\`\`\`

3. **ุงูุดุฑ ุงูุชุทุจูู:**
\`\`\`bash
git add .
git commit -m "Fix database connection"
git push
\`\`\`

## ๐ ุฎุทุฉ ุงูุจุฏูู:
ุฅุฐุง ุงุณุชูุฑุช ุงููุดููุฉุ ูููู ุงุณุชุฎุฏุงู pg_dump ูุจุงุดุฑุฉ ูู Supabase.

---
**๐ ูุณุงุนุฏุฉ:** ูู ุญุงูุฉ ูุฌูุฏ ูุดุงููุ ุฑุงุฌุน logs ุงูุชูุตูููุฉ ุฃุนูุงู.`;
    
    fs.writeFileSync(guideFile, guide);
    
    console.log(`\n๐ ุชู ุฅูุดุงุก ุงููุณุฎุฉ ุงููุญุณูุฉ ุจูุฌุงุญ!`);
    console.log(`๐ ุงูููู: ${path.basename(sqlFile)}`);
    console.log(`๐ ุงูุฏููู: ${path.basename(guideFile)}`);
    console.log(`๐ ุงูุจูุงูุงุช: ${totalRecords} ุณุฌู`);
    
    return { success: true, file: sqlFile, records: totalRecords };
    
  } catch (error) {
    console.log(`\nโ ุฎุทุฃ: ${error.message}`);
    return { success: false, error: error.message };
    
  } finally {
    await client.end();
  }
}

createFixedNorthflankBackup().then(result => {
  if (result.success) {
    console.log('\n๐ ุงูุฎุทูุงุช ุงูุชุงููุฉ:');
    console.log('1. ุงุฐูุจ ุฅูู Northflank Dashboard');
    console.log('2. ุงุญุฐู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ');  
    console.log('3. ุฃูุดุฆ ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ');
    console.log('4. ุงุณุชูุฑุฏ ุงูููู ุงูุฌุฏูุฏ');
    console.log('5. ุญุฏุซ Connection String');
  }
}).catch(console.error);
