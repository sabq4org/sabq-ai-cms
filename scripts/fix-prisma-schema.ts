#!/usr/bin/env tsx

import fs from 'fs'
import path from 'path'

async function fixPrismaSchema() {
  console.log('๐ง ุฅุตูุงุญ Prisma Schema ูู PostgreSQL...\n')
  
  const schemaPath = path.join(process.cwd(), 'prisma', 'schema.prisma')
  
  try {
    // ูุฑุงุกุฉ ุงูููู ุงูุญุงูู
    let schemaContent = fs.readFileSync(schemaPath, 'utf8')
    
    console.log('๐ ูุฑุงุกุฉ Prisma Schema...')
    
    // 1. ุฅุตูุงุญ ุฃููุงุน DateTime
    console.log('๐ ุฅุตูุงุญ ุฃููุงุน DateTime...')
    schemaContent = schemaContent.replace(/@db\.DateTime\(\d+\)/g, '')
    
    // 2. ุฅุตูุงุญ ุฃุณูุงุก ุงูููุงุฑุณ ุงูููุฑุฑุฉ
    console.log('๐ ุฅุตูุงุญ ุฃุณูุงุก ุงูููุงุฑุณ...')
    
    // ุฅูุดุงุก ุฃุณูุงุก ูุฑูุฏุฉ ููููุงุฑุณ
    const indexMap = new Map()
    let indexCounter = 1
    
    schemaContent = schemaContent.replace(
      /@@index\(\[([^\]]+)\], map: "([^"]+)"\)/g,
      (match, columns, mapName) => {
        if (indexMap.has(mapName)) {
          const newName = `${mapName}_${indexCounter++}`
          indexMap.set(mapName, newName)
          return `@@index([${columns}], map: "${newName}")`
        } else {
          indexMap.set(mapName, mapName)
          return match
        }
      }
    )
    
    // 3. ุฅุฒุงูุฉ map ูู ุงูููุงุฑุณ ุงูุชู ูุง ุชุญุชุงุฌูุง
    schemaContent = schemaContent.replace(/@@index\(\[([^\]]+)\], map: "([^"]+)"\)/g, '@@index([$1])')
    
    // 4. ุฅุตูุงุญ unique constraints
    schemaContent = schemaContent.replace(/@@unique\(\[([^\]]+)\], map: "([^"]+)"\)/g, '@@unique([$1])')
    
    // 5. ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ
    const backupPath = path.join(process.cwd(), 'prisma', 'schema-fixed-backup.prisma')
    fs.writeFileSync(backupPath, fs.readFileSync(schemaPath, 'utf8'), 'utf8')
    console.log(`๐ฆ ุชู ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ: ${backupPath}`)
    
    // 6. ุญูุธ ุงูุชุญุฏูุซุงุช
    fs.writeFileSync(schemaPath, schemaContent, 'utf8')
    console.log('๐พ ุชู ุญูุธ ุงูุชุญุฏูุซุงุช')
    
    console.log('\nโ ุชู ุฅุตูุงุญ Prisma Schema ุจูุฌุงุญ!')
    console.log('\n๐ ุงูุชุบููุฑุงุช ุงููุทุจูุฉ:')
    console.log('- ุฅุฒุงูุฉ @db.DateTime(0) ุบูุฑ ุงููุฏุนูู')
    console.log('- ุฅุตูุงุญ ุฃุณูุงุก ุงูููุงุฑุณ ุงูููุฑุฑุฉ')
    console.log('- ุฅุฒุงูุฉ map ูู ุงูููุงุฑุณ ูุงูู unique constraints')
    
    return true
    
  } catch (error) {
    console.error('โ ูุดู ูู ุฅุตูุงุญ Prisma Schema:', error)
    throw error
  }
}

// ุชุดุบูู ุงูุฅุตูุงุญ ุฅุฐุง ุชู ุชุดุบูู ุงูุณูุฑูุจุช ูุจุงุดุฑุฉ
if (require.main === module) {
  fixPrismaSchema()
    .then(() => {
      console.log('\n๐ ุชู ุฅุตูุงุญ Prisma Schema ุจูุฌุงุญ!')
      console.log('\n๐ ุงูุฎุทูุฉ ุงูุชุงููุฉ:')
      console.log('npx prisma generate')
      process.exit(0)
    })
    .catch(error => {
      console.error('โ ูุดู ูู ุฅุตูุงุญ Prisma Schema:', error)
      process.exit(1)
    })
}

export { fixPrismaSchema } 