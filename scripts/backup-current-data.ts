#!/usr/bin/env tsx

import { PrismaClient } from '../lib/generated/prisma'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

interface BackupData {
  timestamp: string
  summary: {
    users: number
    articles: number
    categories: number
    interactions: number
    activityLogs: number
    keywords: number
    loyaltyPoints: number
    userPreferences: number
    messages: number
    roles: number
    deepAnalyses: number
    teamMembers: number
    templates: number
    smartBlocks: number
    total: number
  }
  data: {
    users: any[]
    articles: any[]
    categories: any[]
    interactions: any[]
    activityLogs: any[]
    keywords: any[]
    loyaltyPoints: any[]
    userPreferences: any[]
    messages: any[]
    roles: any[]
    deepAnalyses: any[]
    teamMembers: any[]
    templates: any[]
    smartBlocks: any[]
    emailVerificationCodes: any[]
    passwordResetTokens: any[]
    homeBlocksConfig: any[]
  }
}

async function createBackup() {
  console.log('๐ฆ ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ุงูุจูุงูุงุช ุงูุญุงููุฉ...\n')
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-')
  const backupDir = path.join(process.cwd(), 'backups')
  const backupFile = path.join(backupDir, `backup-${timestamp}.json`)
  
  try {
    // ุฅูุดุงุก ูุฌูุฏ ุงููุณุฎ ุงูุงุญุชูุงุทูุฉ ุฅุฐุง ูู ููู ููุฌูุฏ
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true })
    }
    
    // ุฌูุน ุงูุจูุงูุงุช ูู ุฌููุน ุงูุฌุฏุงูู
    console.log('๐ ุฌูุน ุงูุจูุงูุงุช...')
    
    const [
      users,
      articles,
      categories,
      interactions,
      activityLogs,
      keywords,
      loyaltyPoints,
      userPreferences,
      messages,
      roles,
      deepAnalyses,
      teamMembers,
      templates,
      smartBlocks,
      emailVerificationCodes,
      passwordResetTokens,
      homeBlocksConfig
    ] = await Promise.all([
      prisma.users.findMany(),
      prisma.articles.findMany(),
      prisma.categories.findMany(),
      prisma.interactions.findMany(),
      prisma.activity_logs.findMany(),
      prisma.keywords.findMany(),
      prisma.loyalty_points.findMany(),
      prisma.user_preferences.findMany(),
      prisma.messages.findMany(),
      prisma.roles.findMany(),
      prisma.deep_analyses.findMany(),
      prisma.team_members.findMany(),
      prisma.templates.findMany(),
      prisma.smart_blocks.findMany(),
      prisma.email_verification_codes.findMany(),
      prisma.password_reset_tokens.findMany(),
      prisma.home_blocks_config.findMany()
    ])
    
    // ุฅูุดุงุก ููุฎุต ุงูุจูุงูุงุช
    const summary = {
      users: users.length,
      articles: articles.length,
      categories: categories.length,
      interactions: interactions.length,
      activityLogs: activityLogs.length,
      keywords: keywords.length,
      loyaltyPoints: loyaltyPoints.length,
      userPreferences: userPreferences.length,
      messages: messages.length,
      roles: roles.length,
      deepAnalyses: deepAnalyses.length,
      teamMembers: teamMembers.length,
      templates: templates.length,
      smartBlocks: smartBlocks.length,
      total: users.length + articles.length + categories.length + interactions.length + 
              activityLogs.length + keywords.length + loyaltyPoints.length + userPreferences.length +
              messages.length + roles.length + deepAnalyses.length + teamMembers.length +
              templates.length + smartBlocks.length
    }
    
    // ุฅูุดุงุก ูุงุฆู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
    const backupData: BackupData = {
      timestamp,
      summary,
      data: {
        users,
        articles,
        categories,
        interactions,
        activityLogs,
        keywords,
        loyaltyPoints,
        userPreferences,
        messages,
        roles,
        deepAnalyses,
        teamMembers,
        templates,
        smartBlocks,
        emailVerificationCodes,
        passwordResetTokens,
        homeBlocksConfig
      }
    }
    
    // ุญูุธ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
    console.log('๐พ ุญูุธ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ...')
    fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2), 'utf8')
    
    // ุฅูุดุงุก ููู ููุฎุต ุณุฑูุน
    const summaryFile = path.join(backupDir, `summary-${timestamp}.json`)
    fs.writeFileSync(summaryFile, JSON.stringify({ timestamp, summary }, null, 2), 'utf8')
    
    // ุนุฑุถ ููุฎุต ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
    console.log('\n๐ ููุฎุต ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:')
    console.log('========================')
    console.log(`๐ ุงูุชุงุฑูุฎ: ${new Date(timestamp).toLocaleString('ar-SA')}`)
    console.log(`๐ ุงูููู: ${backupFile}`)
    console.log(`๐ ุฅุฌูุงูู ุงูุณุฌูุงุช: ${summary.total}`)
    console.log('\n๐ ุชูุงุตูู ุงูุจูุงูุงุช:')
    console.log(`๐ฅ ุงููุณุชุฎุฏููู: ${summary.users}`)
    console.log(`๐ฐ ุงูููุงูุงุช: ${summary.articles}`)
    console.log(`๐ท๏ธ ุงูุชุตูููุงุช: ${summary.categories}`)
    console.log(`๐ฌ ุงูุชูุงุนูุงุช: ${summary.interactions}`)
    console.log(`๐ ุณุฌูุงุช ุงูุฃูุดุทุฉ: ${summary.activityLogs}`)
    console.log(`๐ ุงููููุงุช ุงูููุชุงุญูุฉ: ${summary.keywords}`)
    console.log(`โญ ููุงุท ุงูููุงุก: ${summary.loyaltyPoints}`)
    console.log(`โ๏ธ ุชูุถููุงุช ุงููุณุชุฎุฏููู: ${summary.userPreferences}`)
    console.log(`๐ ุงูุฑุณุงุฆู: ${summary.messages}`)
    console.log(`๐ ุงูุฃุฏูุงุฑ: ${summary.roles}`)
    console.log(`๐ ุงูุชุญูููุงุช ุงูุนูููุฉ: ${summary.deepAnalyses}`)
    console.log(`๐จโ๐ผ ุฃุนุถุงุก ุงููุฑูู: ${summary.teamMembers}`)
    console.log(`๐ ุงูููุงูุจ: ${summary.templates}`)
    console.log(`๐งฉ ุงููุชู ุงูุฐููุฉ: ${summary.smartBlocks}`)
    
    // ุนุฑุถ ุนููุงุช ูู ุงูุจูุงูุงุช
    console.log('\n๐ ุนููุงุช ูู ุงูุจูุงูุงุช:')
    console.log('=====================')
    
    if (users.length > 0) {
      console.log(`๐ค ุงููุณุชุฎุฏููู: ${users.slice(0, 3).map(u => u.name).join(', ')}${users.length > 3 ? '...' : ''}`)
    }
    
    if (articles.length > 0) {
      console.log(`๐ฐ ุงูููุงูุงุช: ${articles.slice(0, 3).map(a => a.title.substring(0, 30)).join(', ')}${articles.length > 3 ? '...' : ''}`)
    }
    
    if (categories.length > 0) {
      console.log(`๐ท๏ธ ุงูุชุตูููุงุช: ${categories.slice(0, 3).map(c => c.name).join(', ')}${categories.length > 3 ? '...' : ''}`)
    }
    
    // ุญุณุงุจ ุญุฌู ุงูููู
    const fileSize = fs.statSync(backupFile).size
    const fileSizeMB = (fileSize / 1024 / 1024).toFixed(2)
    
    console.log(`\n๐พ ุญุฌู ุงูููู: ${fileSizeMB} MB`)
    console.log(`โ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุฌุงูุฒุฉ: ${backupFile}`)
    
    // ุฅูุดุงุก ุฑุงุจุท ุณุฑูุน ููุงุณุชุนุงุฏุฉ
    const restoreScript = `npx tsx scripts/restore-from-backup.ts ${backupFile}`
    console.log(`\n๐ ูุงุณุชุนุงุฏุฉ ุงูุจูุงูุงุช: ${restoreScript}`)
    
    return backupFile
    
  } catch (error) {
    console.error('โ ูุดู ูู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// ุชุดุบูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุฅุฐุง ุชู ุชุดุบูู ุงูุณูุฑูุจุช ูุจุงุดุฑุฉ
if (require.main === module) {
  createBackup()
    .then(backupFile => {
      console.log(`\n๐ ุชู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ุจูุฌุงุญ: ${backupFile}`)
      process.exit(0)
    })
    .catch(error => {
      console.error('โ ูุดู ูู ุฅูุดุงุก ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:', error)
      process.exit(1)
    })
}

export { createBackup } 