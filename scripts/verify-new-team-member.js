const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyNewTeamMember() {
  console.log('๐ ุงูุชุญูู ูู ุงูุนุถู ุงูุฌุฏูุฏ ูู ุงููุฑูู...\n');
  
  try {
    // ุฌูุจ ุฃุญุฏุซ ุนุถู ููุถุงู
    const latestMember = await prisma.team_members.findFirst({
      orderBy: { created_at: 'desc' }
    });
    
    if (!latestMember) {
      console.log('โ ูุง ููุฌุฏ ุฃุนุถุงุก ูู ุงููุฑูู');
      return;
    }
    
    console.log('๐ค ุฃุญุฏุซ ุนุถู ููุถุงู:');
    console.log(`   ุงูุงุณู: ${latestMember.name}`);
    console.log(`   ุงูุจุฑูุฏ: ${latestMember.email}`);
    console.log(`   ุงูุฏูุฑ: ${latestMember.role}`);
    console.log(`   ุงูุญุงูุฉ: ${latestMember.is_active ? 'ูุดุท' : 'ุบูุฑ ูุดุท'}`);
    console.log(`   ุชุงุฑูุฎ ุงูุฅุถุงูุฉ: ${latestMember.created_at}`);
    console.log(`   ุงููุนุฑู: ${latestMember.id}`);
    
    // ุงูุชุญูู ูู ุฅุฌูุงูู ุงูุฃุนุถุงุก
    const totalMembers = await prisma.team_members.count();
    console.log(`\n๐ ุฅุฌูุงูู ุฃุนุถุงุก ุงููุฑูู: ${totalMembers}`);
    
    // ุงุฎุชุจุงุฑ API
    console.log('\n๐ ุงุฎุชุจุงุฑ API /api/team-members...');
    const response = await fetch('http://localhost:3002/api/team-members?t=' + Date.now(), {
      headers: {
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    
    if (!response.ok) {
      throw new Error(`API ุฎุทุฃ: ${response.status}`);
    }
    
    const apiData = await response.json();
    console.log(`๐ก ุนุฏุฏ ุงูุฃุนุถุงุก ูู API: ${apiData.members?.length || 0}`);
    
    // ุงูุจุญุซ ุนู ุงูุนุถู ุงูุฌุฏูุฏ ูู API
    const memberInApi = apiData.members?.find(m => m.id === latestMember.id);
    
    if (memberInApi) {
      console.log('โ ุงูุนุถู ุงูุฌุฏูุฏ ูุธูุฑ ูู API ุจูุฌุงุญ');
      console.log(`   ุงุณู API: ${memberInApi.name}`);
      console.log(`   ุจุฑูุฏ API: ${memberInApi.email}`);
    } else {
      console.log('โ ุงูุนุถู ุงูุฌุฏูุฏ ูุง ูุธูุฑ ูู API');
    }
    
    // ุนุฑุถ ุฃุญุฏุซ 3 ุฃุนุถุงุก
    console.log('\n๐ ุฃุญุฏุซ 3 ุฃุนุถุงุก ูู ุงููุฑูู:');
    const recentMembers = await prisma.team_members.findMany({
      orderBy: { created_at: 'desc' },
      take: 3,
      select: { id: true, name: true, email: true, role: true, created_at: true }
    });
    
    recentMembers.forEach((member, index) => {
      console.log(`   ${index + 1}. ${member.name} (${member.role}) - ${member.created_at.toLocaleDateString('ar-SA')}`);
    });
    
    console.log('\n๐ก ูุตุงุฆุญ ูุญู ูุดููุฉ ุงูุนุฑุถ:');
    console.log('1. ุงุถุบุท F5 ูุชุญุฏูุซ ุงูุตูุญุฉ');
    console.log('2. ุงูุณุญ cache ุงููุชุตูุญ (Ctrl+Shift+R)');
    console.log('3. ุงุณุชุฎุฏู ุฒุฑ ุงูุชุญุฏูุซ ูู ุตูุญุฉ ุฅุฏุงุฑุฉ ุงููุฑูู');
    console.log('4. ุชุญูู ูู console ุงููุชุตูุญ ููุฃุฎุทุงุก');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชุญูู:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifyNewTeamMember();