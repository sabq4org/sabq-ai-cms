/**
 * ุชุดุฎูุต ุณุฑูุน ููุดููุฉ ูููุฐุฌ ุงููุฑูู
 * - ููุงุฐุง ุชุธูุฑ ูููุฉ "ูุฑุงุณู"ุ
 * - ููุงุฐุง ุงููุงุฆูุฉ ูุง ุชุณุชุฌูุจุ
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugTeamFormIssue() {
  try {
    console.log('๐ ุชุดุฎูุต ูุดููุฉ ูููุฐุฌ ุงููุฑูู...\n');
    
    // 1. ูุญุต API ุงูุฃุฏูุงุฑ
    console.log('1๏ธโฃ ูุญุต API ุงูุฃุฏูุงุฑ:');
    
    try {
      console.log('๐ ูุญุงูุงุฉ: GET /api/admin/roles');
      
      const rolesFromDB = await prisma.roles.findMany({
        select: {
          id: true,
          name: true,
          display_name: true,
          description: true
        },
        orderBy: { display_name: 'asc' }
      });
      
      console.log(`๐ ุนุฏุฏ ุงูุฃุฏูุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${rolesFromDB.length}`);
      
      if (rolesFromDB.length === 0) {
        console.log('โ ูุง ุชูุฌุฏ ุฃุฏูุงุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช!');
        console.log('๐ก ูุฐุง ูุฏ ููุณุฑ ุนุฏู ุงุณุชุฌุงุจุฉ ุงููุงุฆูุฉ');
      } else {
        console.log('โ ุงูุฃุฏูุงุฑ ููุฌูุฏุฉ:');
        rolesFromDB.forEach((role, index) => {
          console.log(`  ${index + 1}. ${role.display_name || role.name} (${role.name})`);
        });
      }
      
    } catch (apiError) {
      console.error('โ ุฎุทุฃ ูู API ุงูุฃุฏูุงุฑ:', apiError.message);
      console.log('๐ก ูุฐุง ูุฏ ููุณุฑ ุนุฏู ุชุญููู ุงูุฃุฏูุงุฑ');
    }
    
    // 2. ูุญุต ุงูุจูุงูุงุช ุงูุงูุชุฑุงุถูุฉ ุงููุญุชููุฉ
    console.log('\n2๏ธโฃ ูุญุต ุงููุตุงุฏุฑ ุงููุญุชููุฉ ููููุฉ "ูุฑุงุณู":');
    
    const possibleSources = [
      'formData initial state',
      'localStorage cache',
      'previous form values',
      'role mapping function',
      'fallback default value'
    ];
    
    console.log('๐ฏ ุงููุตุงุฏุฑ ุงููุญุชููุฉ:');
    possibleSources.forEach((source, index) => {
      console.log(`  ${index + 1}. ${source}`);
    });
    
    // 3. ูุญุงูุงุฉ ุณููุงุฑูู ุงูุชุญููู
    console.log('\n3๏ธโฃ ูุญุงูุงุฉ ุณููุงุฑูู ุชุญููู ุงููููุฐุฌ:');
    
    console.log('๐ฑ ุฎุทูุงุช ุชุญููู ุงููููุฐุฌ:');
    console.log('  1. useEffect ูุณุชุฏุนู fetchRoles()');
    console.log('  2. rolesLoading = true ูู ุงูุจุฏุงูุฉ');
    console.log('  3. API call ุฅูู /api/admin/roles');
    
    // ูุญุงูุงุฉ API response
    const apiResponse = {
      success: true,
      data: rolesFromDB.map(role => ({
        id: role.id,
        name: role.name,
        display_name: role.display_name || role.name,
        description: role.description
      }))
    };
    
    console.log('  4. API response:');
    console.log(`     success: ${apiResponse.success}`);
    console.log(`     data count: ${apiResponse.data.length}`);
    
    if (apiResponse.data.length > 0) {
      console.log('  5. โ ุชุญููู ููุชูุณูู ุงููุทููุจ:');
      const frontendRoles = apiResponse.data.map(role => ({
        value: role.name,
        label: role.display_name
      }));
      
      frontendRoles.slice(0, 3).forEach(role => {
        console.log(`     { value: "${role.value}", label: "${role.label}" }`);
      });
      
      console.log('  6. โ rolesLoading = false');
      console.log('  7. โ availableRoles.length > 0');
    } else {
      console.log('  5. โ ูุง ุชูุฌุฏ ุฃุฏูุงุฑ ููุชุญููู');
      console.log('  6. โ fallback ุฅูู ุงูุฃุฏูุงุฑ ุงูุงูุชุฑุงุถูุฉ');
    }
    
    // 4. ูุญุต ูุดุงูู ูุญุชููุฉ ูู Select component
    console.log('\n4๏ธโฃ ูุญุต ูุดุงูู ูุญุชููุฉ ูู Select:');
    
    const selectIssues = [
      {
        issue: 'rolesLoading ูุง ูุชุญูู ุฅูู false',
        cause: 'API ูุดู ุฃู ูู ูุณุชุฌุจ',
        solution: 'ูุญุต Network tab ูู ุงููุชุตูุญ'
      },
      {
        issue: 'availableRoles ูุงุฑุบ',
        cause: 'ูุดู ูู ุชุญููู ุงูุจูุงูุงุช ุฃู API ูุงุฑุบ',
        solution: 'ูุญุต Console errors'
      },
      {
        issue: 'Select disabled',
        cause: 'rolesLoading = true ุฏุงุฆูุงู',
        solution: 'ูุญุต fetchRoles function'
      },
      {
        issue: 'ูููุฉ "ูุฑุงุณู" ูู cache',
        cause: 'browser cache ุฃู localStorage',
        solution: 'Hard refresh ุฃู clear cache'
      }
    ];
    
    console.log('๐ง ุงููุดุงูู ุงููุญุชููุฉ:');
    selectIssues.forEach((item, index) => {
      console.log(`  ${index + 1}. ุงููุดููุฉ: ${item.issue}`);
      console.log(`     ุงูุณุจุจ: ${item.cause}`);
      console.log(`     ุงูุญู: ${item.solution}\n`);
    });
    
    // 5. ุชุนูููุงุช ุงูุชุดุฎูุต ูููุณุชุฎุฏู
    console.log('5๏ธโฃ ุชุนูููุงุช ุงูุชุดุฎูุต ุงูุณุฑูุน:');
    
    const debugSteps = [
      'ุงูุชุญ Developer Tools (F12)',
      'ุงูุชูู ุฅูู Console tab',
      'ุงุจุญุซ ุนู ุฃุฎุทุงุก ุชุญููู ุงูุฃุฏูุงุฑ',
      'ุชุญูู ูู Network tab ููู API calls',
      'ุงูุณุญ cache ุงููุชุตูุญ (Ctrl+Shift+R)',
      'ุชุญูู ูู Application > Local Storage'
    ];
    
    console.log('๐ ุฎุทูุงุช ุงูุชุดุฎูุต:');
    debugSteps.forEach((step, index) => {
      console.log(`  ${index + 1}. ${step}`);
    });
    
    // 6. ูุชุงุฆุฌ ูุชูุตูุงุช
    console.log('\n6๏ธโฃ ุงูุชุดุฎูุต ูุงูุชูุตูุงุช:');
    
    if (rolesFromDB.length > 0) {
      console.log('โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุณูููุฉ - ุงูุฃุฏูุงุฑ ููุฌูุฏุฉ');
      console.log('๐ฏ ุงููุดููุฉ ูุญุชููุฉ ูู:');
      console.log('  - ุชุญููู JavaScript');
      console.log('  - API endpoint response');
      console.log('  - React state management');
      console.log('  - Browser caching');
      
      console.log('\n๐ก ุงูุญููู ุงูููุชุฑุญุฉ:');
      console.log('  1. Hard refresh: Ctrl+Shift+R');
      console.log('  2. ูุญุต Console ููุฃุฎุทุงุก');
      console.log('  3. ูุญุต Network tab');
      console.log('  4. ุฅุนุงุฏุฉ build ุงููุดุฑูุน');
    } else {
      console.log('โ ูุดููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช - ูุง ุชูุฌุฏ ุฃุฏูุงุฑ');
      console.log('๐ฏ ูุฌุจ ุฅุถุงูุฉ ุงูุฃุฏูุงุฑ ุฃููุงู');
    }
    
    console.log('\n๐ ููุชุฃูุฏ ูู ูุตูู API:');
    console.log('curl -X GET "http://localhost:3000/api/admin/roles"');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชุดุฎูุต:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugTeamFormIssue();