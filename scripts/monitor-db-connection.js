const { PrismaClient } = require('@prisma/client');

// ุฅูุดุงุก Prisma client ูุน ุฅุนุฏุงุฏุงุช ูุญุณูุฉ
const prisma = new PrismaClient({
  log: ['error', 'warn'],
  errorFormat: 'pretty',
});

// ุฅุญุตุงุฆูุงุช ุงููุฑุงูุจุฉ
const stats = {
  checks: 0,
  successes: 0,
  failures: 0,
  lastError: null,
  startTime: new Date(),
  consecutiveFailures: 0,
};

// ุฏุงูุฉ ูุญุต ุงูุงุชุตุงู
async function checkConnection() {
  stats.checks++;
  
  try {
    const start = Date.now();
    await prisma.$queryRaw`SELECT 1 as test`;
    const duration = Date.now() - start;
    
    stats.successes++;
    stats.consecutiveFailures = 0;
    
    console.log(`โ [${new Date().toLocaleTimeString()}] ุงูุงุชุตุงู ุณููู (${duration}ms)`);
    return true;
  } catch (error) {
    stats.failures++;
    stats.consecutiveFailures++;
    stats.lastError = error.message;
    
    console.error(`โ [${new Date().toLocaleTimeString()}] ูุดู ุงูุงุชุตุงู:`, error.message);
    
    // ุฅุฐุง ูุดู ุงูุงุชุตุงู 3 ูุฑุงุช ูุชุชุงููุฉุ ุญุงูู ุฅุนุงุฏุฉ ุงูุงุชุตุงู
    if (stats.consecutiveFailures >= 3) {
      console.log('๐ ูุญุงููุฉ ุฅุนุงุฏุฉ ุงูุงุชุตุงู...');
      try {
        await prisma.$disconnect();
        await new Promise(resolve => setTimeout(resolve, 2000));
        await prisma.$connect();
        console.log('โ ุชู ุฅุนุงุฏุฉ ุงูุงุชุตุงู ุจูุฌุงุญ!');
        stats.consecutiveFailures = 0;
      } catch (reconnectError) {
        console.error('โ ูุดู ุฅุนุงุฏุฉ ุงูุงุชุตุงู:', reconnectError.message);
      }
    }
    
    return false;
  }
}

// ุฏุงูุฉ ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช
function displayStats() {
  const uptime = Math.floor((Date.now() - stats.startTime) / 1000);
  const successRate = stats.checks > 0 
    ? ((stats.successes / stats.checks) * 100).toFixed(2)
    : 0;
  
  console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงููุฑุงูุจุฉ:');
  console.log(`โฑ๏ธ  ููุช ุงูุชุดุบูู: ${uptime} ุซุงููุฉ`);
  console.log(`๐ ุนุฏุฏ ุงููุญูุตุงุช: ${stats.checks}`);
  console.log(`โ ูุฌุญ: ${stats.successes}`);
  console.log(`โ ูุดู: ${stats.failures}`);
  console.log(`๐ ูุณุจุฉ ุงููุฌุงุญ: ${successRate}%`);
  console.log(`๐ด ูุดู ูุชุชุงูู: ${stats.consecutiveFailures}`);
  
  if (stats.lastError) {
    console.log(`โ ุขุฎุฑ ุฎุทุฃ: ${stats.lastError}`);
  }
  
  console.log('โ'.repeat(50));
}

// ุจุฏุก ุงููุฑุงูุจุฉ
console.log('๐ ุจุฏุก ูุฑุงูุจุฉ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
console.log(`๐ DATABASE_URL: ${process.env.DATABASE_URL ? 'ููุฌูุฏ' : 'ููููุฏ'}`);
console.log('โ'.repeat(50));

// ูุญุต ุฃููู
checkConnection();

// ูุญุต ุฏูุฑู ูู 10 ุซูุงูู
const checkInterval = setInterval(checkConnection, 10000);

// ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช ูู ุฏูููุฉ
const statsInterval = setInterval(displayStats, 60000);

// ูุนุงูุฌุฉ ุฅููุงู ุงูุจุฑูุงูุฌ
process.on('SIGINT', async () => {
  console.log('\n\n๐ ุฅููุงู ุงููุฑุงูุจุฉ...');
  
  clearInterval(checkInterval);
  clearInterval(statsInterval);
  
  displayStats();
  
  await prisma.$disconnect();
  process.exit(0);
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก ุบูุฑ ุงููุชููุนุฉ
process.on('unhandledRejection', (error) => {
  console.error('โ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
});

console.log('๐ก ุงุถุบุท Ctrl+C ูุฅููุงู ุงููุฑุงูุจุฉ\n'); 