#!/usr/bin/env node

/**
 * Script ูุฅุฒุงูุฉ ุฌููุน ุงุณุชุฏุนุงุกุงุช prisma.$disconnect() ูู ูููุงุช API
 * ูุฐู ุงูุงุณุชุฏุนุงุกุงุช ุชุณุจุจ ูุดุงูู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// ุงูุจุญุซ ุนู ุฌููุน ูููุงุช route.ts ูู ูุฌูุฏ app/api
const apiDir = path.join(process.cwd(), 'app/api');
const pattern = path.join(apiDir, '**/*.ts');

console.log('๐ ุงูุจุญุซ ุนู ูููุงุช API...');

glob(pattern, (err, files) => {
  if (err) {
    console.error('โ ุฎุทุฃ ูู ุงูุจุญุซ:', err);
    process.exit(1);
  }

  console.log(`๐ ุชู ุงูุนุซูุฑ ุนูู ${files.length} ููู`);
  
  let totalRemoved = 0;
  let filesModified = 0;

  files.forEach(file => {
    const content = fs.readFileSync(file, 'utf8');
    
    // ุงูุจุญุซ ุนู ุฃููุงุท $disconnect
    const patterns = [
      /await\s+prisma\.\$disconnect\(\)\s*;?/g,
      /prisma\.\$disconnect\(\)\s*;?/g,
      /\.finally\(\s*\(\)\s*=>\s*prisma\.\$disconnect\(\)\s*\)/g,
      /\.finally\(\s*async\s*\(\)\s*=>\s*await\s+prisma\.\$disconnect\(\)\s*\)/g
    ];
    
    let newContent = content;
    let changes = 0;
    
    patterns.forEach(pattern => {
      const matches = newContent.match(pattern);
      if (matches) {
        changes += matches.length;
        newContent = newContent.replace(pattern, '// Removed: $disconnect() - causes connection issues');
      }
    });
    
    if (changes > 0) {
      fs.writeFileSync(file, newContent, 'utf8');
      console.log(`โ ${path.relative(process.cwd(), file)}: ุชู ุฅุฒุงูุฉ ${changes} ุงุณุชุฏุนุงุก`);
      totalRemoved += changes;
      filesModified++;
    }
  });

  console.log('\n๐ ููุฎุต ุงูุชุบููุฑุงุช:');
  console.log(`   - ุงููููุงุช ุงููุนุฏูุฉ: ${filesModified}`);
  console.log(`   - ุงูุงุณุชุฏุนุงุกุงุช ุงููุฒุงูุฉ: ${totalRemoved}`);
  console.log('\nโจ ุชู ุงูุงูุชูุงุก ุจูุฌุงุญ!');
});
