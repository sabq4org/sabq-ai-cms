const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugArticleCreationError() {
  console.log('๐ ุชุดุฎูุต ุฎุทุฃ ุฅูุดุงุก ุงูููุงู "ุงููุคูู ุบูุฑ ููุฌูุฏ"...\n');
  
  try {
    // 1. ูุญุต API articles ููุง ูุชููุนู
    console.log('๐ 1. ูุญุต ููู API articles ููุชุญูู ูู validation:');
    
    // ูุฑุงุกุฉ API articles ููููู
    const fs = require('fs');
    const path = require('path');
    
    const apiPath = path.join(process.cwd(), 'app/api/articles/route.ts');
    if (fs.existsSync(apiPath)) {
      const apiContent = fs.readFileSync(apiPath, 'utf8');
      
      // ุงูุจุญุซ ุนู validation ุงููุคูู
      const authorValidationMatch = apiContent.match(/findUnique.*where.*id.*authorId/s);
      if (authorValidationMatch) {
        console.log('   โ ูุฌุฏุช validation ูููุคูู ูู API');
        
        // ุงูุจุญุซ ุนู ุฃู ุฌุฏูู ูุชู ูุญุตู
        const tableMatches = apiContent.match(/prisma\.(\w+)\.findUnique/g);
        if (tableMatches) {
          console.log('   ๐ ุงูุฌุฏุงูู ุงูููุญูุตุฉ:', tableMatches.map(m => m.replace('prisma.', '').replace('.findUnique', '')));
        }
      } else {
        console.log('   โ ูู ุฃุฌุฏ validation ูููุคูู ูู API');
      }
    }
    
    // 2. ูุญุต ุงูุจูุงูุงุช ุงูุญุงููุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('\n๐ 2. ูุญุต ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    
    // ูุญุต ุฌุฏูู users
    const usersCount = await prisma.users.count();
    const users = await prisma.users.findMany({
      where: { role: { not: 'user' } },
      select: { id: true, name: true, role: true, email: true },
      take: 10
    });
    
    console.log(`   ๐ค users (ุบูุฑ ุงูุนุงุฏููู): ${users.length} ูู ${usersCount}`);
    if (users.length > 0) {
      console.log('   ๐ ุนููุฉ ูู ุงููุณุชุฎุฏููู:');
      users.slice(0, 5).forEach((user, index) => {
        console.log(`      ${index + 1}. ${user.name} (${user.id}) - ${user.role}`);
      });
    }
    
    // ูุญุต ุฌุฏูู article_authors
    const authorsCount = await prisma.article_authors.count();
    const authors = await prisma.article_authors.findMany({
      where: { is_active: true },
      select: { id: true, full_name: true, role: true, email: true },
      take: 10
    });
    
    console.log(`\n   ๐ article_authors (ูุดุท): ${authors.length} ูู ${authorsCount}`);
    if (authors.length > 0) {
      console.log('   ๐ ุนููุฉ ูู ุงููุคูููู:');
      authors.slice(0, 5).forEach((author, index) => {
        console.log(`      ${index + 1}. ${author.full_name} (${author.id}) - ${author.role || 'ุบูุฑ ูุญุฏุฏ'}`);
      });
    }
    
    // ูุญุต ุฌุฏูู reporters
    try {
      const reportersCount = await prisma.reporters.count();
      const reporters = await prisma.reporters.findMany({
        select: { id: true, full_name: true, user_id: true },
        take: 5
      });
      
      console.log(`\n   ๐ฐ reporters: ${reporters.length} ูู ${reportersCount}`);
      if (reporters.length > 0) {
        console.log('   ๐ ุนููุฉ ูู ุงููุฑุงุณููู:');
        reporters.forEach((reporter, index) => {
          console.log(`      ${index + 1}. ${reporter.full_name} (${reporter.id}) - user_id: ${reporter.user_id}`);
        });
      }
    } catch (error) {
      console.log('   โ ุฌุฏูู reporters ุบูุฑ ูุชุงุญ ุฃู ูุญุชูู ุฃุฎุทุงุก');
    }
    
    // 3. ูุญุงููุฉ ููู ุงููุนุฑู ุงูููุฑุณู ูู ุงูุทูุจ
    console.log('\n๐ 3. ุชุญููู ุงููุนุฑูุงุช ุงููุญุชููุฉ:');
    
    // ูุญุต ุขุฎุฑ ุงูููุงูุงุช ููุนุฑูุฉ ููุท author_id
    const recentArticles = await prisma.articles.findMany({
      select: { id: true, title: true, author_id: true, created_at: true },
      orderBy: { created_at: 'desc' },
      take: 5
    });
    
    if (recentArticles.length > 0) {
      console.log('   ๐ฐ ุขุฎุฑ ุงูููุงูุงุช ูauthor_id ุงููุณุชุฎุฏู:');
      recentArticles.forEach((article, index) => {
        console.log(`      ${index + 1}. "${article.title.substring(0, 30)}..." - author_id: ${article.author_id || 'NULL'}`);
      });
      
      // ุชุญููู ุฃููุงุท author_id
      const authorIds = recentArticles.map(a => a.author_id).filter(Boolean);
      const uniquePatterns = [...new Set(authorIds.map(id => {
        if (id.startsWith('user-')) return 'user-*';
        if (id.startsWith('author_')) return 'author_*';
        if (id.includes('-')) return 'uuid-like';
        return 'other';
      }))];
      
      console.log(`   ๐ ุฃููุงุท author_id ุงููุณุชุฎุฏูุฉ: ${uniquePatterns.join(', ')}`);
    }
    
    // 4. ูุญุต ุฃู ูุนุฑู author_id ูุทุงุจู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ
    console.log('\n๐ 4. ูุญุต ุชุทุงุจู author_id ูุน ุงูุฌุฏุงูู:');
    
    if (recentArticles.length > 0) {
      const sampleAuthorId = recentArticles[0].author_id;
      if (sampleAuthorId) {
        console.log(`   ๐งช ุงุฎุชุจุงุฑ author_id ุนููุฉ: ${sampleAuthorId}`);
        
        // ูุญุต ูู users
        const userMatch = await prisma.users.findUnique({
          where: { id: sampleAuthorId },
          select: { id: true, name: true, role: true }
        });
        
        if (userMatch) {
          console.log(`   โ ููุฌูุฏ ูู users: ${userMatch.name} (${userMatch.role})`);
        } else {
          console.log(`   โ ุบูุฑ ููุฌูุฏ ูู users`);
        }
        
        // ูุญุต ูู article_authors
        const authorMatch = await prisma.article_authors.findUnique({
          where: { id: sampleAuthorId },
          select: { id: true, full_name: true, role: true }
        });
        
        if (authorMatch) {
          console.log(`   โ ููุฌูุฏ ูู article_authors: ${authorMatch.full_name} (${authorMatch.role || 'ุบูุฑ ูุญุฏุฏ'})`);
        } else {
          console.log(`   โ ุบูุฑ ููุฌูุฏ ูู article_authors`);
        }
        
        // ูุญุต ูู reporters
        try {
          const reporterMatch = await prisma.reporters.findFirst({
            where: { 
              OR: [
                { id: sampleAuthorId },
                { user_id: sampleAuthorId }
              ]
            },
            select: { id: true, full_name: true, user_id: true }
          });
          
          if (reporterMatch) {
            console.log(`   โ ููุฌูุฏ ูู reporters: ${reporterMatch.full_name}`);
          } else {
            console.log(`   โ ุบูุฑ ููุฌูุฏ ูู reporters`);
          }
        } catch (error) {
          console.log(`   โ ุฎุทุฃ ูู ูุญุต reporters: ${error.message}`);
        }
      }
    }
    
    // 5. ุชูุตูุงุช ููุฅุตูุงุญ
    console.log('\n๐ก 5. ุชูุตูุงุช ููุฅุตูุงุญ:');
    console.log('   1. ุชุญุฏูุฏ ุฃู ุฌุฏูู ููุญุตู API articles ูููุคูู');
    console.log('   2. ุงูุชุฃูุฏ ูู ุฃู ุงููููุฐุฌ ูุฑุณู author_id ูู ุงูุฌุฏูู ุงูุตุญูุญ');
    console.log('   3. ุฅุถุงูุฉ logging ูู API articles ููุนุฑูุฉ author_id ุงูููุฑุณู');
    console.log('   4. ุงูุชุฃูุฏ ูู ุฃู validation API ููุญุต ุงูุฌุฏูู ุงูููุงุณุจ');
    
    console.log('\nโ ุงูุชูู ุงูุชุดุฎูุต');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชุดุฎูุต:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
debugArticleCreationError()
  .then(() => {
    console.log('\n๐ ุชู ุงูุงูุชูุงุก ูู ุงูุชุดุฎูุต');
    process.exit(0);
  })
  .catch((error) => {
    console.error('โ ุฎุทุฃ ูู ุชุดุบูู ุงูุณูุฑูุจุช:', error);
    process.exit(1);
  });