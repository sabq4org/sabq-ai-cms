const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// ุงูุชุตูููุงุช ุงููุนููุฉ
const categories = [
  {
    name: 'ุชูููุฉ',
    slug: 'technology',
    description: JSON.stringify({
      ar: 'ุฃุฎุจุงุฑ ูุชุทูุฑุงุช ุงูุชูููุฉ ูุงูุฐูุงุก ุงูุงุตุทูุงุนู',
      en: 'Technology',
      color: '#8B5CF6',
      icon: '๐ป'
    }),
    displayOrder: 1,
    isActive: true
  },
  {
    name: 'ุฑูุงุถุฉ',
    slug: 'sports',
    description: JSON.stringify({
      ar: 'ุฃุฎุจุงุฑ ุฑูุงุถูุฉ ูุญููุฉ ูุนุงูููุฉ',
      en: 'Sports',
      color: '#F59E0B',
      icon: 'โฝ'
    }),
    displayOrder: 2,
    isActive: true
  },
  {
    name: 'ุงูุชุตุงุฏ',
    slug: 'economy',
    description: JSON.stringify({
      ar: 'ุชูุงุฑูุฑ ุงูุณูู ูุงููุงู ูุงูุฃุนูุงู ูุงูุทุงูุฉ',
      en: 'Economy',
      color: '#10B981',
      icon: '๐ฐ'
    }),
    displayOrder: 3,
    isActive: true
  },
  {
    name: 'ุณูุงุณุฉ',
    slug: 'politics',
    description: JSON.stringify({
      ar: 'ูุณุชุฌุฏุงุช ุงูุณูุงุณุฉ ุงููุญููุฉ ูุงูุฏูููุฉ ูุชุญูููุงุชูุง',
      en: 'Politics',
      color: '#EF4444',
      icon: '๐๏ธ'
    }),
    displayOrder: 4,
    isActive: true
  },
  {
    name: 'ูุญููุงุช',
    slug: 'local',
    description: JSON.stringify({
      ar: 'ุฃุฎุจุงุฑ ุงูููุงุทู ูุงููุฏู ุงูุณุนูุฏูุฉ',
      en: 'Local',
      color: '#3B82F6',
      icon: '๐บ๏ธ'
    }),
    displayOrder: 5,
    isActive: true
  },
  {
    name: 'ุซูุงูุฉ ููุฌุชูุน',
    slug: 'culture',
    description: JSON.stringify({
      ar: 'ูุนุงููุงุช ุซูุงููุฉุ ููุงุณุจุงุชุ ูุถุงูุง ุงุฌุชูุงุนูุฉ',
      en: 'Culture',
      color: '#EC4899',
      icon: '๐ญ'
    }),
    displayOrder: 6,
    isActive: true
  },
  {
    name: 'ููุงูุงุช ุฑุฃู',
    slug: 'opinion',
    description: JSON.stringify({
      ar: 'ุชุญูููุงุช ููุฌูุงุช ูุธุฑ ูุชุงุจ ุงูุฑุฃู',
      en: 'Opinion',
      color: '#7C3AED',
      icon: 'โ๏ธ'
    }),
    displayOrder: 7,
    isActive: true
  },
  {
    name: 'ูููุนุงุช',
    slug: 'misc',
    description: JSON.stringify({
      ar: 'ุฃุฎุจุงุฑ ุฎูููุฉุ ููุทุงุชุ ุทุฑุงุฆู ูุฃุญุฏุงุซ ุบูุฑ ุชูููุฏูุฉ',
      en: 'Misc',
      color: '#6B7280',
      icon: '๐'
    }),
    displayOrder: 8,
    isActive: true
  }
];

async function addCategories() {
  console.log('๐ ุจุฏุก ุฅุถุงูุฉ ุงูุชุตูููุงุช ุงููุนููุฉ ุฅูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...\n');

  try {
    // ุนุฏ ุงูุชุตูููุงุช ุงูููุฌูุฏุฉ
    const existingCount = await prisma.category.count();
    console.log(`๐ ุนุฏุฏ ุงูุชุตูููุงุช ุงูููุฌูุฏุฉ ุญุงููุงู: ${existingCount}\n`);

    let added = 0;
    let updated = 0;
    let skipped = 0;

    for (const category of categories) {
      try {
        // ุงูุชุญูู ูู ูุฌูุฏ ุงูุชุตููู
        const existing = await prisma.category.findFirst({
          where: {
            OR: [
              { slug: category.slug },
              { name: category.name }
            ]
          }
        });

        if (existing) {
          // ุชุญุฏูุซ ุงูุชุตููู ุงูููุฌูุฏ
          await prisma.category.update({
            where: { id: existing.id },
            data: {
              name: category.name,
              slug: category.slug,
              description: category.description,
              displayOrder: category.displayOrder,
              isActive: category.isActive,
              updatedAt: new Date()
            }
          });
          const descData = JSON.parse(category.description);
          console.log(`โ ุชู ุชุญุฏูุซ: ${category.name} (${descData.en})`);
          updated++;
        } else {
          // ุฅุถุงูุฉ ุชุตููู ุฌุฏูุฏ
          await prisma.category.create({
            data: {
              name: category.name,
              slug: category.slug,
              description: category.description,
              displayOrder: category.displayOrder,
              isActive: category.isActive
            }
          });
          const descData = JSON.parse(category.description);
          console.log(`โจ ุชู ุฅุถุงูุฉ: ${category.name} (${descData.en})`);
          added++;
        }
      } catch (error) {
        console.error(`โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุชุตููู ${category.name_ar}:`, error.message);
        skipped++;
      }
    }

    console.log('\n๐ ููุฎุต ุงูุนูููุฉ:');
    console.log(`   โจ ุชู ุฅุถุงูุฉ: ${added} ุชุตููู ุฌุฏูุฏ`);
    console.log(`   โ ุชู ุชุญุฏูุซ: ${updated} ุชุตููู`);
    console.log(`   โญ๏ธ  ุชู ุชุฎุทู: ${skipped} ุชุตููู`);

    // ุนุฑุถ ุฌููุน ุงูุชุตูููุงุช ุงููุดุทุฉ
    const allCategories = await prisma.category.findMany({
      where: { isActive: true },
      orderBy: { displayOrder: 'asc' }
    });

    console.log('\n๐ ุงูุชุตูููุงุช ุงููุดุทุฉ ุญุงููุงู:');
    allCategories.forEach(cat => {
      try {
        const descData = JSON.parse(cat.description || '{}');
        console.log(`   ${cat.displayOrder}. ${descData.icon || '๐'} ${cat.name} (${descData.en || ''}) - ${descData.color || '#3B82F6'}`);
      } catch {
        console.log(`   ${cat.displayOrder}. ${cat.name}`);
      }
    });

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุนูููุฉ:', error);
  } finally {
    await prisma.$disconnect();
    console.log('\nโ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
addCategories()
  .then(() => console.log('\n๐ ุชูุช ุงูุนูููุฉ ุจูุฌุงุญ!'))
  .catch(error => {
    console.error('\nโ ูุดูุช ุงูุนูููุฉ:', error);
    process.exit(1);
  }); 