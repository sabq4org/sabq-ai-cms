#!/usr/bin/env node

/**
 * ุณูุฑูุจุช ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุฃูููุฉ ููููุงูุงุช ุงูุฐููุฉ
 * ูุญุชูู ุนูู ุดุฎุตูุงุช ุณุนูุฏูุฉ ููุคุณุณุงุช ููุดุงุฑูุน ููุตุทูุญุงุช
 */

const { PrismaClient } = require('../lib/generated/prisma');

async function seedSmartEntities() {
  const prisma = new PrismaClient();

  try {
    console.log('๐ ุจุฏุก ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุฃูููุฉ ููููุงูุงุช ุงูุฐููุฉ...\n');

    // 1. ุฅูุดุงุก ุฃููุงุน ุงูููุงูุงุช
    console.log('๐ ุฅูุดุงุก ุฃููุงุน ุงูููุงูุงุช...');
    
    const entityTypes = [
      {
        id: 'person',
        name: 'person',
        name_ar: 'ุดุฎุตูุฉ',
        description: 'ุดุฎุตูุงุช ุนุงูุฉ ููุณุคูููู ููุดุงููุฑ',
        icon: '๐ค',
        color: '#3B82F6'
      },
      {
        id: 'organization',
        name: 'organization',
        name_ar: 'ูุคุณุณุฉ',
        description: 'ุดุฑูุงุช ููุฒุงุฑุงุช ููุคุณุณุงุช ุญููููุฉ ูุฎุงุตุฉ',
        icon: '๐ข',
        color: '#10B981'
      },
      {
        id: 'project',
        name: 'project',
        name_ar: 'ูุดุฑูุน',
        description: 'ูุดุงุฑูุน ุญููููุฉ ููุจุงุฏุฑุงุช ุงุณุชุฑุงุชูุฌูุฉ',
        icon: '๐๏ธ',
        color: '#F59E0B'
      },
      {
        id: 'location',
        name: 'location',
        name_ar: 'ูููุน',
        description: 'ูุฏู ูููุงุทู ููุนุงูู ุฌุบุฑุงููุฉ',
        icon: '๐',
        color: '#EF4444'
      },
      {
        id: 'event',
        name: 'event',
        name_ar: 'ุญุฏุซ',
        description: 'ูุนุงููุงุช ููุคุชูุฑุงุช ูููู',
        icon: '๐',
        color: '#8B5CF6'
      },
      {
        id: 'term',
        name: 'term',
        name_ar: 'ูุตุทูุญ',
        description: 'ูุตุทูุญุงุช ุงูุชุตุงุฏูุฉ ูุณูุงุณูุฉ ูุชูููุฉ',
        icon: '๐',
        color: '#6B7280'
      }
    ];

    for (const type of entityTypes) {
      await prisma.entityTypes.upsert({
        where: { id: type.id },
        update: type,
        create: type
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุฃููุงุน ุงูููุงูุงุช');

    // 2. ุฅูุดุงุก ุงูุดุฎุตูุงุช ุงููููุฉ
    console.log('๐ฅ ุฅูุดุงุก ุงูุดุฎุตูุงุช ุงููููุฉ...');
    
    const persons = [
      {
        name: 'ูุญูุฏ ุจู ุณููุงู',
        name_ar: 'ูุญูุฏ ุจู ุณููุงู',
        name_en: 'Mohammed bin Salman',
        aliases: ['ููู ุงูุนูุฏ', 'ุงูุฃููุฑ ูุญูุฏ ุจู ุณููุงู', 'MBS', 'ููู ุงูุนูุฏ ุงูุณุนูุฏู'],
        entity_type_id: 'person',
        description: 'ููู ุงูุนูุฏ ุงูุณุนูุฏู ูุฑุฆูุณ ูุฌูุณ ุงููุฒุฑุงุก',
        category: 'ููู ุนูุฏ',
        importance_score: 10,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'mohammed-bin-salman',
        twitter_handle: '@MohammedAlSaud',
        official_website: 'https://www.spa.gov.sa'
      },
      {
        name: 'ุณููุงู ุจู ุนุจุฏุงูุนุฒูุฒ',
        name_ar: 'ุณููุงู ุจู ุนุจุฏุงูุนุฒูุฒ ุขู ุณุนูุฏ',
        name_en: 'Salman bin Abdulaziz Al Saud',
        aliases: ['ุงูููู ุณููุงู', 'ุฎุงุฏู ุงูุญุฑููู ุงูุดุฑูููู', 'ุงูููู'],
        entity_type_id: 'person',
        description: 'ููู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
        category: 'ููู',
        importance_score: 10,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'king-salman'
      },
      {
        name: 'ูุญูุฏ ุงูุฌุฏุนุงู',
        name_ar: 'ูุญูุฏ ุจู ุนุจุฏุงููู ุงูุฌุฏุนุงู',
        name_en: 'Mohammed Al-Jadaan',
        aliases: ['ูุฒูุฑ ุงููุงููุฉ', 'ุงูุฌุฏุนุงู'],
        entity_type_id: 'person',
        description: 'ูุฒูุฑ ุงููุงููุฉ ุงูุณุนูุฏู',
        category: 'ูุฒูุฑ',
        importance_score: 8,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'mohammed-aljadaan'
      }
    ];

    for (const person of persons) {
      await prisma.smartEntities.upsert({
        where: { slug: person.slug },
        update: person,
        create: person
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงูุดุฎุตูุงุช');

    // 3. ุฅูุดุงุก ุงููุคุณุณุงุช ูุงูุดุฑูุงุช
    console.log('๐ข ุฅูุดุงุก ุงููุคุณุณุงุช...');
    
    const organizations = [
      {
        name: 'ุฃุฑุงููู ุงูุณุนูุฏูุฉ',
        name_ar: 'ุฃุฑุงููู ุงูุณุนูุฏูุฉ',
        name_en: 'Saudi Aramco',
        aliases: ['ุฃุฑุงููู', 'ุดุฑูุฉ ุฃุฑุงููู', 'Aramco'],
        entity_type_id: 'organization',
        description: 'ุฃูุจุฑ ุดุฑูุฉ ููุท ูู ุงูุนุงูู',
        category: 'ุดุฑูุฉ ููุท',
        importance_score: 9,
        location: 'ุงูุธูุฑุงู',
        country: 'SA',
        slug: 'saudi-aramco',
        official_website: 'https://www.aramco.com'
      },
      {
        name: 'ุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช ุงูุนุงูุฉ',
        name_ar: 'ุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช ุงูุนุงูุฉ',
        name_en: 'Public Investment Fund',
        aliases: ['PIF', 'ุงูุตูุฏูู ุงูุณูุงุฏู', 'ุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช'],
        entity_type_id: 'organization',
        description: 'ุงูุตูุฏูู ุงูุณูุงุฏู ููููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
        category: 'ุตูุฏูู ุงุณุชุซูุงุฑู',
        importance_score: 9,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'pif',
        official_website: 'https://www.pif.gov.sa'
      },
      {
        name: 'ูุฒุงุฑุฉ ุงูุงุณุชุซูุงุฑ',
        name_ar: 'ูุฒุงุฑุฉ ุงูุงุณุชุซูุงุฑ',
        name_en: 'Ministry of Investment',
        aliases: ['MISA', 'ูุฒุงุฑุฉ ุงูุงุณุชุซูุงุฑ ุงูุณุนูุฏูุฉ'],
        entity_type_id: 'organization',
        description: 'ูุฒุงุฑุฉ ุงูุงุณุชุซูุงุฑ ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
        category: 'ูุฒุงุฑุฉ',
        importance_score: 7,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'ministry-of-investment',
        official_website: 'https://www.misa.gov.sa'
      }
    ];

    for (const org of organizations) {
      await prisma.smartEntities.upsert({
        where: { slug: org.slug },
        update: org,
        create: org
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงููุคุณุณุงุช');

    // 4. ุฅูุดุงุก ุงููุดุงุฑูุน ุงูุงุณุชุฑุงุชูุฌูุฉ
    console.log('๐๏ธ ุฅูุดุงุก ุงููุดุงุฑูุน...');
    
    const projects = [
      {
        name: 'ูููู',
        name_ar: 'ูููู',
        name_en: 'NEOM',
        aliases: ['ูุดุฑูุน ูููู', 'ูุฏููุฉ ูููู', 'NEOM City'],
        entity_type_id: 'project',
        description: 'ูุฏููุฉ ูุณุชูุจููุฉ ุฐููุฉ ูู ุดูุงู ุบุฑุจ ุงูุณุนูุฏูุฉ',
        category: 'ูุฏููุฉ ุฐููุฉ',
        importance_score: 9,
        location: 'ุชุจูู',
        country: 'SA',
        slug: 'neom',
        official_website: 'https://www.neom.com'
      },
      {
        name: 'ุงููุฏูุฉ',
        name_ar: 'ุงููุฏูุฉ',
        name_en: 'Qiddiya',
        aliases: ['ูุดุฑูุน ุงููุฏูุฉ', 'ูุฏููุฉ ุงููุฏูุฉ'],
        entity_type_id: 'project',
        description: 'ุนุงุตูุฉ ุงูุชุฑููู ูุงูุฑูุงุถุฉ ูุงูุซูุงูุฉ ูู ุงูุณุนูุฏูุฉ',
        category: 'ูุฏููุฉ ุชุฑููููุฉ',
        importance_score: 8,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'qiddiya',
        official_website: 'https://www.qiddiya.com'
      },
      {
        name: 'ุฐุง ูุงูู',
        name_ar: 'ุฐุง ูุงูู',
        name_en: 'The Line',
        aliases: ['ูุดุฑูุน ุงูุฎุท', 'ุงููุฏููุฉ ุงูุฎุทูุฉ'],
        entity_type_id: 'project',
        description: 'ูุฏููุฉ ุฎุทูุฉ ุฐููุฉ ุถูู ูุดุฑูุน ูููู',
        category: 'ูุฏููุฉ ูุณุชูุจููุฉ',
        importance_score: 8,
        location: 'ูููู',
        country: 'SA',
        slug: 'the-line'
      }
    ];

    for (const project of projects) {
      await prisma.smartEntities.upsert({
        where: { slug: project.slug },
        update: project,
        create: project
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงููุดุงุฑูุน');

    // 5. ุฅูุดุงุก ุงูููุงูุน ุงููููุฉ
    console.log('๐ ุฅูุดุงุก ุงูููุงูุน...');
    
    const locations = [
      {
        name: 'ุงูุฑูุงุถ',
        name_ar: 'ุงูุฑูุงุถ',
        name_en: 'Riyadh',
        aliases: ['ุงูุนุงุตูุฉ', 'ูุฏููุฉ ุงูุฑูุงุถ'],
        entity_type_id: 'location',
        description: 'ุนุงุตูุฉ ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ',
        category: 'ุนุงุตูุฉ',
        importance_score: 10,
        location: 'ุงูุฑูุงุถ',
        country: 'SA',
        slug: 'riyadh'
      },
      {
        name: 'ุฌุฏุฉ',
        name_ar: 'ุฌุฏุฉ',
        name_en: 'Jeddah',
        aliases: ['ุนุฑูุณ ุงูุจุญุฑ ุงูุฃุญูุฑ', 'ูุฏููุฉ ุฌุฏุฉ'],
        entity_type_id: 'location',
        description: 'ุซุงูู ุฃูุจุฑ ูุฏู ุงูุณุนูุฏูุฉ ูุจูุงุจุฉ ุงูุญุฑููู',
        category: 'ูุฏููุฉ ุฑุฆูุณูุฉ',
        importance_score: 9,
        location: 'ููุฉ ุงูููุฑูุฉ',
        country: 'SA',
        slug: 'jeddah'
      }
    ];

    for (const location of locations) {
      await prisma.smartEntities.upsert({
        where: { slug: location.slug },
        update: location,
        create: location
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงูููุงูุน');

    // 6. ุฅูุดุงุก ุงููุตุทูุญุงุช ุงููุงูุฉ
    console.log('๐ ุฅูุดุงุก ุงููุตุทูุญุงุช...');
    
    const terms = [
      {
        term: 'ุฑุคูุฉ ุงูุณุนูุฏูุฉ 2030',
        term_ar: 'ุฑุคูุฉ ุงูุณุนูุฏูุฉ 2030',
        term_en: 'Saudi Vision 2030',
        definition: 'ุงุณุชุฑุงุชูุฌูุฉ ุดุงููุฉ ูุชูููุน ุงูุงูุชุตุงุฏ ุงูุณุนูุฏู ูุชูููู ุงูุงุนุชูุงุฏ ุนูู ุงูููุท',
        detailed_def: 'ุจุฑูุงูุฌ ุฅุตูุงุญู ุดุงูู ููุฏู ุฅูู ุชูููุน ุงูุชุตุงุฏ ุงูููููุฉ ูุชุญููููุง ุฅูู ููุฉ ุงุณุชุซูุงุฑูุฉ ุนุงูููุฉ',
        category: 'ุงูุชุตุงุฏู',
        synonyms: ['ุงูุฑุคูุฉ', 'ุฑุคูุฉ 2030', 'Vision 2030'],
        usage_count: 0,
        reference_url: 'https://www.vision2030.gov.sa'
      },
      {
        term: 'ุงููุงุชุฌ ุงููุญูู ุงูุฅุฌูุงูู',
        term_ar: 'ุงููุงุชุฌ ุงููุญูู ุงูุฅุฌูุงูู',
        term_en: 'Gross Domestic Product',
        definition: 'ุฅุฌูุงูู ูููุฉ ุงูุณูุน ูุงูุฎุฏูุงุช ุงูููุชุฌุฉ ูู ุจูุฏ ูุง ุฎูุงู ูุชุฑุฉ ุฒูููุฉ ูุญุฏุฏุฉ',
        detailed_def: 'ูุคุดุฑ ุงูุชุตุงุฏู ูููุณ ุฅุฌูุงูู ุงููููุฉ ุงูููุฏูุฉ ูุฌููุน ุงูุณูุน ูุงูุฎุฏูุงุช ุงูููุงุฆูุฉ ุงูููุชุฌุฉ ุฏุงุฎู ุญุฏูุฏ ุจูุฏ ูุง',
        category: 'ุงูุชุตุงุฏู',
        difficulty: 'medium',
        synonyms: ['GDP', 'ุงููุงุชุฌ ุงููุญูู', 'ุฅุฌูุงูู ุงููุงุชุฌ ุงููุญูู'],
        usage_count: 0
      }
    ];

    for (const term of terms) {
      await prisma.smartTerms.upsert({
        where: { term: term.term },
        update: term,
        create: term
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงููุตุทูุญุงุช');

    // 7. ุฅูุดุงุก ุจุนุถ ุงูุนูุงูุงุช ุจูู ุงูููุงูุงุช
    console.log('๐ ุฅูุดุงุก ุงูุนูุงูุงุช ุจูู ุงูููุงูุงุช...');
    
    // ุงูุญุตูู ุนูู ุงูููุงูุงุช ุงูููุดุฃุฉ ููุฑุจุท ุจูููุง
    const mbs = await prisma.smartEntities.findUnique({ where: { slug: 'mohammed-bin-salman' } });
    const pif = await prisma.smartEntities.findUnique({ where: { slug: 'pif' } });
    const neom = await prisma.smartEntities.findUnique({ where: { slug: 'neom' } });
    const riyadh = await prisma.smartEntities.findUnique({ where: { slug: 'riyadh' } });

    if (mbs && pif) {
      await prisma.entityLinks.upsert({
        where: {
          source_entity_id_target_entity_id_relationship_type: {
            source_entity_id: mbs.id,
            target_entity_id: pif.id,
            relationship_type: 'chairman_of'
          }
        },
        update: {},
        create: {
          source_entity_id: mbs.id,
          target_entity_id: pif.id,
          relationship_type: 'chairman_of',
          relationship_ar: 'ุฑุฆูุณ ูุฌูุณ ุฅุฏุงุฑุฉ',
          strength: 10
        }
      });
    }

    if (mbs && neom) {
      await prisma.entityLinks.upsert({
        where: {
          source_entity_id_target_entity_id_relationship_type: {
            source_entity_id: mbs.id,
            target_entity_id: neom.id,
            relationship_type: 'founder_of'
          }
        },
        update: {},
        create: {
          source_entity_id: mbs.id,
          target_entity_id: neom.id,
          relationship_type: 'founder_of',
          relationship_ar: 'ูุคุณุณ',
          strength: 9
        }
      });
    }

    if (mbs && riyadh) {
      await prisma.entityLinks.upsert({
        where: {
          source_entity_id_target_entity_id_relationship_type: {
            source_entity_id: mbs.id,
            target_entity_id: riyadh.id,
            relationship_type: 'located_in'
          }
        },
        update: {},
        create: {
          source_entity_id: mbs.id,
          target_entity_id: riyadh.id,
          relationship_type: 'located_in',
          relationship_ar: 'ูููู ูู',
          strength: 8
        }
      });
    }

    console.log('โ ุชู ุฅูุดุงุก ุงูุนูุงูุงุช');

    // ุนุฑุถ ุงูุฅุญุตุงุฆูุงุช ุงูููุงุฆูุฉ
    const entityTypesCount = await prisma.entityTypes.count();
    const entitiesCount = await prisma.smartEntities.count();
    const termsCount = await prisma.smartTerms.count();
    const linksCount = await prisma.entityLinks.count();

    console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูุจูุงูุงุช ุงูููุดุฃุฉ:');
    console.log(`   ๐ ุฃููุงุน ุงูููุงูุงุช: ${entityTypesCount}`);
    console.log(`   ๐ท๏ธ ุงูููุงูุงุช: ${entitiesCount}`);
    console.log(`   ๐ ุงููุตุทูุญุงุช: ${termsCount}`);
    console.log(`   ๐ ุงูุนูุงูุงุช: ${linksCount}`);

    console.log('\n๐ ุชู ุฅูุดุงุก ุฌููุน ุงูุจูุงูุงุช ุงูุฃูููุฉ ุจูุฌุงุญ!');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุงูุจูุงูุงุช:', error);
  } finally {
    await prisma.$disconnect();
  }
}

seedSmartEntities(); 