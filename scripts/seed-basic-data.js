const { PrismaClient } = require('../lib/generated/prisma');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedBasicData() {
  console.log('๐ฑ ุจุฏุก ุฅุถุงูุฉ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ...');

  try {
    // 1. ุฅุถุงูุฉ ุงูุฃุฏูุงุฑ ุงูุฃุณุงุณูุฉ
    console.log('\n๐ ุฅุถุงูุฉ ุงูุฃุฏูุงุฑ...');
    const roles = [
      { 
        id: 'role-admin-001',
        name: 'admin', 
        display_name: 'ูุฏูุฑ ุงููุธุงู',
        description: 'ุตูุงุญูุงุช ูุงููุฉ ุนูู ุงููุธุงู',
        permissions: JSON.stringify(['all']),
        is_system: true,
        created_at: new Date(),
        updated_at: new Date()
      },
      { 
        id: 'role-editor-001',
        name: 'editor', 
        display_name: 'ูุญุฑุฑ',
        description: 'ุฅุถุงูุฉ ูุชุนุฏูู ุงููุญุชูู',
        permissions: JSON.stringify(['create_article', 'edit_article', 'delete_article', 'manage_comments']),
        is_system: true,
        created_at: new Date(),
        updated_at: new Date()
      },
      { 
        id: 'role-author-001',
        name: 'author', 
        display_name: 'ูุงุชุจ',
        description: 'ูุชุงุจุฉ ุงูููุงูุงุช ูุงูุขุฑุงุก',
        permissions: JSON.stringify(['create_article', 'edit_own_article']),
        is_system: true,
        created_at: new Date(),
        updated_at: new Date()
      },
      { 
        id: 'role-correspondent-001',
        name: 'correspondent', 
        display_name: 'ูุฑุงุณู',
        description: 'ุฅุฑุณุงู ุงูุฃุฎุจุงุฑ ูู ุงูููุฏุงู',
        permissions: JSON.stringify(['create_news', 'edit_own_news']),
        is_system: true,
        created_at: new Date(),
        updated_at: new Date()
      },
      { 
        id: 'role-moderator-001',
        name: 'moderator', 
        display_name: 'ูุดุฑู',
        description: 'ุฅุฏุงุฑุฉ ุงูุชุนูููุงุช ูุงููุญุชูู',
        permissions: JSON.stringify(['manage_comments', 'moderate_content']),
        is_system: true,
        created_at: new Date(),
        updated_at: new Date()
      },
      { 
        id: 'role-user-001',
        name: 'user', 
        display_name: 'ูุณุชุฎุฏู',
        description: 'ูุณุชุฎุฏู ุนุงุฏู',
        permissions: JSON.stringify(['read', 'comment']),
        is_system: false,
        created_at: new Date(),
        updated_at: new Date()
      }
    ];

    for (const role of roles) {
      await prisma.roles.upsert({
        where: { name: role.name },
        update: role,
        create: role
      });
      console.log(`โ ุชู ุฅุถุงูุฉ ุฏูุฑ: ${role.display_name}`);
    }

    // 2. ุฅุถุงูุฉ ุฃุนุถุงุก ุงููุฑูู
    console.log('\n๐ฅ ุฅุถุงูุฉ ุฃุนุถุงุก ุงููุฑูู...');
    const teamMembers = [
      {
        name: 'ุฃุญูุฏ ุงูุตุญูู',
        role: 'ุฑุฆูุณ ุงูุชุญุฑูุฑ',
        bio: 'ุตุญูู ูุชูุฑุณ ุจุฎุจุฑุฉ ุชุฒูุฏ ุนู 15 ุนุงูุงู ูู ุงูุตุญุงูุฉ ุงูุฅููุชุฑูููุฉ',
        avatar: '/images/team/editor1.jpg',
        email: 'ahmed@sabq.org',
        order_index: 1
      },
      {
        name: 'ูุงุทูุฉ ุงููุญุฑุฑุฉ',
        role: 'ูุญุฑุฑุฉ ุฃุฎุจุงุฑ',
        bio: 'ูุชุฎุตุตุฉ ูู ุงูุฃุฎุจุงุฑ ุงููุญููุฉ ูุงูุดุคูู ุงูุงุฌุชูุงุนูุฉ',
        avatar: '/images/team/editor2.jpg',
        email: 'fatima@sabq.org',
        order_index: 2
      },
      {
        name: 'ูุญูุฏ ุงููุฑุงุณู',
        role: 'ูุฑุงุณู ููุฏุงูู',
        bio: 'ูุฑุงุณู ูู ููุทูุฉ ุงูุฑูุงุถุ ูุชุฎุตุต ูู ุงูุฃุฎุจุงุฑ ุงูุนุงุฌูุฉ',
        avatar: '/images/team/correspondent1.jpg',
        email: 'mohammed@sabq.org',
        order_index: 3
      }
    ];

    for (const member of teamMembers) {
      await prisma.team_members.upsert({
        where: { email: member.email },
        update: member,
        create: member
      });
      console.log(`โ ุชู ุฅุถุงูุฉ ุนุถู ูุฑูู: ${member.name}`);
    }

    // 3. ุฅุถุงูุฉ ูุณุชุฎุฏููู ููุฑุงุณููู
    console.log('\n๐ฐ ุฅุถุงูุฉ ุงููุฑุงุณููู...');
    const correspondentRole = await prisma.roles.findUnique({
      where: { name: 'correspondent' }
    });

    const correspondents = [
      {
        name: 'ุฎุงูุฏ ุงููุฑุงุณู',
        email: 'khaled.correspondent@sabq.org',
        password: await bcrypt.hash('password123', 10),
        role_id: correspondentRole?.id,
        is_active: true,
        is_email_verified: true
      },
      {
        name: 'ุณุงุฑุฉ ุงููุฑุงุณูุฉ',
        email: 'sara.correspondent@sabq.org',
        password: await bcrypt.hash('password123', 10),
        role_id: correspondentRole?.id,
        is_active: true,
        is_email_verified: true
      },
      {
        name: 'ุนุจุฏุงููู ุงููุฑุงุณู',
        email: 'abdullah.correspondent@sabq.org',
        password: await bcrypt.hash('password123', 10),
        role_id: correspondentRole?.id,
        is_active: true,
        is_email_verified: true
      }
    ];

    for (const correspondent of correspondents) {
      await prisma.users.upsert({
        where: { email: correspondent.email },
        update: correspondent,
        create: correspondent
      });
      console.log(`โ ุชู ุฅุถุงูุฉ ูุฑุงุณู: ${correspondent.name}`);
    }

    // 4. ุฅุถุงูุฉ ูุชุงุจ ุงูุฑุฃู
    console.log('\nโ๏ธ ุฅุถุงูุฉ ูุชุงุจ ุงูุฑุฃู...');
    const opinionAuthors = [
      {
        name: 'ุฏ. ุนุจุฏุงูุฑุญูู ุงููุงุชุจ',
        bio: 'ุฃุณุชุงุฐ ุฌุงูุนู ููุงุชุจ ุฑุฃู ูุชุฎุตุต ูู ุงูุดุคูู ุงูุณูุงุณูุฉ',
        avatar: '/images/authors/author1.jpg',
        email: 'abdulrahman@sabq.org',
        specialization: 'ุงูุดุคูู ุงูุณูุงุณูุฉ'
      },
      {
        name: 'ุฃ. ููุฑุฉ ุงููุงุชุจุฉ',
        bio: 'ูุงุชุจุฉ ูุจุงุญุซุฉ ูู ุงูุดุคูู ุงูุงุฌุชูุงุนูุฉ',
        avatar: '/images/authors/author2.jpg',
        email: 'noura@sabq.org',
        specialization: 'ุงูุดุคูู ุงูุงุฌุชูุงุนูุฉ'
      }
    ];

    for (const author of opinionAuthors) {
      await prisma.opinion_authors.upsert({
        where: { email: author.email },
        update: author,
        create: author
      });
      console.log(`โ ุชู ุฅุถุงูุฉ ูุงุชุจ ุฑุฃู: ${author.name}`);
    }

    console.log('\nโ ุชูุช ุฅุถุงูุฉ ุฌููุน ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ุจูุฌุงุญ!');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุถุงูุฉ ุงูุจูุงูุงุช:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุณูุฑุจุช
seedBasicData()
  .then(() => {
    console.log('๐ ุงูุชูู ุฅุถุงูุฉ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('๐ฅ ูุดู ุฅุถุงูุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }); 