#!/usr/bin/env node

/**
 * ุณูุฑูุจุช ุงุฎุชุจุงุฑ API ุงูุฑูุงุจุท ุงูุฐููุฉ
 * ูุฎุชุจุฑ ุชุญููู ุงููุตูุต ูุงุณุชุฎุฑุงุฌ ุงูููุงูุงุช ูุงููุตุทูุญุงุช
 */

const fetch = require('node-fetch').default || require('node-fetch');

const API_BASE = 'http://localhost:3001';

// ูุตูุต ุชุฌุฑูุจูุฉ ููุงุฎุชุจุงุฑ
const testTexts = [
  {
    name: 'ุฎุจุฑ ุณูุงุณู',
    text: `ุฃุนูู ููู ุงูุนูุฏ ุงูุณุนูุฏู ุงูุฃููุฑ ูุญูุฏ ุจู ุณููุงู ุนู ุฅุทูุงู ูุดุฑูุน ูููู ุงูุฌุฏูุฏ ูู ููุทูุฉ ุชุจููุ ูุงูุฐู ูุฃุชู ุถูู ุฑุคูุฉ ุงูุณุนูุฏูุฉ 2030 ูุชูููุน ุงูุงูุชุตุงุฏ ูุชูููู ุงูุงุนุชูุงุฏ ุนูู ุงูููุท. ุงููุดุฑูุน ุงูุฐู ููุน ูู ุดูุงู ุบุฑุจ ุงูููููุฉ ุณูุถู ูุฏููุฉ ุฐุง ูุงูู ุงููุณุชูุจููุฉ.`
  },
  {
    name: 'ุฎุจุฑ ุงูุชุตุงุฏู',
    text: `ุฃุนูู ูุฒูุฑ ุงููุงููุฉ ูุญูุฏ ุงูุฌุฏุนุงู ุฃู ุงููุงุชุฌ ุงููุญูู ุงูุฅุฌูุงูู ููููููุฉ ุณุฌู ูููุงู ูููุงู ุฎูุงู ุงูุฑุจุน ุงูุซุงูุซ ูู ุงูุนุงู. ูุฃุดุงุฑ ุฅูู ุฃู ุตูุฏูู ุงูุงุณุชุซูุงุฑุงุช ุงูุนุงูุฉ ููุงุตู ุงุณุชุซูุงุฑุงุชู ูู ูุดุฑูุน ุงููุฏูุฉ ูุดุฑูุฉ ุฃุฑุงููู ุงูุณุนูุฏูุฉ.`
  },
  {
    name: 'ูุต ุจุณูุท',
    text: `ุฒุงุฑ ุงูููู ุณููุงู ูุฏููุฉ ุงูุฑูุงุถ ูุฌุฏุฉ ูุงูุชุชุงุญ ุนุฏุฉ ูุดุงุฑูุน ุชููููุฉ ุฌุฏูุฏุฉ.`
  }
];

async function testAnalyzeAPI(text, testName) {
  console.log(`\n๐งช ุงุฎุชุจุงุฑ: ${testName}`);
  console.log(`๐ ุงููุต: ${text.substring(0, 100)}...`);
  
  try {
    const response = await fetch(`${API_BASE}/api/smart-links/analyze`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: text,
        context: 'test'
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.log(`โ ูุดู ุงูุทูุจ: ${response.status} - ${errorData.error}`);
      return;
    }

    const data = await response.json();
    
    console.log(`โก ููุช ุงููุนุงูุฌุฉ: ${data.processingTime}ms`);
    console.log(`๐ ุฅุฌูุงูู ุงููุทุงุจูุงุช: ${data.totalMatches}`);
    
    // ุนุฑุถ ุงูููุงูุงุช ุงูููุชุดูุฉ
    if (data.entities.length > 0) {
      console.log(`\n๐ฅ ุงูููุงูุงุช ุงูููุชุดูุฉ (${data.entities.length}):`);
      data.entities.forEach((entity, index) => {
        console.log(`   ${index + 1}. "${entity.matchedText}" โ ${entity.entity.name_ar}`);
        console.log(`      ุงูููุน: ${entity.entity.entity_type.icon} ${entity.entity.entity_type.name_ar}`);
        console.log(`      ุงูุซูุฉ: ${(entity.confidence * 100).toFixed(1)}%`);
        console.log(`      ุงูุฃูููุฉ: ${entity.entity.importance_score}/10`);
        console.log(`      ุงูุฑุงุจุท: ${entity.suggestedLink.type} - ${entity.suggestedLink.url || 'tooltip'}`);
      });
    }
    
    // ุนุฑุถ ุงููุตุทูุญุงุช ุงูููุชุดูุฉ
    if (data.terms.length > 0) {
      console.log(`\n๐ ุงููุตุทูุญุงุช ุงูููุชุดูุฉ (${data.terms.length}):`);
      data.terms.forEach((term, index) => {
        console.log(`   ${index + 1}. "${term.matchedText}" โ ${term.term.term}`);
        console.log(`      ุงูุชุนุฑูู: ${term.term.definition}`);
        console.log(`      ุงููุฆุฉ: ${term.term.category}`);
      });
    }
    
    if (data.totalMatches === 0) {
      console.log('๐คท ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ูุทุงุจูุงุช');
    }
    
  } catch (error) {
    console.log(`โ ุฎุทุฃ ูู ุงูุทูุจ: ${error.message}`);
  }
}

async function testStatisticsAPI() {
  console.log('\n๐ ุงุฎุชุจุงุฑ API ุงูุฅุญุตุงุฆูุงุช...');
  
  try {
    const response = await fetch(`${API_BASE}/api/smart-links/analyze`, {
      method: 'GET'
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.log(`โ ูุดู ุงูุทูุจ: ${response.status} - ${errorData.error}`);
      return;
    }

    const data = await response.json();
    
    console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงููุธุงู:');
    console.log(`   ๐ท๏ธ ุฅุฌูุงูู ุงูููุงูุงุช: ${data.statistics.totalEntities}`);
    console.log(`   ๐ ุฅุฌูุงูู ุงููุตุทูุญุงุช: ${data.statistics.totalTerms}`);
    console.log(`   ๐ ุฅุฌูุงูู ุงูุฑูุงุจุท: ${data.statistics.totalLinks}`);
    
    console.log('\n๐ ุฃููุงุน ุงูููุงูุงุช:');
    data.statistics.entityTypes.forEach(type => {
      console.log(`   ${type.icon} ${type.type}: ${type.count}`);
    });
    
    if (data.topEntities.length > 0) {
      console.log('\n๐ฅ ุงูููุงูุงุช ุงูุฃูุซุฑ ุฐูุฑุงู:');
      data.topEntities.slice(0, 5).forEach((entity, index) => {
        console.log(`   ${index + 1}. ${entity.icon} ${entity.name} (${entity.mentions} ูุฑุฉ)`);
      });
    }
    
  } catch (error) {
    console.log(`โ ุฎุทุฃ ูู ุทูุจ ุงูุฅุญุตุงุฆูุงุช: ${error.message}`);
  }
}

async function runTests() {
  console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุงูุฑูุงุจุท ุงูุฐููุฉ...');
  console.log(`๐ API Base: ${API_BASE}`);
  
  // ุงุฎุชุจุงุฑ API ุงูุฅุญุตุงุฆูุงุช ุฃููุงู
  await testStatisticsAPI();
  
  // ุงุฎุชุจุงุฑ ุชุญููู ุงููุตูุต
  for (const testCase of testTexts) {
    await testAnalyzeAPI(testCase.text, testCase.name);
    await new Promise(resolve => setTimeout(resolve, 500)); // ุงูุชุธุงุฑ ูุตูุฑ
  }
  
  console.log('\nโ ุงูุชูุช ุฌููุน ุงูุงุฎุชุจุงุฑุงุช!');
  console.log('\n๐ก ูุนุฑุถ ุงููุฒูุฏ ูู ุงูุชูุงุตููุ ุชุญูู ูู ูุญุฏุฉ ุงูุชุญูู ูู ุงููุชุตูุญ ุฃู logs ุงูุฎุงุฏู.');
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช
runTests().catch(error => {
  console.error('โ ุฎุทุฃ ุนุงู ูู ุงูุงุฎุชุจุงุฑุงุช:', error);
  process.exit(1);
}); 