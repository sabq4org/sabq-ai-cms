const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function diagnoseAuthorMismatch() {
  console.log('๐ ุชุดุฎูุต ุดุงูู ููุดููุฉ ุนุฏู ุชุทุงุจู ุงููุฑุงุณููู/ุงููุคูููู...\n');
  
  try {
    // 1. ูุญุต ุฌุฏูู team_members
    console.log('๐ 1. ูุญุต ุฃุนุถุงุก ุงููุฑูู ูู team_members:');
    const teamMembers = await prisma.team_members.findMany({
      select: { 
        id: true, 
        name: true, 
        email: true, 
        role: true,
        department: true,
        is_active: true,
        created_at: true
      },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`   ๐ ุฅุฌูุงูู ุฃุนุถุงุก ุงููุฑูู: ${teamMembers.length}`);
    
    const writerMembers = teamMembers.filter(m => m.role === 'writer');
    const reporterMembers = teamMembers.filter(m => m.role === 'reporter');
    const editorMembers = teamMembers.filter(m => m.role === 'editor');
    const otherMembers = teamMembers.filter(m => !['writer', 'reporter', 'editor'].includes(m.role));
    
    console.log(`   โ๏ธ ูุชุงุจ: ${writerMembers.length}`);
    console.log(`   ๐ฐ ูุฑุงุณููู: ${reporterMembers.length}`);
    console.log(`   โ๏ธ ูุญุฑุฑูู: ${editorMembers.length}`);
    console.log(`   ๐ฅ ุฃุฎุฑู: ${otherMembers.length}`);
    
    if (teamMembers.length > 0) {
      console.log('\n   ๐ ูุงุฆูุฉ ุฌููุน ุฃุนุถุงุก ุงููุฑูู:');
      teamMembers.forEach((member, index) => {
        const activeStatus = member.is_active ? 'โ' : 'โ';
        console.log(`      ${index + 1}. ${member.name} (${member.role}) ${activeStatus} - ${member.email || 'ูุง ููุฌุฏ ุจุฑูุฏ'}`);
      });
    }
    
    // 2. ูุญุต ุฌุฏูู article_authors
    console.log('\n๐ 2. ูุญุต ุงููุคูููู ูู article_authors:');
    try {
      const articleAuthors = await prisma.article_authors.findMany({
        select: { 
          id: true, 
          full_name: true, 
          email: true, 
          role: true,
          title: true,
          is_active: true,
          created_at: true
        },
        orderBy: { created_at: 'desc' }
      });
      
      console.log(`   ๐ ุฅุฌูุงูู ุงููุคูููู: ${articleAuthors.length}`);
      
      const activeAuthors = articleAuthors.filter(a => a.is_active);
      const inactiveAuthors = articleAuthors.filter(a => !a.is_active);
      
      console.log(`   โ ูุดุท: ${activeAuthors.length}`);
      console.log(`   โ ุบูุฑ ูุดุท: ${inactiveAuthors.length}`);
      
      if (articleAuthors.length > 0) {
        console.log('\n   ๐ ูุงุฆูุฉ ุฌููุน ุงููุคูููู:');
        articleAuthors.forEach((author, index) => {
          const activeStatus = author.is_active ? 'โ' : 'โ';
          console.log(`      ${index + 1}. ${author.full_name} (${author.role || 'ุบูุฑ ูุญุฏุฏ'}) ${activeStatus} - ${author.email || 'ูุง ููุฌุฏ ุจุฑูุฏ'}`);
        });
      }
    } catch (error) {
      console.log('   โ ุฌุฏูู article_authors ุบูุฑ ููุฌูุฏ ุฃู ูุญุชูู ุฃุฎุทุงุก:', error.message);
    }
    
    // 3. ูุญุต ุฌุฏูู users  
    console.log('\n๐ 3. ูุญุต ุงููุณุชุฎุฏููู ูู users:');
    const users = await prisma.users.findMany({
      where: {
        role: { not: 'user' } // ุงุณุชุซูุงุก ุงููุณุชุฎุฏููู ุงูุนุงุฏููู
      },
      select: { 
        id: true, 
        name: true, 
        email: true, 
        role: true,
        created_at: true
      },
      orderBy: { created_at: 'desc' }
    });
    
    console.log(`   ๐ ุฅุฌูุงูู ุงููุณุชุฎุฏููู (ุบูุฑ ุงูุนุงุฏููู): ${users.length}`);
    
    if (users.length > 0) {
      console.log('\n   ๐ ูุงุฆูุฉ ุงููุณุชุฎุฏููู:');
      users.forEach((user, index) => {
        console.log(`      ${index + 1}. ${user.name} (${user.role}) - ${user.email}`);
      });
    }
    
    // 4. ูุญุต ุฌุฏูู reporters
    console.log('\n๐ 4. ูุญุต ุงููุฑุงุณููู ูู reporters:');
    try {
      const reporters = await prisma.reporters.findMany({
        select: { 
          id: true, 
          user_id: true,
          full_name: true, 
          slug: true,
          title: true,
          is_verified: true,
          created_at: true
        },
        orderBy: { created_at: 'desc' }
      });
      
      console.log(`   ๐ ุฅุฌูุงูู ุงููุฑุงุณููู: ${reporters.length}`);
      
      if (reporters.length > 0) {
        console.log('\n   ๐ ูุงุฆูุฉ ุงููุฑุงุณููู:');
        reporters.forEach((reporter, index) => {
          const verifiedStatus = reporter.is_verified ? 'โ' : 'โ';
          console.log(`      ${index + 1}. ${reporter.full_name} (${reporter.title || 'ุบูุฑ ูุญุฏุฏ'}) ${verifiedStatus} - user_id: ${reporter.user_id || 'ุบูุฑ ูุฑุจูุท'}`);
        });
      }
    } catch (error) {
      console.log('   โ ุฌุฏูู reporters ุบูุฑ ููุฌูุฏ ุฃู ูุญุชูู ุฃุฎุทุงุก:', error.message);
    }
    
    // 5. ุชุญููู ุงูุชุทุงุจู ูุงูุงุฎุชูุงูุงุช
    console.log('\n๐ 5. ุชุญููู ุงูุชุทุงุจู ูุงูุงุฎุชูุงูุงุช:');
    
    // ููุงุฑูุฉ team_members ูุน article_authors
    if (teamMembers.length > 0) {
      console.log('\n   ๐ ููุงุฑูุฉ team_members ูุน article_authors:');
      
      try {
        const articleAuthors = await prisma.article_authors.findMany({
          select: { full_name: true, email: true, is_active: true }
        });
        
        const teamWriters = teamMembers.filter(m => ['writer', 'reporter', 'editor'].includes(m.role));
        
        console.log(`   ๐ ูุชุงุจ/ูุฑุงุณููู ูู ุงููุฑูู: ${teamWriters.length}`);
        console.log(`   ๐ ูุคูููู ูู article_authors: ${articleAuthors.length}`);
        
        // ุงูุจุญุซ ุนู ุงูููููุฏูู
        const missingInAuthors = teamWriters.filter(member => 
          !articleAuthors.some(author => 
            author.full_name === member.name || author.email === member.email
          )
        );
        
        const extraInAuthors = articleAuthors.filter(author => 
          !teamWriters.some(member => 
            member.name === author.full_name || member.email === author.email
          )
        );
        
        if (missingInAuthors.length > 0) {
          console.log('\n   โ ููุฌูุฏ ูู team_members ููู ููููุฏ ูู article_authors:');
          missingInAuthors.forEach((member, index) => {
            console.log(`      ${index + 1}. ${member.name} (${member.role}) - ${member.email || 'ูุง ููุฌุฏ ุจุฑูุฏ'}`);
          });
        }
        
        if (extraInAuthors.length > 0) {
          console.log('\n   โ ููุฌูุฏ ูู article_authors ููู ููููุฏ ูู team_members:');
          extraInAuthors.forEach((author, index) => {
            console.log(`      ${index + 1}. ${author.full_name} - ${author.email || 'ูุง ููุฌุฏ ุจุฑูุฏ'}`);
          });
        }
        
        if (missingInAuthors.length === 0 && extraInAuthors.length === 0) {
          console.log('   โ ุงูุจูุงูุงุช ูุชุทุงุจูุฉ ุจูู team_members ู article_authors');
        }
        
      } catch (error) {
        console.log('   โ ุฎุทุฃ ูู ููุงุฑูุฉ ุงูุจูุงูุงุช:', error.message);
      }
    }
    
    // 6. ูุญุต ุงูููุงูุงุช ุงูุฃุฎูุฑุฉ ูauthors ุงููุฑุชุจุทูู
    console.log('\n๐ 6. ูุญุต ุขุฎุฑ 5 ููุงูุงุช ู author_id ุงููุฑุชุจุท:');
    const recentArticles = await prisma.articles.findMany({
      select: { 
        id: true, 
        title: true, 
        author_id: true,
        status: true,
        created_at: true
      },
      orderBy: { created_at: 'desc' },
      take: 5
    });
    
    if (recentArticles.length > 0) {
      recentArticles.forEach((article, index) => {
        console.log(`   ${index + 1}. "${article.title.substring(0, 50)}..." - author_id: ${article.author_id || 'ุบูุฑ ูุญุฏุฏ'} - ${article.status}`);
      });
    } else {
      console.log('   โ ูุง ุชูุฌุฏ ููุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
    
    console.log('\nโ ุงูุชูู ุงูุชุดุฎูุต ุงูุดุงูู');
    
    // 7. ุงูุชุฑุงุญุงุช ููุฅุตูุงุญ
    console.log('\n๐ก ุงูุชุฑุงุญุงุช ููุฅุตูุงุญ:');
    console.log('   1. ุชุดุบูู ุณูุฑูุจุช ููุฒุงููุฉ team_members ูุน article_authors');
    console.log('   2. ุงูุชุฃูุฏ ูู ุฃู API /api/admin/article-authors ูุฌูุจ ุงูุจูุงูุงุช ุงูุตุญูุญุฉ');
    console.log('   3. ูุญุต ุฃู ุตูุญุงุช ุฅูุดุงุก ุงูููุงูุงุช ุชุณุชุฎุฏู ุงูู API ุงูุตุญูุญ');
    console.log('   4. ุฅุถุงูุฉ validation ููุชุฃูุฏ ูู ูุฌูุฏ ุงููุคูู ูุจู ุญูุธ ุงูููุงู');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุชุดุฎูุต:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
diagnoseAuthorMismatch()
  .then(() => {
    console.log('\n๐ ุชู ุงูุงูุชูุงุก ูู ุงูุชุดุฎูุต');
    process.exit(0);
  })
  .catch((error) => {
    console.error('โ ุฎุทุฃ ูู ุชุดุบูู ุงูุณูุฑูุจุช:', error);
    process.exit(1);
  });