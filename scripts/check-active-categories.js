const { PrismaClient } = require('../lib/generated/prisma');
const prisma = new PrismaClient();

async function checkCategories() {
  try {
    console.log('üîç ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™ ŸÅŸä ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™...\n');
    
    // ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™
    const allCategories = await prisma.categories.findMany({
      orderBy: { display_order: 'asc' }
    });
    
    console.log(`üìä ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™: ${allCategories.length}`);
    console.log(`‚úÖ ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™ ÿßŸÑŸÜÿ¥ÿ∑ÿ©: ${allCategories.filter(c => c.is_active).length}`);
    console.log(`‚ùå ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™ ÿ∫Ÿäÿ± ÿßŸÑŸÜÿ¥ÿ∑ÿ©: ${allCategories.filter(c => !c.is_active).length}\n`);
    
    console.log('üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™:');
    console.log('‚îÄ'.repeat(80));
    
    allCategories.forEach(cat => {
      const status = cat.is_active ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${cat.name.padEnd(20)} | ID: ${cat.id} | Slug: ${cat.slug}`);
    });
    
    // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ŸÅŸÇÿ∑
    console.log('\nüéØ ÿßŸÑÿ™ÿµŸÜŸäŸÅÿßÿ™ ÿßŸÑŸÜÿ¥ÿ∑ÿ© ŸÅŸÇÿ∑:');
    console.log('‚îÄ'.repeat(80));
    
    const activeCategories = await prisma.categories.findMany({
      where: { is_active: true },
      orderBy: { display_order: 'asc' }
    });
    
    if (activeCategories.length === 0) {
      console.log('‚ö†Ô∏è  ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ÿµŸÜŸäŸÅÿßÿ™ ŸÜÿ¥ÿ∑ÿ©!');
    } else {
      activeCategories.forEach(cat => {
        console.log(`‚Ä¢ ${cat.name} (${cat.id})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå ÿÆÿ∑ÿ£:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCategories(); 