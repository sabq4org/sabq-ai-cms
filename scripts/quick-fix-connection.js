const { PrismaClient } = require('@prisma/client');

console.log('๐ ุชุดุฎูุต ุณุฑูุน ููุดููุฉ ุงูุงุชุตุงู...\n');

// ุงูุชุญูู ูู ุงููุชุบูุฑุงุช
console.log('1๏ธโฃ ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ:');
console.log(`   DATABASE_URL: ${process.env.DATABASE_URL ? 'โ ููุฌูุฏ' : 'โ ููููุฏ'}`);
console.log(`   DIRECT_URL: ${process.env.DIRECT_URL ? 'โ ููุฌูุฏ' : 'โ ููููุฏ'}`);

if (!process.env.DATABASE_URL) {
  console.error('\nโ DATABASE_URL ุบูุฑ ููุฌูุฏ! ุชุฃูุฏ ูู ูุฌูุฏ ููู .env');
  process.exit(1);
}

// ุฅูุดุงุก Prisma client
console.log('\n2๏ธโฃ ุฅูุดุงุก Prisma Client...');
const prisma = new PrismaClient({
  log: ['error', 'warn'],
  datasources: {
    db: {
      url: process.env.DATABASE_URL + '?connection_limit=5&pool_timeout=20&connect_timeout=30'
    }
  }
});

// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
async function testConnection() {
  console.log('\n3๏ธโฃ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู...');
  
  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`   ูุญุงููุฉ ${attempt}/3...`);
      
      // ูุญุงููุฉ ุงูุงุชุตุงู
      await prisma.$connect();
      
      // ุงุฎุชุจุงุฑ query ุจุณูุท
      const result = await prisma.$queryRaw`SELECT 1 as test`;
      console.log('   โ ุงูุงุชุตุงู ูุฌุญ!');
      
      // ุงุฎุชุจุงุฑ ุงูุฌุฏุงูู
      console.log('\n4๏ธโฃ ูุญุต ุงูุฌุฏุงูู:');
      
      try {
        const articlesCount = await prisma.articles.count();
        console.log(`   โ articles: ${articlesCount} ููุงู`);
      } catch (e) {
        console.log(`   โ articles: ${e.message}`);
      }
      
      try {
        const analysesCount = await prisma.deep_analyses.count();
        console.log(`   โ deep_analyses: ${analysesCount} ุชุญููู`);
      } catch (e) {
        console.log(`   โ deep_analyses: ${e.message}`);
      }
      
      try {
        const categoriesCount = await prisma.categories.count();
        console.log(`   โ categories: ${categoriesCount} ุชุตููู`);
      } catch (e) {
        console.log(`   โ categories: ${e.message}`);
      }
      
      return true;
    } catch (error) {
      console.error(`   โ ูุดูุช ุงููุญุงููุฉ ${attempt}: ${error.message}`);
      
      if (attempt < 3) {
        console.log(`   โณ ุงูุชุธุงุฑ ${attempt * 2} ุซุงููุฉ...`);
        await new Promise(resolve => setTimeout(resolve, attempt * 2000));
      }
    }
  }
  
  return false;
}

// ุงูุญููู ุงูููุชุฑุญุฉ
function showSolutions() {
  console.log('\n๐ก ุงูุญููู ุงูููุชุฑุญุฉ:');
  console.log('\n1. ุชุญุฏูุซ DATABASE_URL ูู .env:');
  console.log('   ุฃุถู ูุฐู ุงููุนุงููุงุช ูู ููุงูุฉ DATABASE_URL:');
  console.log('   ?connection_limit=10&pool_timeout=20&connect_timeout=30&pgbouncer=true&sslmode=require');
  
  console.log('\n2. ุฅุนุงุฏุฉ ุชุดุบูู ุงูุชุทุจูู:');
  console.log('   # ุฃููู ุงูุฎุงุฏู (Ctrl+C)');
  console.log('   rm -rf .next node_modules/.cache');
  console.log('   npm run dev');
  
  console.log('\n3. ูู ููุญุฉ ุชุญูู Supabase:');
  console.log('   - ุชุญูู ูู Connection Pooling');
  console.log('   - ุชุฃูุฏ ูู ุฃู Mode = Transaction');
  console.log('   - Pool Size = 10-15');
  
  console.log('\n4. ุฌุฑุจ ุงูุงุชุตุงู ูู pgAdmin ุฃู TablePlus');
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑ
testConnection()
  .then(success => {
    if (success) {
      console.log('\nโ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจุดูู ุฌูุฏ!');
      console.log('\n๐ ุฅุฐุง ูุงูุช ุงููุดููุฉ ูุณุชูุฑุฉ ูู ุงูุชุทุจูู:');
      console.log('   1. ุฃุนุฏ ุชุดุบูู ุฎุงุฏู Next.js');
      console.log('   2. ุงูุณุญ cache ุงููุชุตูุญ');
      console.log('   3. ุชุญูู ูู console ุงููุชุตูุญ ููุฃุฎุทุงุก');
    } else {
      console.log('\nโ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช!');
      showSolutions();
    }
  })
  .catch(error => {
    console.error('\nโ ุฎุทุฃ ุบูุฑ ูุชููุน:', error);
    showSolutions();
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('\n๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
  }); 