# Multi-stage Dockerfile محسن لـ AWS ECS/Fargate
FROM node:18-alpine AS base

# تثبيت الحزم الأساسية المطلوبة
RUN apk add --no-cache libc6-compat

# مرحلة تثبيت التبعيات
FROM base AS deps
WORKDIR /app

# نسخ ملفات package أولاً للاستفادة من Docker cache
COPY package.json package-lock.json* ./
RUN npm ci --only=production && npm cache clean --force

# مرحلة البناء
FROM base AS builder
WORKDIR /app

# نسخ node_modules من مرحلة deps
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# توليد Prisma Client
RUN npx prisma generate

# إعداد متغيرات البيئة للبناء
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# بناء التطبيق
RUN npm run build

# مرحلة الإنتاج
FROM base AS runner
WORKDIR /app

# إعداد متغيرات البيئة
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000

# إنشاء مستخدم غير جذر للأمان
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# نسخ الملفات المطلوبة فقط
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# نسخ Next.js build output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# نسخ Prisma generated files
COPY --from=builder --chown=nextjs:nodejs /app/lib/generated ./lib/generated

USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

CMD ["node", "server.js"]
